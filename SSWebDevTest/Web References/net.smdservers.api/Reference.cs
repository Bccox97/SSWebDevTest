//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SSWebDevTest.net.smdservers.api {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CallCenterWsSoap", Namespace="http://tempuri.org/CallCenterWs/CallCenterWs")]
    public partial class CallCenterWs : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UnitDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitStatusUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitContentsUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitContentsRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback BulletinBoardInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback POSItemsRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback POSItemUpdateInStockQuantityOperationCompleted;
        
        private System.Threading.SendOrPostCallback POSItemAddToLedgerOperationCompleted;
        
        private System.Threading.SendOrPostCallback POSItemPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback POSItemPaymentWithDiscountOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaidThroughDateByLedgerIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargeDescriptionsRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargesAndPaymentsByLedgerIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PromotionsRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback DiscountPlansRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback DiscountPlansRetrieveIncludingDisabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsuranceCoverageRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsuranceCoverageAddToLedgerOperationCompleted;
        
        private System.Threading.SendOrPostCallback LedgerProofOfInsuranceUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeeLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteSearchByPostalCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitTypePriceListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitTypePriceList_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CorpUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CorpUserSecurityUnlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeeSecurityUnlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback CorpUserDisableOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeeDisableOperationCompleted;
        
        private System.Threading.SendOrPostCallback CorpUserPasswordResetOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeePasswordResetOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitStandardRateUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitPushRateUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitStandardRateUpdate_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitStandardRateUpdate_v3OperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitPushRateUpdate_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback NationalMasterAccountsRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback CCProcessorSiteCurrentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ACHProcessorSiteCurrentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationBillingInfoUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationBillingInfoByTenantIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScheduleMoveOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback PhoneIntegrationPushCallInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitorTrackingListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitorTrackingAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitorTrackingUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitorAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompetitorUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeypadZonesRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback TimeZonesRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScheduleTenantRateChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScheduleTenantRateChange_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback PostalCodeOwnerMarketsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallStoredProcedureOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallStoredProcedure_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CallStoredProcedure_v3OperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteLinkeSignCreateLeaseURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteLinkeSignCreateLeaseURL_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteLinkeSignCreateDocumentURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteLinkeSignGenerateDownloadUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback FormsRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeeLoginCCCOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomBillingDateChargesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DiscountPlanUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DiscountPlanUnitTypesListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DiscountPlanUpdateSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationFeeAddWithSourceForMobileStorageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefundPaymentCashOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefundPaymentCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefundPaymentCreditCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefundPaymentApplyToDifferentUnitOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargesAllByLedgerIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargeDateUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargePriceUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplyCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteLinkeSignPreviewLeaseURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteLinkeSignPreviewDocumentURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallTrackingCampaignsRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallTrackingCampaignsAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallTrackingCampaignsUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallTrackingCampaignsDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarketingSourcesAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarketingSourcesUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarketingSourcesDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback LedgerTransferToNewTenantOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantNewDetailedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantNewDetailed_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantInfoByTenantIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantInvoicesByTenantIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInCostRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInCostRetrieve_28DayBillingOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInCostRetrieveWithDiscountOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerAccountsBalanceDetailsWithDiscountOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInCostRetrieveWithDiscount_28DayBillingOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInCostRetrieveWithDiscount_28DayBilling_ReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInCostRetrieveWithDiscount_ReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInCostRetrieveWithPushRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInReservationOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInReservation_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInReservation_v3OperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInReservation_28DayBillingOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInWithDiscountOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInWithDiscount_28DayBillingOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInWithDiscount_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInWithDiscount_v3OperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInWithDiscount_v4OperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantUpdate_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantUpdate_AdditionalContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantUpdate_NationalAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantImageUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantImagePathUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantImagePathRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseOrderNumberRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseOrderNumberUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitsInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitsInformation_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitsInformation_v3OperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitsInformationByUnitNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitsInformationByUnitIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitsInformationAvailableUnitsOnlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitsInformationAvailableUnitsOnly_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback MapShapesRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationFeeRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationList_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationList_v3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationListByTenantIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantConnectSettingsRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantConnectSettingsUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveInOutListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProrationInformationRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarketingSourcesRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantMarketingUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantUpdateMilitaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantExitSurveyUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantLoginAndSecurityUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback LedgerBillingDayUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsuranceRateUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback LedgerInvoiceUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback LedgerVehicleUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback LedgerPurchaseOrderUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeliveryFeeRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback RentTaxRatesRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleWithSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleWithSource_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleBankTransferWithSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentMultipleWithSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentMultipleWithSource_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleWithPrepaidDiscountOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleCashOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleCashWithSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleCheckWithSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleACHOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSimpleACHWithSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationFeeAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationFeeAddWithSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargeAddToLedgerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvenienceFeeRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvenienceFeeAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvenienceFeeRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback LedgersByTenantIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentsByLedgerIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LedgerStatementByLedgerIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerAccountsBalanceDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerAccountsBalanceDetailsWithPrepaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerAccountsChargesWithPrepaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerAccountsMakeFutureChargesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationNewWithSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationNewWithSource_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationNewWithSource_v3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationNewWithSource_v4OperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationNewWithSource_v5OperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationUpdate_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationUpdate_v3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationNoteInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReservationNotesRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantListOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantListDetailedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantListDetailed_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantListDetailed_v3OperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantSearchDetailedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantListDetailedMovedInTenantsOnlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantIDByUnitNameOrAccessCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantSMSOptInUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantEmailOptInUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback LeadGenerationOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantPasswordByEmailAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentTypesRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantBillingInfoByTenantIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantBillingInfoUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantBillingInfoUpdate_v2OperationCompleted;
        
        private System.Threading.SendOrPostCallback BillingInfoByTenantIDForMobileOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantNoteInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback TenantNotesRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteLinkeSignAndeFilesRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnitAddOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CallCenterWs() {
            this.Url = global::SSWebDevTest.Properties.Settings.Default.SSWebDevTest_net_smdservers_api_CallCenterWs;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UnitDeleteCompletedEventHandler UnitDeleteCompleted;
        
        /// <remarks/>
        public event UnitStatusUpdateCompletedEventHandler UnitStatusUpdateCompleted;
        
        /// <remarks/>
        public event UnitContentsUpdateCompletedEventHandler UnitContentsUpdateCompleted;
        
        /// <remarks/>
        public event UnitContentsRetrieveCompletedEventHandler UnitContentsRetrieveCompleted;
        
        /// <remarks/>
        public event BulletinBoardInsertCompletedEventHandler BulletinBoardInsertCompleted;
        
        /// <remarks/>
        public event POSItemsRetrieveCompletedEventHandler POSItemsRetrieveCompleted;
        
        /// <remarks/>
        public event POSItemUpdateInStockQuantityCompletedEventHandler POSItemUpdateInStockQuantityCompleted;
        
        /// <remarks/>
        public event POSItemAddToLedgerCompletedEventHandler POSItemAddToLedgerCompleted;
        
        /// <remarks/>
        public event POSItemPaymentCompletedEventHandler POSItemPaymentCompleted;
        
        /// <remarks/>
        public event POSItemPaymentWithDiscountCompletedEventHandler POSItemPaymentWithDiscountCompleted;
        
        /// <remarks/>
        public event PaidThroughDateByLedgerIDCompletedEventHandler PaidThroughDateByLedgerIDCompleted;
        
        /// <remarks/>
        public event ChargeDescriptionsRetrieveCompletedEventHandler ChargeDescriptionsRetrieveCompleted;
        
        /// <remarks/>
        public event ChargesAndPaymentsByLedgerIDCompletedEventHandler ChargesAndPaymentsByLedgerIDCompleted;
        
        /// <remarks/>
        public event PromotionsRetrieveCompletedEventHandler PromotionsRetrieveCompleted;
        
        /// <remarks/>
        public event DiscountPlansRetrieveCompletedEventHandler DiscountPlansRetrieveCompleted;
        
        /// <remarks/>
        public event DiscountPlansRetrieveIncludingDisabledCompletedEventHandler DiscountPlansRetrieveIncludingDisabledCompleted;
        
        /// <remarks/>
        public event InsuranceCoverageRetrieveCompletedEventHandler InsuranceCoverageRetrieveCompleted;
        
        /// <remarks/>
        public event InsuranceCoverageAddToLedgerCompletedEventHandler InsuranceCoverageAddToLedgerCompleted;
        
        /// <remarks/>
        public event LedgerProofOfInsuranceUpdateCompletedEventHandler LedgerProofOfInsuranceUpdateCompleted;
        
        /// <remarks/>
        public event EmployeeLoginCompletedEventHandler EmployeeLoginCompleted;
        
        /// <remarks/>
        public event SiteSearchByPostalCodeCompletedEventHandler SiteSearchByPostalCodeCompleted;
        
        /// <remarks/>
        public event UnitTypePriceListCompletedEventHandler UnitTypePriceListCompleted;
        
        /// <remarks/>
        public event UnitTypePriceList_v2CompletedEventHandler UnitTypePriceList_v2Completed;
        
        /// <remarks/>
        public event CorpUserListCompletedEventHandler CorpUserListCompleted;
        
        /// <remarks/>
        public event EmployeeListCompletedEventHandler EmployeeListCompleted;
        
        /// <remarks/>
        public event CorpUserSecurityUnlockCompletedEventHandler CorpUserSecurityUnlockCompleted;
        
        /// <remarks/>
        public event EmployeeSecurityUnlockCompletedEventHandler EmployeeSecurityUnlockCompleted;
        
        /// <remarks/>
        public event CorpUserDisableCompletedEventHandler CorpUserDisableCompleted;
        
        /// <remarks/>
        public event EmployeeDisableCompletedEventHandler EmployeeDisableCompleted;
        
        /// <remarks/>
        public event CorpUserPasswordResetCompletedEventHandler CorpUserPasswordResetCompleted;
        
        /// <remarks/>
        public event EmployeePasswordResetCompletedEventHandler EmployeePasswordResetCompleted;
        
        /// <remarks/>
        public event UnitStandardRateUpdateCompletedEventHandler UnitStandardRateUpdateCompleted;
        
        /// <remarks/>
        public event UnitPushRateUpdateCompletedEventHandler UnitPushRateUpdateCompleted;
        
        /// <remarks/>
        public event UnitStandardRateUpdate_v2CompletedEventHandler UnitStandardRateUpdate_v2Completed;
        
        /// <remarks/>
        public event UnitStandardRateUpdate_v3CompletedEventHandler UnitStandardRateUpdate_v3Completed;
        
        /// <remarks/>
        public event UnitPushRateUpdate_v2CompletedEventHandler UnitPushRateUpdate_v2Completed;
        
        /// <remarks/>
        public event NationalMasterAccountsRetrieveCompletedEventHandler NationalMasterAccountsRetrieveCompleted;
        
        /// <remarks/>
        public event CCProcessorSiteCurrentTypeCompletedEventHandler CCProcessorSiteCurrentTypeCompleted;
        
        /// <remarks/>
        public event ACHProcessorSiteCurrentTypeCompletedEventHandler ACHProcessorSiteCurrentTypeCompleted;
        
        /// <remarks/>
        public event ReservationBillingInfoUpdateCompletedEventHandler ReservationBillingInfoUpdateCompleted;
        
        /// <remarks/>
        public event ReservationBillingInfoByTenantIDCompletedEventHandler ReservationBillingInfoByTenantIDCompleted;
        
        /// <remarks/>
        public event ScheduleMoveOutCompletedEventHandler ScheduleMoveOutCompleted;
        
        /// <remarks/>
        public event PhoneIntegrationPushCallInformationCompletedEventHandler PhoneIntegrationPushCallInformationCompleted;
        
        /// <remarks/>
        public event CompetitorTrackingListCompletedEventHandler CompetitorTrackingListCompleted;
        
        /// <remarks/>
        public event CompetitorTrackingAddCompletedEventHandler CompetitorTrackingAddCompleted;
        
        /// <remarks/>
        public event CompetitorTrackingUpdateCompletedEventHandler CompetitorTrackingUpdateCompleted;
        
        /// <remarks/>
        public event CompetitorAddCompletedEventHandler CompetitorAddCompleted;
        
        /// <remarks/>
        public event CompetitorUpdateCompletedEventHandler CompetitorUpdateCompleted;
        
        /// <remarks/>
        public event KeypadZonesRetrieveCompletedEventHandler KeypadZonesRetrieveCompleted;
        
        /// <remarks/>
        public event TimeZonesRetrieveCompletedEventHandler TimeZonesRetrieveCompleted;
        
        /// <remarks/>
        public event ScheduleTenantRateChangeCompletedEventHandler ScheduleTenantRateChangeCompleted;
        
        /// <remarks/>
        public event ScheduleTenantRateChange_v2CompletedEventHandler ScheduleTenantRateChange_v2Completed;
        
        /// <remarks/>
        public event PostalCodeOwnerMarketsListCompletedEventHandler PostalCodeOwnerMarketsListCompleted;
        
        /// <remarks/>
        public event CallStoredProcedureCompletedEventHandler CallStoredProcedureCompleted;
        
        /// <remarks/>
        public event CallStoredProcedure_v2CompletedEventHandler CallStoredProcedure_v2Completed;
        
        /// <remarks/>
        public event CallStoredProcedure_v3CompletedEventHandler CallStoredProcedure_v3Completed;
        
        /// <remarks/>
        public event SiteLinkeSignCreateLeaseURLCompletedEventHandler SiteLinkeSignCreateLeaseURLCompleted;
        
        /// <remarks/>
        public event SiteLinkeSignCreateLeaseURL_v2CompletedEventHandler SiteLinkeSignCreateLeaseURL_v2Completed;
        
        /// <remarks/>
        public event SiteLinkeSignCreateDocumentURLCompletedEventHandler SiteLinkeSignCreateDocumentURLCompleted;
        
        /// <remarks/>
        public event SiteLinkeSignGenerateDownloadUrlCompletedEventHandler SiteLinkeSignGenerateDownloadUrlCompleted;
        
        /// <remarks/>
        public event FormsRetrieveCompletedEventHandler FormsRetrieveCompleted;
        
        /// <remarks/>
        public event EmployeeLoginCCCCompletedEventHandler EmployeeLoginCCCCompleted;
        
        /// <remarks/>
        public event CustomBillingDateChargesCompletedEventHandler CustomBillingDateChargesCompleted;
        
        /// <remarks/>
        public event DiscountPlanUpdateCompletedEventHandler DiscountPlanUpdateCompleted;
        
        /// <remarks/>
        public event DiscountPlanUnitTypesListCompletedEventHandler DiscountPlanUnitTypesListCompleted;
        
        /// <remarks/>
        public event DiscountPlanUpdateSimpleCompletedEventHandler DiscountPlanUpdateSimpleCompleted;
        
        /// <remarks/>
        public event ReservationFeeAddWithSourceForMobileStorageCompletedEventHandler ReservationFeeAddWithSourceForMobileStorageCompleted;
        
        /// <remarks/>
        public event RefundPaymentCashCompletedEventHandler RefundPaymentCashCompleted;
        
        /// <remarks/>
        public event RefundPaymentCheckCompletedEventHandler RefundPaymentCheckCompleted;
        
        /// <remarks/>
        public event RefundPaymentCreditCardCompletedEventHandler RefundPaymentCreditCardCompleted;
        
        /// <remarks/>
        public event RefundPaymentApplyToDifferentUnitCompletedEventHandler RefundPaymentApplyToDifferentUnitCompleted;
        
        /// <remarks/>
        public event ChargesAllByLedgerIDCompletedEventHandler ChargesAllByLedgerIDCompleted;
        
        /// <remarks/>
        public event ChargeDateUpdateCompletedEventHandler ChargeDateUpdateCompleted;
        
        /// <remarks/>
        public event ChargePriceUpdateCompletedEventHandler ChargePriceUpdateCompleted;
        
        /// <remarks/>
        public event ApplyCreditCompletedEventHandler ApplyCreditCompleted;
        
        /// <remarks/>
        public event SiteLinkeSignPreviewLeaseURLCompletedEventHandler SiteLinkeSignPreviewLeaseURLCompleted;
        
        /// <remarks/>
        public event SiteLinkeSignPreviewDocumentURLCompletedEventHandler SiteLinkeSignPreviewDocumentURLCompleted;
        
        /// <remarks/>
        public event CallTrackingCampaignsRetrieveCompletedEventHandler CallTrackingCampaignsRetrieveCompleted;
        
        /// <remarks/>
        public event CallTrackingCampaignsAddCompletedEventHandler CallTrackingCampaignsAddCompleted;
        
        /// <remarks/>
        public event CallTrackingCampaignsUpdateCompletedEventHandler CallTrackingCampaignsUpdateCompleted;
        
        /// <remarks/>
        public event CallTrackingCampaignsDeleteCompletedEventHandler CallTrackingCampaignsDeleteCompleted;
        
        /// <remarks/>
        public event MarketingSourcesAddCompletedEventHandler MarketingSourcesAddCompleted;
        
        /// <remarks/>
        public event MarketingSourcesUpdateCompletedEventHandler MarketingSourcesUpdateCompleted;
        
        /// <remarks/>
        public event MarketingSourcesDeleteCompletedEventHandler MarketingSourcesDeleteCompleted;
        
        /// <remarks/>
        public event LedgerTransferToNewTenantCompletedEventHandler LedgerTransferToNewTenantCompleted;
        
        /// <remarks/>
        public event TenantNewCompletedEventHandler TenantNewCompleted;
        
        /// <remarks/>
        public event TenantNewDetailedCompletedEventHandler TenantNewDetailedCompleted;
        
        /// <remarks/>
        public event TenantNewDetailed_v2CompletedEventHandler TenantNewDetailed_v2Completed;
        
        /// <remarks/>
        public event TenantInfoByTenantIDCompletedEventHandler TenantInfoByTenantIDCompleted;
        
        /// <remarks/>
        public event TenantInvoicesByTenantIDCompletedEventHandler TenantInvoicesByTenantIDCompleted;
        
        /// <remarks/>
        public event MoveInCostRetrieveCompletedEventHandler MoveInCostRetrieveCompleted;
        
        /// <remarks/>
        public event MoveInCostRetrieve_28DayBillingCompletedEventHandler MoveInCostRetrieve_28DayBillingCompleted;
        
        /// <remarks/>
        public event MoveInCostRetrieveWithDiscountCompletedEventHandler MoveInCostRetrieveWithDiscountCompleted;
        
        /// <remarks/>
        public event CustomerAccountsBalanceDetailsWithDiscountCompletedEventHandler CustomerAccountsBalanceDetailsWithDiscountCompleted;
        
        /// <remarks/>
        public event MoveInCostRetrieveWithDiscount_28DayBillingCompletedEventHandler MoveInCostRetrieveWithDiscount_28DayBillingCompleted;
        
        /// <remarks/>
        public event MoveInCostRetrieveWithDiscount_28DayBilling_ReservationCompletedEventHandler MoveInCostRetrieveWithDiscount_28DayBilling_ReservationCompleted;
        
        /// <remarks/>
        public event MoveInCostRetrieveWithDiscount_ReservationCompletedEventHandler MoveInCostRetrieveWithDiscount_ReservationCompleted;
        
        /// <remarks/>
        public event MoveInCostRetrieveWithPushRateCompletedEventHandler MoveInCostRetrieveWithPushRateCompleted;
        
        /// <remarks/>
        public event MoveInCompletedEventHandler MoveInCompleted;
        
        /// <remarks/>
        public event MoveInReservationCompletedEventHandler MoveInReservationCompleted;
        
        /// <remarks/>
        public event MoveInReservation_v2CompletedEventHandler MoveInReservation_v2Completed;
        
        /// <remarks/>
        public event MoveInReservation_v3CompletedEventHandler MoveInReservation_v3Completed;
        
        /// <remarks/>
        public event MoveInReservation_28DayBillingCompletedEventHandler MoveInReservation_28DayBillingCompleted;
        
        /// <remarks/>
        public event MoveInWithDiscountCompletedEventHandler MoveInWithDiscountCompleted;
        
        /// <remarks/>
        public event MoveInWithDiscount_28DayBillingCompletedEventHandler MoveInWithDiscount_28DayBillingCompleted;
        
        /// <remarks/>
        public event MoveInWithDiscount_v2CompletedEventHandler MoveInWithDiscount_v2Completed;
        
        /// <remarks/>
        public event MoveInWithDiscount_v3CompletedEventHandler MoveInWithDiscount_v3Completed;
        
        /// <remarks/>
        public event MoveInWithDiscount_v4CompletedEventHandler MoveInWithDiscount_v4Completed;
        
        /// <remarks/>
        public event MoveOutCompletedEventHandler MoveOutCompleted;
        
        /// <remarks/>
        public event TenantUpdateCompletedEventHandler TenantUpdateCompleted;
        
        /// <remarks/>
        public event TenantUpdate_v2CompletedEventHandler TenantUpdate_v2Completed;
        
        /// <remarks/>
        public event TenantUpdate_AdditionalContactCompletedEventHandler TenantUpdate_AdditionalContactCompleted;
        
        /// <remarks/>
        public event TenantUpdate_NationalAccountCompletedEventHandler TenantUpdate_NationalAccountCompleted;
        
        /// <remarks/>
        public event TenantImageUploadCompletedEventHandler TenantImageUploadCompleted;
        
        /// <remarks/>
        public event TenantImagePathUpdateCompletedEventHandler TenantImagePathUpdateCompleted;
        
        /// <remarks/>
        public event TenantImagePathRetrieveCompletedEventHandler TenantImagePathRetrieveCompleted;
        
        /// <remarks/>
        public event PurchaseOrderNumberRetrieveCompletedEventHandler PurchaseOrderNumberRetrieveCompleted;
        
        /// <remarks/>
        public event PurchaseOrderNumberUpdateCompletedEventHandler PurchaseOrderNumberUpdateCompleted;
        
        /// <remarks/>
        public event UnitsInformationCompletedEventHandler UnitsInformationCompleted;
        
        /// <remarks/>
        public event UnitsInformation_v2CompletedEventHandler UnitsInformation_v2Completed;
        
        /// <remarks/>
        public event UnitsInformation_v3CompletedEventHandler UnitsInformation_v3Completed;
        
        /// <remarks/>
        public event UnitsInformationByUnitNameCompletedEventHandler UnitsInformationByUnitNameCompleted;
        
        /// <remarks/>
        public event UnitsInformationByUnitIDCompletedEventHandler UnitsInformationByUnitIDCompleted;
        
        /// <remarks/>
        public event UnitsInformationAvailableUnitsOnlyCompletedEventHandler UnitsInformationAvailableUnitsOnlyCompleted;
        
        /// <remarks/>
        public event UnitsInformationAvailableUnitsOnly_v2CompletedEventHandler UnitsInformationAvailableUnitsOnly_v2Completed;
        
        /// <remarks/>
        public event MapShapesRetrieveCompletedEventHandler MapShapesRetrieveCompleted;
        
        /// <remarks/>
        public event ReservationFeeRetrieveCompletedEventHandler ReservationFeeRetrieveCompleted;
        
        /// <remarks/>
        public event ReservationListCompletedEventHandler ReservationListCompleted;
        
        /// <remarks/>
        public event ReservationList_v2CompletedEventHandler ReservationList_v2Completed;
        
        /// <remarks/>
        public event ReservationList_v3CompletedEventHandler ReservationList_v3Completed;
        
        /// <remarks/>
        public event ReservationListByTenantIDCompletedEventHandler ReservationListByTenantIDCompleted;
        
        /// <remarks/>
        public event TenantConnectSettingsRetrieveCompletedEventHandler TenantConnectSettingsRetrieveCompleted;
        
        /// <remarks/>
        public event TenantConnectSettingsUpdateCompletedEventHandler TenantConnectSettingsUpdateCompleted;
        
        /// <remarks/>
        public event MoveInOutListCompletedEventHandler MoveInOutListCompleted;
        
        /// <remarks/>
        public event ProrationInformationRetrieveCompletedEventHandler ProrationInformationRetrieveCompleted;
        
        /// <remarks/>
        public event MarketingSourcesRetrieveCompletedEventHandler MarketingSourcesRetrieveCompleted;
        
        /// <remarks/>
        public event TenantMarketingUpdateCompletedEventHandler TenantMarketingUpdateCompleted;
        
        /// <remarks/>
        public event TenantUpdateMilitaryCompletedEventHandler TenantUpdateMilitaryCompleted;
        
        /// <remarks/>
        public event TenantExitSurveyUpdateCompletedEventHandler TenantExitSurveyUpdateCompleted;
        
        /// <remarks/>
        public event TenantLoginAndSecurityUpdateCompletedEventHandler TenantLoginAndSecurityUpdateCompleted;
        
        /// <remarks/>
        public event LedgerBillingDayUpdateCompletedEventHandler LedgerBillingDayUpdateCompleted;
        
        /// <remarks/>
        public event InsuranceRateUpdateCompletedEventHandler InsuranceRateUpdateCompleted;
        
        /// <remarks/>
        public event LedgerInvoiceUpdateCompletedEventHandler LedgerInvoiceUpdateCompleted;
        
        /// <remarks/>
        public event LedgerVehicleUpdateCompletedEventHandler LedgerVehicleUpdateCompleted;
        
        /// <remarks/>
        public event LedgerPurchaseOrderUpdateCompletedEventHandler LedgerPurchaseOrderUpdateCompleted;
        
        /// <remarks/>
        public event DeliveryFeeRetrieveCompletedEventHandler DeliveryFeeRetrieveCompleted;
        
        /// <remarks/>
        public event RentTaxRatesRetrieveCompletedEventHandler RentTaxRatesRetrieveCompleted;
        
        /// <remarks/>
        public event PaymentSimpleCompletedEventHandler PaymentSimpleCompleted;
        
        /// <remarks/>
        public event PaymentSimpleWithSourceCompletedEventHandler PaymentSimpleWithSourceCompleted;
        
        /// <remarks/>
        public event PaymentSimpleWithSource_v2CompletedEventHandler PaymentSimpleWithSource_v2Completed;
        
        /// <remarks/>
        public event PaymentSimpleBankTransferWithSourceCompletedEventHandler PaymentSimpleBankTransferWithSourceCompleted;
        
        /// <remarks/>
        public event PaymentMultipleWithSourceCompletedEventHandler PaymentMultipleWithSourceCompleted;
        
        /// <remarks/>
        public event PaymentMultipleWithSource_v2CompletedEventHandler PaymentMultipleWithSource_v2Completed;
        
        /// <remarks/>
        public event PaymentSimpleWithPrepaidDiscountCompletedEventHandler PaymentSimpleWithPrepaidDiscountCompleted;
        
        /// <remarks/>
        public event PaymentSimpleCashCompletedEventHandler PaymentSimpleCashCompleted;
        
        /// <remarks/>
        public event PaymentSimpleCashWithSourceCompletedEventHandler PaymentSimpleCashWithSourceCompleted;
        
        /// <remarks/>
        public event PaymentSimpleCheckCompletedEventHandler PaymentSimpleCheckCompleted;
        
        /// <remarks/>
        public event PaymentSimpleCheckWithSourceCompletedEventHandler PaymentSimpleCheckWithSourceCompleted;
        
        /// <remarks/>
        public event PaymentSimpleACHCompletedEventHandler PaymentSimpleACHCompleted;
        
        /// <remarks/>
        public event PaymentSimpleACHWithSourceCompletedEventHandler PaymentSimpleACHWithSourceCompleted;
        
        /// <remarks/>
        public event ReservationFeeAddCompletedEventHandler ReservationFeeAddCompleted;
        
        /// <remarks/>
        public event ReservationFeeAddWithSourceCompletedEventHandler ReservationFeeAddWithSourceCompleted;
        
        /// <remarks/>
        public event ChargeAddToLedgerCompletedEventHandler ChargeAddToLedgerCompleted;
        
        /// <remarks/>
        public event ConvenienceFeeRetrieveCompletedEventHandler ConvenienceFeeRetrieveCompleted;
        
        /// <remarks/>
        public event ConvenienceFeeAddCompletedEventHandler ConvenienceFeeAddCompleted;
        
        /// <remarks/>
        public event ConvenienceFeeRemoveCompletedEventHandler ConvenienceFeeRemoveCompleted;
        
        /// <remarks/>
        public event LedgersByTenantIDCompletedEventHandler LedgersByTenantIDCompleted;
        
        /// <remarks/>
        public event PaymentsByLedgerIDCompletedEventHandler PaymentsByLedgerIDCompleted;
        
        /// <remarks/>
        public event LedgerStatementByLedgerIDCompletedEventHandler LedgerStatementByLedgerIDCompleted;
        
        /// <remarks/>
        public event CustomerAccountsBalanceDetailsCompletedEventHandler CustomerAccountsBalanceDetailsCompleted;
        
        /// <remarks/>
        public event CustomerAccountsBalanceDetailsWithPrepaymentCompletedEventHandler CustomerAccountsBalanceDetailsWithPrepaymentCompleted;
        
        /// <remarks/>
        public event CustomerAccountsChargesWithPrepaymentCompletedEventHandler CustomerAccountsChargesWithPrepaymentCompleted;
        
        /// <remarks/>
        public event CustomerAccountsMakeFutureChargesCompletedEventHandler CustomerAccountsMakeFutureChargesCompleted;
        
        /// <remarks/>
        public event SiteInformationCompletedEventHandler SiteInformationCompleted;
        
        /// <remarks/>
        public event PaymentSettingsCompletedEventHandler PaymentSettingsCompleted;
        
        /// <remarks/>
        public event ReservationNewCompletedEventHandler ReservationNewCompleted;
        
        /// <remarks/>
        public event ReservationNewWithSourceCompletedEventHandler ReservationNewWithSourceCompleted;
        
        /// <remarks/>
        public event ReservationNewWithSource_v2CompletedEventHandler ReservationNewWithSource_v2Completed;
        
        /// <remarks/>
        public event ReservationNewWithSource_v3CompletedEventHandler ReservationNewWithSource_v3Completed;
        
        /// <remarks/>
        public event ReservationNewWithSource_v4CompletedEventHandler ReservationNewWithSource_v4Completed;
        
        /// <remarks/>
        public event ReservationNewWithSource_v5CompletedEventHandler ReservationNewWithSource_v5Completed;
        
        /// <remarks/>
        public event ReservationUpdateCompletedEventHandler ReservationUpdateCompleted;
        
        /// <remarks/>
        public event ReservationUpdate_v2CompletedEventHandler ReservationUpdate_v2Completed;
        
        /// <remarks/>
        public event ReservationUpdate_v3CompletedEventHandler ReservationUpdate_v3Completed;
        
        /// <remarks/>
        public event ReservationNoteInsertCompletedEventHandler ReservationNoteInsertCompleted;
        
        /// <remarks/>
        public event ReservationNotesRetrieveCompletedEventHandler ReservationNotesRetrieveCompleted;
        
        /// <remarks/>
        public event TenantListCompletedEventHandler TenantListCompleted;
        
        /// <remarks/>
        public event TenantListDetailedCompletedEventHandler TenantListDetailedCompleted;
        
        /// <remarks/>
        public event TenantListDetailed_v2CompletedEventHandler TenantListDetailed_v2Completed;
        
        /// <remarks/>
        public event TenantListDetailed_v3CompletedEventHandler TenantListDetailed_v3Completed;
        
        /// <remarks/>
        public event TenantSearchDetailedCompletedEventHandler TenantSearchDetailedCompleted;
        
        /// <remarks/>
        public event TenantListDetailedMovedInTenantsOnlyCompletedEventHandler TenantListDetailedMovedInTenantsOnlyCompleted;
        
        /// <remarks/>
        public event TenantIDByUnitNameOrAccessCodeCompletedEventHandler TenantIDByUnitNameOrAccessCodeCompleted;
        
        /// <remarks/>
        public event TenantSMSOptInUpdateCompletedEventHandler TenantSMSOptInUpdateCompleted;
        
        /// <remarks/>
        public event TenantEmailOptInUpdateCompletedEventHandler TenantEmailOptInUpdateCompleted;
        
        /// <remarks/>
        public event LeadGenerationCompletedEventHandler LeadGenerationCompleted;
        
        /// <remarks/>
        public event TenantLoginCompletedEventHandler TenantLoginCompleted;
        
        /// <remarks/>
        public event TenantPasswordByEmailAddressCompletedEventHandler TenantPasswordByEmailAddressCompleted;
        
        /// <remarks/>
        public event PaymentTypesRetrieveCompletedEventHandler PaymentTypesRetrieveCompleted;
        
        /// <remarks/>
        public event TenantBillingInfoByTenantIDCompletedEventHandler TenantBillingInfoByTenantIDCompleted;
        
        /// <remarks/>
        public event TenantBillingInfoUpdateCompletedEventHandler TenantBillingInfoUpdateCompleted;
        
        /// <remarks/>
        public event TenantBillingInfoUpdate_v2CompletedEventHandler TenantBillingInfoUpdate_v2Completed;
        
        /// <remarks/>
        public event BillingInfoByTenantIDForMobileCompletedEventHandler BillingInfoByTenantIDForMobileCompleted;
        
        /// <remarks/>
        public event TenantNoteInsertCompletedEventHandler TenantNoteInsertCompleted;
        
        /// <remarks/>
        public event TenantNotesRetrieveCompletedEventHandler TenantNotesRetrieveCompleted;
        
        /// <remarks/>
        public event SiteLinkeSignAndeFilesRetrieveCompletedEventHandler SiteLinkeSignAndeFilesRetrieveCompleted;
        
        /// <remarks/>
        public event UnitAddCompletedEventHandler UnitAddCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitDelete", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitDelete(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int UnitID) {
            object[] results = this.Invoke("UnitDelete", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        UnitID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitDeleteAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int UnitID) {
            this.UnitDeleteAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, UnitID, null);
        }
        
        /// <remarks/>
        public void UnitDeleteAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int UnitID, object userState) {
            if ((this.UnitDeleteOperationCompleted == null)) {
                this.UnitDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitDeleteOperationCompleted);
            }
            this.InvokeAsync("UnitDelete", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        UnitID}, this.UnitDeleteOperationCompleted, userState);
        }
        
        private void OnUnitDeleteOperationCompleted(object arg) {
            if ((this.UnitDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitDeleteCompleted(this, new UnitDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitStatusUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitStatusUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int UnitID, bool bRentable, bool bNeedsService, string sUnitNote) {
            object[] results = this.Invoke("UnitStatusUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        UnitID,
                        bRentable,
                        bNeedsService,
                        sUnitNote});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitStatusUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int UnitID, bool bRentable, bool bNeedsService, string sUnitNote) {
            this.UnitStatusUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, UnitID, bRentable, bNeedsService, sUnitNote, null);
        }
        
        /// <remarks/>
        public void UnitStatusUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int UnitID, bool bRentable, bool bNeedsService, string sUnitNote, object userState) {
            if ((this.UnitStatusUpdateOperationCompleted == null)) {
                this.UnitStatusUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitStatusUpdateOperationCompleted);
            }
            this.InvokeAsync("UnitStatusUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        UnitID,
                        bRentable,
                        bNeedsService,
                        sUnitNote}, this.UnitStatusUpdateOperationCompleted, userState);
        }
        
        private void OnUnitStatusUpdateOperationCompleted(object arg) {
            if ((this.UnitStatusUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitStatusUpdateCompleted(this, new UnitStatusUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitContentsUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitContentsUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, string sNote) {
            object[] results = this.Invoke("UnitContentsUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        sNote});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitContentsUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, string sNote) {
            this.UnitContentsUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iLedgerID, sNote, null);
        }
        
        /// <remarks/>
        public void UnitContentsUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, string sNote, object userState) {
            if ((this.UnitContentsUpdateOperationCompleted == null)) {
                this.UnitContentsUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitContentsUpdateOperationCompleted);
            }
            this.InvokeAsync("UnitContentsUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        sNote}, this.UnitContentsUpdateOperationCompleted, userState);
        }
        
        private void OnUnitContentsUpdateOperationCompleted(object arg) {
            if ((this.UnitContentsUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitContentsUpdateCompleted(this, new UnitContentsUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitContentsRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitContentsRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID) {
            object[] results = this.Invoke("UnitContentsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitContentsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID) {
            this.UnitContentsRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iLedgerID, null);
        }
        
        /// <remarks/>
        public void UnitContentsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, object userState) {
            if ((this.UnitContentsRetrieveOperationCompleted == null)) {
                this.UnitContentsRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitContentsRetrieveOperationCompleted);
            }
            this.InvokeAsync("UnitContentsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID}, this.UnitContentsRetrieveOperationCompleted, userState);
        }
        
        private void OnUnitContentsRetrieveOperationCompleted(object arg) {
            if ((this.UnitContentsRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitContentsRetrieveCompleted(this, new UnitContentsRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/BulletinBoardInsert", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet BulletinBoardInsert(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sSubject, string sBody) {
            object[] results = this.Invoke("BulletinBoardInsert", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sSubject,
                        sBody});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void BulletinBoardInsertAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sSubject, string sBody) {
            this.BulletinBoardInsertAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sSubject, sBody, null);
        }
        
        /// <remarks/>
        public void BulletinBoardInsertAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sSubject, string sBody, object userState) {
            if ((this.BulletinBoardInsertOperationCompleted == null)) {
                this.BulletinBoardInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBulletinBoardInsertOperationCompleted);
            }
            this.InvokeAsync("BulletinBoardInsert", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sSubject,
                        sBody}, this.BulletinBoardInsertOperationCompleted, userState);
        }
        
        private void OnBulletinBoardInsertOperationCompleted(object arg) {
            if ((this.BulletinBoardInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BulletinBoardInsertCompleted(this, new BulletinBoardInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/POSItemsRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet POSItemsRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("POSItemsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void POSItemsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.POSItemsRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void POSItemsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.POSItemsRetrieveOperationCompleted == null)) {
                this.POSItemsRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOSItemsRetrieveOperationCompleted);
            }
            this.InvokeAsync("POSItemsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.POSItemsRetrieveOperationCompleted, userState);
        }
        
        private void OnPOSItemsRetrieveOperationCompleted(object arg) {
            if ((this.POSItemsRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POSItemsRetrieveCompleted(this, new POSItemsRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/POSItemUpdateInStockQuantity", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet POSItemUpdateInStockQuantity(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ChargeDescID, decimal dcInStock) {
            object[] results = this.Invoke("POSItemUpdateInStockQuantity", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        ChargeDescID,
                        dcInStock});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void POSItemUpdateInStockQuantityAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ChargeDescID, decimal dcInStock) {
            this.POSItemUpdateInStockQuantityAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, ChargeDescID, dcInStock, null);
        }
        
        /// <remarks/>
        public void POSItemUpdateInStockQuantityAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ChargeDescID, decimal dcInStock, object userState) {
            if ((this.POSItemUpdateInStockQuantityOperationCompleted == null)) {
                this.POSItemUpdateInStockQuantityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOSItemUpdateInStockQuantityOperationCompleted);
            }
            this.InvokeAsync("POSItemUpdateInStockQuantity", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        ChargeDescID,
                        dcInStock}, this.POSItemUpdateInStockQuantityOperationCompleted, userState);
        }
        
        private void OnPOSItemUpdateInStockQuantityOperationCompleted(object arg) {
            if ((this.POSItemUpdateInStockQuantityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POSItemUpdateInStockQuantityCompleted(this, new POSItemUpdateInStockQuantityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/POSItemAddToLedger", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet POSItemAddToLedger(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, int ChargeDescID, decimal dcPricePreTax, int iQuantity) {
            object[] results = this.Invoke("POSItemAddToLedger", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        ChargeDescID,
                        dcPricePreTax,
                        iQuantity});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void POSItemAddToLedgerAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, int ChargeDescID, decimal dcPricePreTax, int iQuantity) {
            this.POSItemAddToLedgerAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, ChargeDescID, dcPricePreTax, iQuantity, null);
        }
        
        /// <remarks/>
        public void POSItemAddToLedgerAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, int ChargeDescID, decimal dcPricePreTax, int iQuantity, object userState) {
            if ((this.POSItemAddToLedgerOperationCompleted == null)) {
                this.POSItemAddToLedgerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOSItemAddToLedgerOperationCompleted);
            }
            this.InvokeAsync("POSItemAddToLedger", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        ChargeDescID,
                        dcPricePreTax,
                        iQuantity}, this.POSItemAddToLedgerOperationCompleted, userState);
        }
        
        private void OnPOSItemAddToLedgerOperationCompleted(object arg) {
            if ((this.POSItemAddToLedgerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POSItemAddToLedgerCompleted(this, new POSItemAddToLedgerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/POSItemPayment", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet POSItemPayment(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sChargeDescID, 
                    decimal dcPaymentAmount, 
                    int iPaymentMethod, 
                    string sCheckNum, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int iSource, 
                    bool bTestMode) {
            object[] results = this.Invoke("POSItemPayment", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sChargeDescID,
                        dcPaymentAmount,
                        iPaymentMethod,
                        sCheckNum,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        iSource,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void POSItemPaymentAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sChargeDescID, 
                    decimal dcPaymentAmount, 
                    int iPaymentMethod, 
                    string sCheckNum, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int iSource, 
                    bool bTestMode) {
            this.POSItemPaymentAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sChargeDescID, dcPaymentAmount, iPaymentMethod, sCheckNum, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, iSource, bTestMode, null);
        }
        
        /// <remarks/>
        public void POSItemPaymentAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sChargeDescID, 
                    decimal dcPaymentAmount, 
                    int iPaymentMethod, 
                    string sCheckNum, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int iSource, 
                    bool bTestMode, 
                    object userState) {
            if ((this.POSItemPaymentOperationCompleted == null)) {
                this.POSItemPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOSItemPaymentOperationCompleted);
            }
            this.InvokeAsync("POSItemPayment", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sChargeDescID,
                        dcPaymentAmount,
                        iPaymentMethod,
                        sCheckNum,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        iSource,
                        bTestMode}, this.POSItemPaymentOperationCompleted, userState);
        }
        
        private void OnPOSItemPaymentOperationCompleted(object arg) {
            if ((this.POSItemPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POSItemPaymentCompleted(this, new POSItemPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/POSItemPaymentWithDiscount", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet POSItemPaymentWithDiscount(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sChargeDescID, 
                    decimal dcPaymentAmount, 
                    int iPaymentMethod, 
                    string sCheckNum, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int iSource, 
                    bool bTestMode, 
                    decimal dcDiscountPercent, 
                    decimal dcDiscountFixedAmount, 
                    string sDiscountedChargeDescID, 
                    string sDiscountMemo) {
            object[] results = this.Invoke("POSItemPaymentWithDiscount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sChargeDescID,
                        dcPaymentAmount,
                        iPaymentMethod,
                        sCheckNum,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        iSource,
                        bTestMode,
                        dcDiscountPercent,
                        dcDiscountFixedAmount,
                        sDiscountedChargeDescID,
                        sDiscountMemo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void POSItemPaymentWithDiscountAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sChargeDescID, 
                    decimal dcPaymentAmount, 
                    int iPaymentMethod, 
                    string sCheckNum, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int iSource, 
                    bool bTestMode, 
                    decimal dcDiscountPercent, 
                    decimal dcDiscountFixedAmount, 
                    string sDiscountedChargeDescID, 
                    string sDiscountMemo) {
            this.POSItemPaymentWithDiscountAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sChargeDescID, dcPaymentAmount, iPaymentMethod, sCheckNum, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, iSource, bTestMode, dcDiscountPercent, dcDiscountFixedAmount, sDiscountedChargeDescID, sDiscountMemo, null);
        }
        
        /// <remarks/>
        public void POSItemPaymentWithDiscountAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sChargeDescID, 
                    decimal dcPaymentAmount, 
                    int iPaymentMethod, 
                    string sCheckNum, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int iSource, 
                    bool bTestMode, 
                    decimal dcDiscountPercent, 
                    decimal dcDiscountFixedAmount, 
                    string sDiscountedChargeDescID, 
                    string sDiscountMemo, 
                    object userState) {
            if ((this.POSItemPaymentWithDiscountOperationCompleted == null)) {
                this.POSItemPaymentWithDiscountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPOSItemPaymentWithDiscountOperationCompleted);
            }
            this.InvokeAsync("POSItemPaymentWithDiscount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sChargeDescID,
                        dcPaymentAmount,
                        iPaymentMethod,
                        sCheckNum,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        iSource,
                        bTestMode,
                        dcDiscountPercent,
                        dcDiscountFixedAmount,
                        sDiscountedChargeDescID,
                        sDiscountMemo}, this.POSItemPaymentWithDiscountOperationCompleted, userState);
        }
        
        private void OnPOSItemPaymentWithDiscountOperationCompleted(object arg) {
            if ((this.POSItemPaymentWithDiscountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.POSItemPaymentWithDiscountCompleted(this, new POSItemPaymentWithDiscountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaidThroughDateByLedgerID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaidThroughDateByLedgerID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID) {
            object[] results = this.Invoke("PaidThroughDateByLedgerID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaidThroughDateByLedgerIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID) {
            this.PaidThroughDateByLedgerIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iLedgerID, null);
        }
        
        /// <remarks/>
        public void PaidThroughDateByLedgerIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, object userState) {
            if ((this.PaidThroughDateByLedgerIDOperationCompleted == null)) {
                this.PaidThroughDateByLedgerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaidThroughDateByLedgerIDOperationCompleted);
            }
            this.InvokeAsync("PaidThroughDateByLedgerID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID}, this.PaidThroughDateByLedgerIDOperationCompleted, userState);
        }
        
        private void OnPaidThroughDateByLedgerIDOperationCompleted(object arg) {
            if ((this.PaidThroughDateByLedgerIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaidThroughDateByLedgerIDCompleted(this, new PaidThroughDateByLedgerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ChargeDescriptionsRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChargeDescriptionsRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("ChargeDescriptionsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChargeDescriptionsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.ChargeDescriptionsRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void ChargeDescriptionsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.ChargeDescriptionsRetrieveOperationCompleted == null)) {
                this.ChargeDescriptionsRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargeDescriptionsRetrieveOperationCompleted);
            }
            this.InvokeAsync("ChargeDescriptionsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.ChargeDescriptionsRetrieveOperationCompleted, userState);
        }
        
        private void OnChargeDescriptionsRetrieveOperationCompleted(object arg) {
            if ((this.ChargeDescriptionsRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargeDescriptionsRetrieveCompleted(this, new ChargeDescriptionsRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ChargesAndPaymentsByLedgerID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChargesAndPaymentsByLedgerID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int sLedgerID) {
            object[] results = this.Invoke("ChargesAndPaymentsByLedgerID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sLedgerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChargesAndPaymentsByLedgerIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int sLedgerID) {
            this.ChargesAndPaymentsByLedgerIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sLedgerID, null);
        }
        
        /// <remarks/>
        public void ChargesAndPaymentsByLedgerIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int sLedgerID, object userState) {
            if ((this.ChargesAndPaymentsByLedgerIDOperationCompleted == null)) {
                this.ChargesAndPaymentsByLedgerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargesAndPaymentsByLedgerIDOperationCompleted);
            }
            this.InvokeAsync("ChargesAndPaymentsByLedgerID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sLedgerID}, this.ChargesAndPaymentsByLedgerIDOperationCompleted, userState);
        }
        
        private void OnChargesAndPaymentsByLedgerIDOperationCompleted(object arg) {
            if ((this.ChargesAndPaymentsByLedgerIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargesAndPaymentsByLedgerIDCompleted(this, new ChargesAndPaymentsByLedgerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PromotionsRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PromotionsRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("PromotionsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PromotionsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.PromotionsRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void PromotionsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.PromotionsRetrieveOperationCompleted == null)) {
                this.PromotionsRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPromotionsRetrieveOperationCompleted);
            }
            this.InvokeAsync("PromotionsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.PromotionsRetrieveOperationCompleted, userState);
        }
        
        private void OnPromotionsRetrieveOperationCompleted(object arg) {
            if ((this.PromotionsRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PromotionsRetrieveCompleted(this, new PromotionsRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/DiscountPlansRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DiscountPlansRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("DiscountPlansRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DiscountPlansRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.DiscountPlansRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void DiscountPlansRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.DiscountPlansRetrieveOperationCompleted == null)) {
                this.DiscountPlansRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiscountPlansRetrieveOperationCompleted);
            }
            this.InvokeAsync("DiscountPlansRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.DiscountPlansRetrieveOperationCompleted, userState);
        }
        
        private void OnDiscountPlansRetrieveOperationCompleted(object arg) {
            if ((this.DiscountPlansRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiscountPlansRetrieveCompleted(this, new DiscountPlansRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/DiscountPlansRetrieveIncludingDisabl" +
            "ed", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DiscountPlansRetrieveIncludingDisabled(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("DiscountPlansRetrieveIncludingDisabled", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DiscountPlansRetrieveIncludingDisabledAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.DiscountPlansRetrieveIncludingDisabledAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void DiscountPlansRetrieveIncludingDisabledAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.DiscountPlansRetrieveIncludingDisabledOperationCompleted == null)) {
                this.DiscountPlansRetrieveIncludingDisabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiscountPlansRetrieveIncludingDisabledOperationCompleted);
            }
            this.InvokeAsync("DiscountPlansRetrieveIncludingDisabled", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.DiscountPlansRetrieveIncludingDisabledOperationCompleted, userState);
        }
        
        private void OnDiscountPlansRetrieveIncludingDisabledOperationCompleted(object arg) {
            if ((this.DiscountPlansRetrieveIncludingDisabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiscountPlansRetrieveIncludingDisabledCompleted(this, new DiscountPlansRetrieveIncludingDisabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/InsuranceCoverageRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet InsuranceCoverageRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("InsuranceCoverageRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void InsuranceCoverageRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.InsuranceCoverageRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void InsuranceCoverageRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.InsuranceCoverageRetrieveOperationCompleted == null)) {
                this.InsuranceCoverageRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsuranceCoverageRetrieveOperationCompleted);
            }
            this.InvokeAsync("InsuranceCoverageRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.InsuranceCoverageRetrieveOperationCompleted, userState);
        }
        
        private void OnInsuranceCoverageRetrieveOperationCompleted(object arg) {
            if ((this.InsuranceCoverageRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsuranceCoverageRetrieveCompleted(this, new InsuranceCoverageRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/InsuranceCoverageAddToLedger", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet InsuranceCoverageAddToLedger(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, int UnitID, int InsuranceCoverageID, string sPolicyNumber, System.DateTime dStartDate) {
            object[] results = this.Invoke("InsuranceCoverageAddToLedger", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        UnitID,
                        InsuranceCoverageID,
                        sPolicyNumber,
                        dStartDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void InsuranceCoverageAddToLedgerAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, int UnitID, int InsuranceCoverageID, string sPolicyNumber, System.DateTime dStartDate) {
            this.InsuranceCoverageAddToLedgerAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, UnitID, InsuranceCoverageID, sPolicyNumber, dStartDate, null);
        }
        
        /// <remarks/>
        public void InsuranceCoverageAddToLedgerAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, int UnitID, int InsuranceCoverageID, string sPolicyNumber, System.DateTime dStartDate, object userState) {
            if ((this.InsuranceCoverageAddToLedgerOperationCompleted == null)) {
                this.InsuranceCoverageAddToLedgerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsuranceCoverageAddToLedgerOperationCompleted);
            }
            this.InvokeAsync("InsuranceCoverageAddToLedger", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        UnitID,
                        InsuranceCoverageID,
                        sPolicyNumber,
                        dStartDate}, this.InsuranceCoverageAddToLedgerOperationCompleted, userState);
        }
        
        private void OnInsuranceCoverageAddToLedgerOperationCompleted(object arg) {
            if ((this.InsuranceCoverageAddToLedgerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsuranceCoverageAddToLedgerCompleted(this, new InsuranceCoverageAddToLedgerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/LedgerProofOfInsuranceUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LedgerProofOfInsuranceUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, string sPolicyNumber, string sDescription, decimal dcCoverageLevel, System.DateTime dStartDate, System.DateTime dEndDate, bool bCancel) {
            object[] results = this.Invoke("LedgerProofOfInsuranceUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        sPolicyNumber,
                        sDescription,
                        dcCoverageLevel,
                        dStartDate,
                        dEndDate,
                        bCancel});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LedgerProofOfInsuranceUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, string sPolicyNumber, string sDescription, decimal dcCoverageLevel, System.DateTime dStartDate, System.DateTime dEndDate, bool bCancel) {
            this.LedgerProofOfInsuranceUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, sPolicyNumber, sDescription, dcCoverageLevel, dStartDate, dEndDate, bCancel, null);
        }
        
        /// <remarks/>
        public void LedgerProofOfInsuranceUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, string sPolicyNumber, string sDescription, decimal dcCoverageLevel, System.DateTime dStartDate, System.DateTime dEndDate, bool bCancel, object userState) {
            if ((this.LedgerProofOfInsuranceUpdateOperationCompleted == null)) {
                this.LedgerProofOfInsuranceUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLedgerProofOfInsuranceUpdateOperationCompleted);
            }
            this.InvokeAsync("LedgerProofOfInsuranceUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        sPolicyNumber,
                        sDescription,
                        dcCoverageLevel,
                        dStartDate,
                        dEndDate,
                        bCancel}, this.LedgerProofOfInsuranceUpdateOperationCompleted, userState);
        }
        
        private void OnLedgerProofOfInsuranceUpdateOperationCompleted(object arg) {
            if ((this.LedgerProofOfInsuranceUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LedgerProofOfInsuranceUpdateCompleted(this, new LedgerProofOfInsuranceUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/EmployeeLogin", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet EmployeeLogin(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sEmployeeLogin, string sEmployeePassword) {
            object[] results = this.Invoke("EmployeeLogin", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sEmployeeLogin,
                        sEmployeePassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EmployeeLoginAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sEmployeeLogin, string sEmployeePassword) {
            this.EmployeeLoginAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sEmployeeLogin, sEmployeePassword, null);
        }
        
        /// <remarks/>
        public void EmployeeLoginAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sEmployeeLogin, string sEmployeePassword, object userState) {
            if ((this.EmployeeLoginOperationCompleted == null)) {
                this.EmployeeLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeeLoginOperationCompleted);
            }
            this.InvokeAsync("EmployeeLogin", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sEmployeeLogin,
                        sEmployeePassword}, this.EmployeeLoginOperationCompleted, userState);
        }
        
        private void OnEmployeeLoginOperationCompleted(object arg) {
            if ((this.EmployeeLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeeLoginCompleted(this, new EmployeeLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/SiteSearchByPostalCode", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SiteSearchByPostalCode(string sCorpCode, string sCorpUserName, string sCorpPassword, string sPostalCode, int iCountry, bool bMiles) {
            object[] results = this.Invoke("SiteSearchByPostalCode", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sPostalCode,
                        iCountry,
                        bMiles});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SiteSearchByPostalCodeAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sPostalCode, int iCountry, bool bMiles) {
            this.SiteSearchByPostalCodeAsync(sCorpCode, sCorpUserName, sCorpPassword, sPostalCode, iCountry, bMiles, null);
        }
        
        /// <remarks/>
        public void SiteSearchByPostalCodeAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sPostalCode, int iCountry, bool bMiles, object userState) {
            if ((this.SiteSearchByPostalCodeOperationCompleted == null)) {
                this.SiteSearchByPostalCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteSearchByPostalCodeOperationCompleted);
            }
            this.InvokeAsync("SiteSearchByPostalCode", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sPostalCode,
                        iCountry,
                        bMiles}, this.SiteSearchByPostalCodeOperationCompleted, userState);
        }
        
        private void OnSiteSearchByPostalCodeOperationCompleted(object arg) {
            if ((this.SiteSearchByPostalCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteSearchByPostalCodeCompleted(this, new SiteSearchByPostalCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitTypePriceList", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitTypePriceList(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("UnitTypePriceList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitTypePriceListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.UnitTypePriceListAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void UnitTypePriceListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.UnitTypePriceListOperationCompleted == null)) {
                this.UnitTypePriceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitTypePriceListOperationCompleted);
            }
            this.InvokeAsync("UnitTypePriceList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.UnitTypePriceListOperationCompleted, userState);
        }
        
        private void OnUnitTypePriceListOperationCompleted(object arg) {
            if ((this.UnitTypePriceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitTypePriceListCompleted(this, new UnitTypePriceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitTypePriceList_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitTypePriceList_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("UnitTypePriceList_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitTypePriceList_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.UnitTypePriceList_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void UnitTypePriceList_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.UnitTypePriceList_v2OperationCompleted == null)) {
                this.UnitTypePriceList_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitTypePriceList_v2OperationCompleted);
            }
            this.InvokeAsync("UnitTypePriceList_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.UnitTypePriceList_v2OperationCompleted, userState);
        }
        
        private void OnUnitTypePriceList_v2OperationCompleted(object arg) {
            if ((this.UnitTypePriceList_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitTypePriceList_v2Completed(this, new UnitTypePriceList_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CorpUserList", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CorpUserList(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword) {
            object[] results = this.Invoke("CorpUserList", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CorpUserListAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword) {
            this.CorpUserListAsync(sCorpCode, sCorpUserName, sCorpPassword, sUsagePassword, null);
        }
        
        /// <remarks/>
        public void CorpUserListAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, object userState) {
            if ((this.CorpUserListOperationCompleted == null)) {
                this.CorpUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCorpUserListOperationCompleted);
            }
            this.InvokeAsync("CorpUserList", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword}, this.CorpUserListOperationCompleted, userState);
        }
        
        private void OnCorpUserListOperationCompleted(object arg) {
            if ((this.CorpUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CorpUserListCompleted(this, new CorpUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/EmployeeList", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet EmployeeList(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword) {
            object[] results = this.Invoke("EmployeeList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EmployeeListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword) {
            this.EmployeeListAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, null);
        }
        
        /// <remarks/>
        public void EmployeeListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, object userState) {
            if ((this.EmployeeListOperationCompleted == null)) {
                this.EmployeeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeeListOperationCompleted);
            }
            this.InvokeAsync("EmployeeList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword}, this.EmployeeListOperationCompleted, userState);
        }
        
        private void OnEmployeeListOperationCompleted(object arg) {
            if ((this.EmployeeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeeListCompleted(this, new EmployeeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CorpUserSecurityUnlock", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CorpUserSecurityUnlock(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int CorpUserID) {
            object[] results = this.Invoke("CorpUserSecurityUnlock", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        CorpUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CorpUserSecurityUnlockAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int CorpUserID) {
            this.CorpUserSecurityUnlockAsync(sCorpCode, sCorpUserName, sCorpPassword, sUsagePassword, CorpUserID, null);
        }
        
        /// <remarks/>
        public void CorpUserSecurityUnlockAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int CorpUserID, object userState) {
            if ((this.CorpUserSecurityUnlockOperationCompleted == null)) {
                this.CorpUserSecurityUnlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCorpUserSecurityUnlockOperationCompleted);
            }
            this.InvokeAsync("CorpUserSecurityUnlock", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        CorpUserID}, this.CorpUserSecurityUnlockOperationCompleted, userState);
        }
        
        private void OnCorpUserSecurityUnlockOperationCompleted(object arg) {
            if ((this.CorpUserSecurityUnlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CorpUserSecurityUnlockCompleted(this, new CorpUserSecurityUnlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/EmployeeSecurityUnlock", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet EmployeeSecurityUnlock(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int EmployeeID) {
            object[] results = this.Invoke("EmployeeSecurityUnlock", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        EmployeeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EmployeeSecurityUnlockAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int EmployeeID) {
            this.EmployeeSecurityUnlockAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, EmployeeID, null);
        }
        
        /// <remarks/>
        public void EmployeeSecurityUnlockAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int EmployeeID, object userState) {
            if ((this.EmployeeSecurityUnlockOperationCompleted == null)) {
                this.EmployeeSecurityUnlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeeSecurityUnlockOperationCompleted);
            }
            this.InvokeAsync("EmployeeSecurityUnlock", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        EmployeeID}, this.EmployeeSecurityUnlockOperationCompleted, userState);
        }
        
        private void OnEmployeeSecurityUnlockOperationCompleted(object arg) {
            if ((this.EmployeeSecurityUnlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeeSecurityUnlockCompleted(this, new EmployeeSecurityUnlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CorpUserDisable", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CorpUserDisable(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int CorpUserID) {
            object[] results = this.Invoke("CorpUserDisable", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        CorpUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CorpUserDisableAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int CorpUserID) {
            this.CorpUserDisableAsync(sCorpCode, sCorpUserName, sCorpPassword, sUsagePassword, CorpUserID, null);
        }
        
        /// <remarks/>
        public void CorpUserDisableAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int CorpUserID, object userState) {
            if ((this.CorpUserDisableOperationCompleted == null)) {
                this.CorpUserDisableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCorpUserDisableOperationCompleted);
            }
            this.InvokeAsync("CorpUserDisable", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        CorpUserID}, this.CorpUserDisableOperationCompleted, userState);
        }
        
        private void OnCorpUserDisableOperationCompleted(object arg) {
            if ((this.CorpUserDisableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CorpUserDisableCompleted(this, new CorpUserDisableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/EmployeeDisable", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet EmployeeDisable(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int EmployeeID) {
            object[] results = this.Invoke("EmployeeDisable", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        EmployeeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EmployeeDisableAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int EmployeeID) {
            this.EmployeeDisableAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, EmployeeID, null);
        }
        
        /// <remarks/>
        public void EmployeeDisableAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int EmployeeID, object userState) {
            if ((this.EmployeeDisableOperationCompleted == null)) {
                this.EmployeeDisableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeeDisableOperationCompleted);
            }
            this.InvokeAsync("EmployeeDisable", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        EmployeeID}, this.EmployeeDisableOperationCompleted, userState);
        }
        
        private void OnEmployeeDisableOperationCompleted(object arg) {
            if ((this.EmployeeDisableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeeDisableCompleted(this, new EmployeeDisableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CorpUserPasswordReset", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CorpUserPasswordReset(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int CorpUserID, int iDisableReset, int iSecurityLockoutReset, string sNewPassword, int iForcePasswordChange) {
            object[] results = this.Invoke("CorpUserPasswordReset", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        CorpUserID,
                        iDisableReset,
                        iSecurityLockoutReset,
                        sNewPassword,
                        iForcePasswordChange});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CorpUserPasswordResetAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int CorpUserID, int iDisableReset, int iSecurityLockoutReset, string sNewPassword, int iForcePasswordChange) {
            this.CorpUserPasswordResetAsync(sCorpCode, sCorpUserName, sCorpPassword, sUsagePassword, CorpUserID, iDisableReset, iSecurityLockoutReset, sNewPassword, iForcePasswordChange, null);
        }
        
        /// <remarks/>
        public void CorpUserPasswordResetAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int CorpUserID, int iDisableReset, int iSecurityLockoutReset, string sNewPassword, int iForcePasswordChange, object userState) {
            if ((this.CorpUserPasswordResetOperationCompleted == null)) {
                this.CorpUserPasswordResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCorpUserPasswordResetOperationCompleted);
            }
            this.InvokeAsync("CorpUserPasswordReset", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        CorpUserID,
                        iDisableReset,
                        iSecurityLockoutReset,
                        sNewPassword,
                        iForcePasswordChange}, this.CorpUserPasswordResetOperationCompleted, userState);
        }
        
        private void OnCorpUserPasswordResetOperationCompleted(object arg) {
            if ((this.CorpUserPasswordResetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CorpUserPasswordResetCompleted(this, new CorpUserPasswordResetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/EmployeePasswordReset", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet EmployeePasswordReset(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int EmployeeID, int iDisableReset, int iSecurityLockoutReset, string sNewPassword, int iForcePasswordChange) {
            object[] results = this.Invoke("EmployeePasswordReset", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        EmployeeID,
                        iDisableReset,
                        iSecurityLockoutReset,
                        sNewPassword,
                        iForcePasswordChange});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EmployeePasswordResetAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int EmployeeID, int iDisableReset, int iSecurityLockoutReset, string sNewPassword, int iForcePasswordChange) {
            this.EmployeePasswordResetAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, EmployeeID, iDisableReset, iSecurityLockoutReset, sNewPassword, iForcePasswordChange, null);
        }
        
        /// <remarks/>
        public void EmployeePasswordResetAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int EmployeeID, int iDisableReset, int iSecurityLockoutReset, string sNewPassword, int iForcePasswordChange, object userState) {
            if ((this.EmployeePasswordResetOperationCompleted == null)) {
                this.EmployeePasswordResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeePasswordResetOperationCompleted);
            }
            this.InvokeAsync("EmployeePasswordReset", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        EmployeeID,
                        iDisableReset,
                        iSecurityLockoutReset,
                        sNewPassword,
                        iForcePasswordChange}, this.EmployeePasswordResetOperationCompleted, userState);
        }
        
        private void OnEmployeePasswordResetOperationCompleted(object arg) {
            if ((this.EmployeePasswordResetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeePasswordResetCompleted(this, new EmployeePasswordResetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitStandardRateUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitStandardRateUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcStdRate) {
            object[] results = this.Invoke("UnitStandardRateUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        sUnitIDsCommaDelimited,
                        dcStdRate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitStandardRateUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcStdRate) {
            this.UnitStandardRateUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, sUnitIDsCommaDelimited, dcStdRate, null);
        }
        
        /// <remarks/>
        public void UnitStandardRateUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcStdRate, object userState) {
            if ((this.UnitStandardRateUpdateOperationCompleted == null)) {
                this.UnitStandardRateUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitStandardRateUpdateOperationCompleted);
            }
            this.InvokeAsync("UnitStandardRateUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        sUnitIDsCommaDelimited,
                        dcStdRate}, this.UnitStandardRateUpdateOperationCompleted, userState);
        }
        
        private void OnUnitStandardRateUpdateOperationCompleted(object arg) {
            if ((this.UnitStandardRateUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitStandardRateUpdateCompleted(this, new UnitStandardRateUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitPushRateUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitPushRateUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcPushRate) {
            object[] results = this.Invoke("UnitPushRateUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        sUnitIDsCommaDelimited,
                        dcPushRate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitPushRateUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcPushRate) {
            this.UnitPushRateUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, sUnitIDsCommaDelimited, dcPushRate, null);
        }
        
        /// <remarks/>
        public void UnitPushRateUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcPushRate, object userState) {
            if ((this.UnitPushRateUpdateOperationCompleted == null)) {
                this.UnitPushRateUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitPushRateUpdateOperationCompleted);
            }
            this.InvokeAsync("UnitPushRateUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        sUnitIDsCommaDelimited,
                        dcPushRate}, this.UnitPushRateUpdateOperationCompleted, userState);
        }
        
        private void OnUnitPushRateUpdateOperationCompleted(object arg) {
            if ((this.UnitPushRateUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitPushRateUpdateCompleted(this, new UnitPushRateUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitStandardRateUpdate_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitStandardRateUpdate_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcStdRate, int iRatesTaxInclusive) {
            object[] results = this.Invoke("UnitStandardRateUpdate_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        sUnitIDsCommaDelimited,
                        dcStdRate,
                        iRatesTaxInclusive});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitStandardRateUpdate_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcStdRate, int iRatesTaxInclusive) {
            this.UnitStandardRateUpdate_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, sUnitIDsCommaDelimited, dcStdRate, iRatesTaxInclusive, null);
        }
        
        /// <remarks/>
        public void UnitStandardRateUpdate_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcStdRate, int iRatesTaxInclusive, object userState) {
            if ((this.UnitStandardRateUpdate_v2OperationCompleted == null)) {
                this.UnitStandardRateUpdate_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitStandardRateUpdate_v2OperationCompleted);
            }
            this.InvokeAsync("UnitStandardRateUpdate_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        sUnitIDsCommaDelimited,
                        dcStdRate,
                        iRatesTaxInclusive}, this.UnitStandardRateUpdate_v2OperationCompleted, userState);
        }
        
        private void OnUnitStandardRateUpdate_v2OperationCompleted(object arg) {
            if ((this.UnitStandardRateUpdate_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitStandardRateUpdate_v2Completed(this, new UnitStandardRateUpdate_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitStandardRateUpdate_v3", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitStandardRateUpdate_v3(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcStdMonthlyRate, decimal dcStdWeeklyRate, int iRatesTaxInclusive) {
            object[] results = this.Invoke("UnitStandardRateUpdate_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        sUnitIDsCommaDelimited,
                        dcStdMonthlyRate,
                        dcStdWeeklyRate,
                        iRatesTaxInclusive});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitStandardRateUpdate_v3Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcStdMonthlyRate, decimal dcStdWeeklyRate, int iRatesTaxInclusive) {
            this.UnitStandardRateUpdate_v3Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, sUnitIDsCommaDelimited, dcStdMonthlyRate, dcStdWeeklyRate, iRatesTaxInclusive, null);
        }
        
        /// <remarks/>
        public void UnitStandardRateUpdate_v3Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcStdMonthlyRate, decimal dcStdWeeklyRate, int iRatesTaxInclusive, object userState) {
            if ((this.UnitStandardRateUpdate_v3OperationCompleted == null)) {
                this.UnitStandardRateUpdate_v3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitStandardRateUpdate_v3OperationCompleted);
            }
            this.InvokeAsync("UnitStandardRateUpdate_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        sUnitIDsCommaDelimited,
                        dcStdMonthlyRate,
                        dcStdWeeklyRate,
                        iRatesTaxInclusive}, this.UnitStandardRateUpdate_v3OperationCompleted, userState);
        }
        
        private void OnUnitStandardRateUpdate_v3OperationCompleted(object arg) {
            if ((this.UnitStandardRateUpdate_v3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitStandardRateUpdate_v3Completed(this, new UnitStandardRateUpdate_v3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitPushRateUpdate_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitPushRateUpdate_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcPushRate, int iRatesTaxInclusive) {
            object[] results = this.Invoke("UnitPushRateUpdate_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        sUnitIDsCommaDelimited,
                        dcPushRate,
                        iRatesTaxInclusive});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitPushRateUpdate_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcPushRate, int iRatesTaxInclusive) {
            this.UnitPushRateUpdate_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, sUnitIDsCommaDelimited, dcPushRate, iRatesTaxInclusive, null);
        }
        
        /// <remarks/>
        public void UnitPushRateUpdate_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, string sUnitIDsCommaDelimited, decimal dcPushRate, int iRatesTaxInclusive, object userState) {
            if ((this.UnitPushRateUpdate_v2OperationCompleted == null)) {
                this.UnitPushRateUpdate_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitPushRateUpdate_v2OperationCompleted);
            }
            this.InvokeAsync("UnitPushRateUpdate_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        sUnitIDsCommaDelimited,
                        dcPushRate,
                        iRatesTaxInclusive}, this.UnitPushRateUpdate_v2OperationCompleted, userState);
        }
        
        private void OnUnitPushRateUpdate_v2OperationCompleted(object arg) {
            if ((this.UnitPushRateUpdate_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitPushRateUpdate_v2Completed(this, new UnitPushRateUpdate_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/NationalMasterAccountsRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet NationalMasterAccountsRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sAccountName, string sAccountNum) {
            object[] results = this.Invoke("NationalMasterAccountsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sAccountName,
                        sAccountNum});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void NationalMasterAccountsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sAccountName, string sAccountNum) {
            this.NationalMasterAccountsRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sAccountName, sAccountNum, null);
        }
        
        /// <remarks/>
        public void NationalMasterAccountsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sAccountName, string sAccountNum, object userState) {
            if ((this.NationalMasterAccountsRetrieveOperationCompleted == null)) {
                this.NationalMasterAccountsRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNationalMasterAccountsRetrieveOperationCompleted);
            }
            this.InvokeAsync("NationalMasterAccountsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sAccountName,
                        sAccountNum}, this.NationalMasterAccountsRetrieveOperationCompleted, userState);
        }
        
        private void OnNationalMasterAccountsRetrieveOperationCompleted(object arg) {
            if ((this.NationalMasterAccountsRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NationalMasterAccountsRetrieveCompleted(this, new NationalMasterAccountsRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CCProcessorSiteCurrentType", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CCProcessorSiteCurrentType(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("CCProcessorSiteCurrentType", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CCProcessorSiteCurrentTypeAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.CCProcessorSiteCurrentTypeAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void CCProcessorSiteCurrentTypeAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.CCProcessorSiteCurrentTypeOperationCompleted == null)) {
                this.CCProcessorSiteCurrentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCCProcessorSiteCurrentTypeOperationCompleted);
            }
            this.InvokeAsync("CCProcessorSiteCurrentType", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.CCProcessorSiteCurrentTypeOperationCompleted, userState);
        }
        
        private void OnCCProcessorSiteCurrentTypeOperationCompleted(object arg) {
            if ((this.CCProcessorSiteCurrentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CCProcessorSiteCurrentTypeCompleted(this, new CCProcessorSiteCurrentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ACHProcessorSiteCurrentType", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ACHProcessorSiteCurrentType(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("ACHProcessorSiteCurrentType", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ACHProcessorSiteCurrentTypeAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.ACHProcessorSiteCurrentTypeAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void ACHProcessorSiteCurrentTypeAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.ACHProcessorSiteCurrentTypeOperationCompleted == null)) {
                this.ACHProcessorSiteCurrentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHProcessorSiteCurrentTypeOperationCompleted);
            }
            this.InvokeAsync("ACHProcessorSiteCurrentType", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.ACHProcessorSiteCurrentTypeOperationCompleted, userState);
        }
        
        private void OnACHProcessorSiteCurrentTypeOperationCompleted(object arg) {
            if ((this.ACHProcessorSiteCurrentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHProcessorSiteCurrentTypeCompleted(this, new ACHProcessorSiteCurrentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationBillingInfoUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationBillingInfoUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iWaitingID, int iCreditCardTypeID, string sCreditCardNum, System.DateTime dCredtiCardExpir, string sCreditCardHolderName, string sCreditCardStreet, string sCreditCardZip) {
            object[] results = this.Invoke("ReservationBillingInfoUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iWaitingID,
                        iCreditCardTypeID,
                        sCreditCardNum,
                        dCredtiCardExpir,
                        sCreditCardHolderName,
                        sCreditCardStreet,
                        sCreditCardZip});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationBillingInfoUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iWaitingID, int iCreditCardTypeID, string sCreditCardNum, System.DateTime dCredtiCardExpir, string sCreditCardHolderName, string sCreditCardStreet, string sCreditCardZip) {
            this.ReservationBillingInfoUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iWaitingID, iCreditCardTypeID, sCreditCardNum, dCredtiCardExpir, sCreditCardHolderName, sCreditCardStreet, sCreditCardZip, null);
        }
        
        /// <remarks/>
        public void ReservationBillingInfoUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iWaitingID, int iCreditCardTypeID, string sCreditCardNum, System.DateTime dCredtiCardExpir, string sCreditCardHolderName, string sCreditCardStreet, string sCreditCardZip, object userState) {
            if ((this.ReservationBillingInfoUpdateOperationCompleted == null)) {
                this.ReservationBillingInfoUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationBillingInfoUpdateOperationCompleted);
            }
            this.InvokeAsync("ReservationBillingInfoUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iWaitingID,
                        iCreditCardTypeID,
                        sCreditCardNum,
                        dCredtiCardExpir,
                        sCreditCardHolderName,
                        sCreditCardStreet,
                        sCreditCardZip}, this.ReservationBillingInfoUpdateOperationCompleted, userState);
        }
        
        private void OnReservationBillingInfoUpdateOperationCompleted(object arg) {
            if ((this.ReservationBillingInfoUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationBillingInfoUpdateCompleted(this, new ReservationBillingInfoUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationBillingInfoByTenantID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationBillingInfoByTenantID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID) {
            object[] results = this.Invoke("ReservationBillingInfoByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationBillingInfoByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID) {
            this.ReservationBillingInfoByTenantIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, null);
        }
        
        /// <remarks/>
        public void ReservationBillingInfoByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, object userState) {
            if ((this.ReservationBillingInfoByTenantIDOperationCompleted == null)) {
                this.ReservationBillingInfoByTenantIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationBillingInfoByTenantIDOperationCompleted);
            }
            this.InvokeAsync("ReservationBillingInfoByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID}, this.ReservationBillingInfoByTenantIDOperationCompleted, userState);
        }
        
        private void OnReservationBillingInfoByTenantIDOperationCompleted(object arg) {
            if ((this.ReservationBillingInfoByTenantIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationBillingInfoByTenantIDCompleted(this, new ReservationBillingInfoByTenantIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ScheduleMoveOut", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ScheduleMoveOut(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, System.DateTime dScheduledOut) {
            object[] results = this.Invoke("ScheduleMoveOut", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        dScheduledOut});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ScheduleMoveOutAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, System.DateTime dScheduledOut) {
            this.ScheduleMoveOutAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iLedgerID, dScheduledOut, null);
        }
        
        /// <remarks/>
        public void ScheduleMoveOutAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, System.DateTime dScheduledOut, object userState) {
            if ((this.ScheduleMoveOutOperationCompleted == null)) {
                this.ScheduleMoveOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScheduleMoveOutOperationCompleted);
            }
            this.InvokeAsync("ScheduleMoveOut", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        dScheduledOut}, this.ScheduleMoveOutOperationCompleted, userState);
        }
        
        private void OnScheduleMoveOutOperationCompleted(object arg) {
            if ((this.ScheduleMoveOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScheduleMoveOutCompleted(this, new ScheduleMoveOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PhoneIntegrationPushCallInformation", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PhoneIntegrationPushCallInformation(string sCorpCode, string sLocationCode, string sUsagePassword, int iCallTrackingProvider, string sIdentifier, string sCallData) {
            object[] results = this.Invoke("PhoneIntegrationPushCallInformation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sUsagePassword,
                        iCallTrackingProvider,
                        sIdentifier,
                        sCallData});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PhoneIntegrationPushCallInformationAsync(string sCorpCode, string sLocationCode, string sUsagePassword, int iCallTrackingProvider, string sIdentifier, string sCallData) {
            this.PhoneIntegrationPushCallInformationAsync(sCorpCode, sLocationCode, sUsagePassword, iCallTrackingProvider, sIdentifier, sCallData, null);
        }
        
        /// <remarks/>
        public void PhoneIntegrationPushCallInformationAsync(string sCorpCode, string sLocationCode, string sUsagePassword, int iCallTrackingProvider, string sIdentifier, string sCallData, object userState) {
            if ((this.PhoneIntegrationPushCallInformationOperationCompleted == null)) {
                this.PhoneIntegrationPushCallInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPhoneIntegrationPushCallInformationOperationCompleted);
            }
            this.InvokeAsync("PhoneIntegrationPushCallInformation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sUsagePassword,
                        iCallTrackingProvider,
                        sIdentifier,
                        sCallData}, this.PhoneIntegrationPushCallInformationOperationCompleted, userState);
        }
        
        private void OnPhoneIntegrationPushCallInformationOperationCompleted(object arg) {
            if ((this.PhoneIntegrationPushCallInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PhoneIntegrationPushCallInformationCompleted(this, new PhoneIntegrationPushCallInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CompetitorTrackingList", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CompetitorTrackingList(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("CompetitorTrackingList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitorTrackingListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.CompetitorTrackingListAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void CompetitorTrackingListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.CompetitorTrackingListOperationCompleted == null)) {
                this.CompetitorTrackingListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitorTrackingListOperationCompleted);
            }
            this.InvokeAsync("CompetitorTrackingList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.CompetitorTrackingListOperationCompleted, userState);
        }
        
        private void OnCompetitorTrackingListOperationCompleted(object arg) {
            if ((this.CompetitorTrackingListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitorTrackingListCompleted(this, new CompetitorTrackingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CompetitorTrackingAdd", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CompetitorTrackingAdd(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iCompetitorID, decimal dcArea, decimal dcRate, int iFloor, bool bPower, bool bRVParking, bool bClimate, int iCustAccess, string sComment) {
            object[] results = this.Invoke("CompetitorTrackingAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iCompetitorID,
                        dcArea,
                        dcRate,
                        iFloor,
                        bPower,
                        bRVParking,
                        bClimate,
                        iCustAccess,
                        sComment});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitorTrackingAddAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iCompetitorID, decimal dcArea, decimal dcRate, int iFloor, bool bPower, bool bRVParking, bool bClimate, int iCustAccess, string sComment) {
            this.CompetitorTrackingAddAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iCompetitorID, dcArea, dcRate, iFloor, bPower, bRVParking, bClimate, iCustAccess, sComment, null);
        }
        
        /// <remarks/>
        public void CompetitorTrackingAddAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iCompetitorID, decimal dcArea, decimal dcRate, int iFloor, bool bPower, bool bRVParking, bool bClimate, int iCustAccess, string sComment, object userState) {
            if ((this.CompetitorTrackingAddOperationCompleted == null)) {
                this.CompetitorTrackingAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitorTrackingAddOperationCompleted);
            }
            this.InvokeAsync("CompetitorTrackingAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iCompetitorID,
                        dcArea,
                        dcRate,
                        iFloor,
                        bPower,
                        bRVParking,
                        bClimate,
                        iCustAccess,
                        sComment}, this.CompetitorTrackingAddOperationCompleted, userState);
        }
        
        private void OnCompetitorTrackingAddOperationCompleted(object arg) {
            if ((this.CompetitorTrackingAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitorTrackingAddCompleted(this, new CompetitorTrackingAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CompetitorTrackingUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CompetitorTrackingUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iCompetitorRateID, decimal dcArea, decimal dcRate, int iFloor, bool bPower, bool bRVParking, bool bClimate, int iCustAccess, string sComment) {
            object[] results = this.Invoke("CompetitorTrackingUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iCompetitorRateID,
                        dcArea,
                        dcRate,
                        iFloor,
                        bPower,
                        bRVParking,
                        bClimate,
                        iCustAccess,
                        sComment});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitorTrackingUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iCompetitorRateID, decimal dcArea, decimal dcRate, int iFloor, bool bPower, bool bRVParking, bool bClimate, int iCustAccess, string sComment) {
            this.CompetitorTrackingUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iCompetitorRateID, dcArea, dcRate, iFloor, bPower, bRVParking, bClimate, iCustAccess, sComment, null);
        }
        
        /// <remarks/>
        public void CompetitorTrackingUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iCompetitorRateID, decimal dcArea, decimal dcRate, int iFloor, bool bPower, bool bRVParking, bool bClimate, int iCustAccess, string sComment, object userState) {
            if ((this.CompetitorTrackingUpdateOperationCompleted == null)) {
                this.CompetitorTrackingUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitorTrackingUpdateOperationCompleted);
            }
            this.InvokeAsync("CompetitorTrackingUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iCompetitorRateID,
                        dcArea,
                        dcRate,
                        iFloor,
                        bPower,
                        bRVParking,
                        bClimate,
                        iCustAccess,
                        sComment}, this.CompetitorTrackingUpdateOperationCompleted, userState);
        }
        
        private void OnCompetitorTrackingUpdateOperationCompleted(object arg) {
            if ((this.CompetitorTrackingUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitorTrackingUpdateCompleted(this, new CompetitorTrackingUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CompetitorAdd", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CompetitorAdd(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sName, 
                    string sAddress1, 
                    string sAddress2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sWebSiteURL, 
                    decimal dcLongitude, 
                    decimal dcLatitude, 
                    decimal dcDistanceMiles, 
                    decimal dcRateScaleFactor, 
                    int iTotalUnits, 
                    int iTotalArea, 
                    decimal dcAdminFee, 
                    bool bResidentManager, 
                    bool bFence, 
                    bool bClimateControl, 
                    bool bMerchandise, 
                    bool bInsuranceOffered, 
                    bool bInsuranceRequired, 
                    bool bAdminFeeRequired, 
                    bool bSecDepRequired, 
                    string sComment) {
            object[] results = this.Invoke("CompetitorAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sName,
                        sAddress1,
                        sAddress2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sWebSiteURL,
                        dcLongitude,
                        dcLatitude,
                        dcDistanceMiles,
                        dcRateScaleFactor,
                        iTotalUnits,
                        iTotalArea,
                        dcAdminFee,
                        bResidentManager,
                        bFence,
                        bClimateControl,
                        bMerchandise,
                        bInsuranceOffered,
                        bInsuranceRequired,
                        bAdminFeeRequired,
                        bSecDepRequired,
                        sComment});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitorAddAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sName, 
                    string sAddress1, 
                    string sAddress2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sWebSiteURL, 
                    decimal dcLongitude, 
                    decimal dcLatitude, 
                    decimal dcDistanceMiles, 
                    decimal dcRateScaleFactor, 
                    int iTotalUnits, 
                    int iTotalArea, 
                    decimal dcAdminFee, 
                    bool bResidentManager, 
                    bool bFence, 
                    bool bClimateControl, 
                    bool bMerchandise, 
                    bool bInsuranceOffered, 
                    bool bInsuranceRequired, 
                    bool bAdminFeeRequired, 
                    bool bSecDepRequired, 
                    string sComment) {
            this.CompetitorAddAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sName, sAddress1, sAddress2, sCity, sRegion, sPostalCode, sCountry, sPhone, sWebSiteURL, dcLongitude, dcLatitude, dcDistanceMiles, dcRateScaleFactor, iTotalUnits, iTotalArea, dcAdminFee, bResidentManager, bFence, bClimateControl, bMerchandise, bInsuranceOffered, bInsuranceRequired, bAdminFeeRequired, bSecDepRequired, sComment, null);
        }
        
        /// <remarks/>
        public void CompetitorAddAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sName, 
                    string sAddress1, 
                    string sAddress2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sWebSiteURL, 
                    decimal dcLongitude, 
                    decimal dcLatitude, 
                    decimal dcDistanceMiles, 
                    decimal dcRateScaleFactor, 
                    int iTotalUnits, 
                    int iTotalArea, 
                    decimal dcAdminFee, 
                    bool bResidentManager, 
                    bool bFence, 
                    bool bClimateControl, 
                    bool bMerchandise, 
                    bool bInsuranceOffered, 
                    bool bInsuranceRequired, 
                    bool bAdminFeeRequired, 
                    bool bSecDepRequired, 
                    string sComment, 
                    object userState) {
            if ((this.CompetitorAddOperationCompleted == null)) {
                this.CompetitorAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitorAddOperationCompleted);
            }
            this.InvokeAsync("CompetitorAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sName,
                        sAddress1,
                        sAddress2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sWebSiteURL,
                        dcLongitude,
                        dcLatitude,
                        dcDistanceMiles,
                        dcRateScaleFactor,
                        iTotalUnits,
                        iTotalArea,
                        dcAdminFee,
                        bResidentManager,
                        bFence,
                        bClimateControl,
                        bMerchandise,
                        bInsuranceOffered,
                        bInsuranceRequired,
                        bAdminFeeRequired,
                        bSecDepRequired,
                        sComment}, this.CompetitorAddOperationCompleted, userState);
        }
        
        private void OnCompetitorAddOperationCompleted(object arg) {
            if ((this.CompetitorAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitorAddCompleted(this, new CompetitorAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CompetitorUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CompetitorUpdate(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int CompetitorID, 
                    string sName, 
                    string sAddress1, 
                    string sAddress2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sWebSiteURL, 
                    decimal dcLongitude, 
                    decimal dcLatitude, 
                    decimal dcDistanceMiles, 
                    decimal dcRateScaleFactor, 
                    int iTotalUnits, 
                    int iTotalArea, 
                    decimal dcAdminFee, 
                    bool bResidentManager, 
                    bool bFence, 
                    bool bClimateControl, 
                    bool bMerchandise, 
                    bool bInsuranceOffered, 
                    bool bInsuranceRequired, 
                    bool bAdminFeeRequired, 
                    bool bSecDepRequired, 
                    string sComment) {
            object[] results = this.Invoke("CompetitorUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        CompetitorID,
                        sName,
                        sAddress1,
                        sAddress2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sWebSiteURL,
                        dcLongitude,
                        dcLatitude,
                        dcDistanceMiles,
                        dcRateScaleFactor,
                        iTotalUnits,
                        iTotalArea,
                        dcAdminFee,
                        bResidentManager,
                        bFence,
                        bClimateControl,
                        bMerchandise,
                        bInsuranceOffered,
                        bInsuranceRequired,
                        bAdminFeeRequired,
                        bSecDepRequired,
                        sComment});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CompetitorUpdateAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int CompetitorID, 
                    string sName, 
                    string sAddress1, 
                    string sAddress2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sWebSiteURL, 
                    decimal dcLongitude, 
                    decimal dcLatitude, 
                    decimal dcDistanceMiles, 
                    decimal dcRateScaleFactor, 
                    int iTotalUnits, 
                    int iTotalArea, 
                    decimal dcAdminFee, 
                    bool bResidentManager, 
                    bool bFence, 
                    bool bClimateControl, 
                    bool bMerchandise, 
                    bool bInsuranceOffered, 
                    bool bInsuranceRequired, 
                    bool bAdminFeeRequired, 
                    bool bSecDepRequired, 
                    string sComment) {
            this.CompetitorUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, CompetitorID, sName, sAddress1, sAddress2, sCity, sRegion, sPostalCode, sCountry, sPhone, sWebSiteURL, dcLongitude, dcLatitude, dcDistanceMiles, dcRateScaleFactor, iTotalUnits, iTotalArea, dcAdminFee, bResidentManager, bFence, bClimateControl, bMerchandise, bInsuranceOffered, bInsuranceRequired, bAdminFeeRequired, bSecDepRequired, sComment, null);
        }
        
        /// <remarks/>
        public void CompetitorUpdateAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int CompetitorID, 
                    string sName, 
                    string sAddress1, 
                    string sAddress2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sWebSiteURL, 
                    decimal dcLongitude, 
                    decimal dcLatitude, 
                    decimal dcDistanceMiles, 
                    decimal dcRateScaleFactor, 
                    int iTotalUnits, 
                    int iTotalArea, 
                    decimal dcAdminFee, 
                    bool bResidentManager, 
                    bool bFence, 
                    bool bClimateControl, 
                    bool bMerchandise, 
                    bool bInsuranceOffered, 
                    bool bInsuranceRequired, 
                    bool bAdminFeeRequired, 
                    bool bSecDepRequired, 
                    string sComment, 
                    object userState) {
            if ((this.CompetitorUpdateOperationCompleted == null)) {
                this.CompetitorUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompetitorUpdateOperationCompleted);
            }
            this.InvokeAsync("CompetitorUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        CompetitorID,
                        sName,
                        sAddress1,
                        sAddress2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sWebSiteURL,
                        dcLongitude,
                        dcLatitude,
                        dcDistanceMiles,
                        dcRateScaleFactor,
                        iTotalUnits,
                        iTotalArea,
                        dcAdminFee,
                        bResidentManager,
                        bFence,
                        bClimateControl,
                        bMerchandise,
                        bInsuranceOffered,
                        bInsuranceRequired,
                        bAdminFeeRequired,
                        bSecDepRequired,
                        sComment}, this.CompetitorUpdateOperationCompleted, userState);
        }
        
        private void OnCompetitorUpdateOperationCompleted(object arg) {
            if ((this.CompetitorUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompetitorUpdateCompleted(this, new CompetitorUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/KeypadZonesRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet KeypadZonesRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("KeypadZonesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void KeypadZonesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.KeypadZonesRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void KeypadZonesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.KeypadZonesRetrieveOperationCompleted == null)) {
                this.KeypadZonesRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeypadZonesRetrieveOperationCompleted);
            }
            this.InvokeAsync("KeypadZonesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.KeypadZonesRetrieveOperationCompleted, userState);
        }
        
        private void OnKeypadZonesRetrieveOperationCompleted(object arg) {
            if ((this.KeypadZonesRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeypadZonesRetrieveCompleted(this, new KeypadZonesRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TimeZonesRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TimeZonesRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("TimeZonesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TimeZonesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.TimeZonesRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void TimeZonesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.TimeZonesRetrieveOperationCompleted == null)) {
                this.TimeZonesRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTimeZonesRetrieveOperationCompleted);
            }
            this.InvokeAsync("TimeZonesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.TimeZonesRetrieveOperationCompleted, userState);
        }
        
        private void OnTimeZonesRetrieveOperationCompleted(object arg) {
            if ((this.TimeZonesRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TimeZonesRetrieveCompleted(this, new TimeZonesRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ScheduleTenantRateChange", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ScheduleTenantRateChange(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, decimal dcNewRate, System.DateTime dScheduledChange) {
            object[] results = this.Invoke("ScheduleTenantRateChange", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        dcNewRate,
                        dScheduledChange});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ScheduleTenantRateChangeAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, decimal dcNewRate, System.DateTime dScheduledChange) {
            this.ScheduleTenantRateChangeAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, dcNewRate, dScheduledChange, null);
        }
        
        /// <remarks/>
        public void ScheduleTenantRateChangeAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, decimal dcNewRate, System.DateTime dScheduledChange, object userState) {
            if ((this.ScheduleTenantRateChangeOperationCompleted == null)) {
                this.ScheduleTenantRateChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScheduleTenantRateChangeOperationCompleted);
            }
            this.InvokeAsync("ScheduleTenantRateChange", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        dcNewRate,
                        dScheduledChange}, this.ScheduleTenantRateChangeOperationCompleted, userState);
        }
        
        private void OnScheduleTenantRateChangeOperationCompleted(object arg) {
            if ((this.ScheduleTenantRateChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScheduleTenantRateChangeCompleted(this, new ScheduleTenantRateChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ScheduleTenantRateChange_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ScheduleTenantRateChange_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, decimal dcNewRate, System.DateTime dScheduledChange, int iRatesTaxInclusive) {
            object[] results = this.Invoke("ScheduleTenantRateChange_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        dcNewRate,
                        dScheduledChange,
                        iRatesTaxInclusive});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ScheduleTenantRateChange_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, decimal dcNewRate, System.DateTime dScheduledChange, int iRatesTaxInclusive) {
            this.ScheduleTenantRateChange_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, dcNewRate, dScheduledChange, iRatesTaxInclusive, null);
        }
        
        /// <remarks/>
        public void ScheduleTenantRateChange_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, decimal dcNewRate, System.DateTime dScheduledChange, int iRatesTaxInclusive, object userState) {
            if ((this.ScheduleTenantRateChange_v2OperationCompleted == null)) {
                this.ScheduleTenantRateChange_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnScheduleTenantRateChange_v2OperationCompleted);
            }
            this.InvokeAsync("ScheduleTenantRateChange_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        dcNewRate,
                        dScheduledChange,
                        iRatesTaxInclusive}, this.ScheduleTenantRateChange_v2OperationCompleted, userState);
        }
        
        private void OnScheduleTenantRateChange_v2OperationCompleted(object arg) {
            if ((this.ScheduleTenantRateChange_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScheduleTenantRateChange_v2Completed(this, new ScheduleTenantRateChange_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PostalCodeOwnerMarketsList", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PostalCodeOwnerMarketsList(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("PostalCodeOwnerMarketsList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PostalCodeOwnerMarketsListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.PostalCodeOwnerMarketsListAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void PostalCodeOwnerMarketsListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.PostalCodeOwnerMarketsListOperationCompleted == null)) {
                this.PostalCodeOwnerMarketsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostalCodeOwnerMarketsListOperationCompleted);
            }
            this.InvokeAsync("PostalCodeOwnerMarketsList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.PostalCodeOwnerMarketsListOperationCompleted, userState);
        }
        
        private void OnPostalCodeOwnerMarketsListOperationCompleted(object arg) {
            if ((this.PostalCodeOwnerMarketsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostalCodeOwnerMarketsListCompleted(this, new PostalCodeOwnerMarketsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CallStoredProcedure", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CallStoredProcedure(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int QRID, string procName) {
            object[] results = this.Invoke("CallStoredProcedure", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        QRID,
                        procName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CallStoredProcedureAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int QRID, string procName) {
            this.CallStoredProcedureAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, QRID, procName, null);
        }
        
        /// <remarks/>
        public void CallStoredProcedureAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int QRID, string procName, object userState) {
            if ((this.CallStoredProcedureOperationCompleted == null)) {
                this.CallStoredProcedureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallStoredProcedureOperationCompleted);
            }
            this.InvokeAsync("CallStoredProcedure", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        QRID,
                        procName}, this.CallStoredProcedureOperationCompleted, userState);
        }
        
        private void OnCallStoredProcedureOperationCompleted(object arg) {
            if ((this.CallStoredProcedureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallStoredProcedureCompleted(this, new CallStoredProcedureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CallStoredProcedure_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CallStoredProcedure_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, System.DateTime dDateStart, System.DateTime dDateEnd, string procName) {
            object[] results = this.Invoke("CallStoredProcedure_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        dDateStart,
                        dDateEnd,
                        procName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CallStoredProcedure_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, System.DateTime dDateStart, System.DateTime dDateEnd, string procName) {
            this.CallStoredProcedure_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, dDateStart, dDateEnd, procName, null);
        }
        
        /// <remarks/>
        public void CallStoredProcedure_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, System.DateTime dDateStart, System.DateTime dDateEnd, string procName, object userState) {
            if ((this.CallStoredProcedure_v2OperationCompleted == null)) {
                this.CallStoredProcedure_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallStoredProcedure_v2OperationCompleted);
            }
            this.InvokeAsync("CallStoredProcedure_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        dDateStart,
                        dDateEnd,
                        procName}, this.CallStoredProcedure_v2OperationCompleted, userState);
        }
        
        private void OnCallStoredProcedure_v2OperationCompleted(object arg) {
            if ((this.CallStoredProcedure_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallStoredProcedure_v2Completed(this, new CallStoredProcedure_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CallStoredProcedure_v3", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CallStoredProcedure_v3(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string QRIDs, string UnitNames, string CustomerFirstName, string CustomerLastName, string CustomerCompanyName, System.DateTime dTouchDateStart, System.DateTime dTouchDateEnd, int QTRentalStatusID, string procName) {
            object[] results = this.Invoke("CallStoredProcedure_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        QRIDs,
                        UnitNames,
                        CustomerFirstName,
                        CustomerLastName,
                        CustomerCompanyName,
                        dTouchDateStart,
                        dTouchDateEnd,
                        QTRentalStatusID,
                        procName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CallStoredProcedure_v3Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string QRIDs, string UnitNames, string CustomerFirstName, string CustomerLastName, string CustomerCompanyName, System.DateTime dTouchDateStart, System.DateTime dTouchDateEnd, int QTRentalStatusID, string procName) {
            this.CallStoredProcedure_v3Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, QRIDs, UnitNames, CustomerFirstName, CustomerLastName, CustomerCompanyName, dTouchDateStart, dTouchDateEnd, QTRentalStatusID, procName, null);
        }
        
        /// <remarks/>
        public void CallStoredProcedure_v3Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string QRIDs, string UnitNames, string CustomerFirstName, string CustomerLastName, string CustomerCompanyName, System.DateTime dTouchDateStart, System.DateTime dTouchDateEnd, int QTRentalStatusID, string procName, object userState) {
            if ((this.CallStoredProcedure_v3OperationCompleted == null)) {
                this.CallStoredProcedure_v3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallStoredProcedure_v3OperationCompleted);
            }
            this.InvokeAsync("CallStoredProcedure_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        QRIDs,
                        UnitNames,
                        CustomerFirstName,
                        CustomerLastName,
                        CustomerCompanyName,
                        dTouchDateStart,
                        dTouchDateEnd,
                        QTRentalStatusID,
                        procName}, this.CallStoredProcedure_v3OperationCompleted, userState);
        }
        
        private void OnCallStoredProcedure_v3OperationCompleted(object arg) {
            if ((this.CallStoredProcedure_v3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallStoredProcedure_v3Completed(this, new CallStoredProcedure_v3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/SiteLinkeSignCreateLeaseURL", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SiteLinkeSignCreateLeaseURL(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, string sReturnUrl) {
            object[] results = this.Invoke("SiteLinkeSignCreateLeaseURL", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iLedgerID,
                        sReturnUrl});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SiteLinkeSignCreateLeaseURLAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, string sReturnUrl) {
            this.SiteLinkeSignCreateLeaseURLAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iLedgerID, sReturnUrl, null);
        }
        
        /// <remarks/>
        public void SiteLinkeSignCreateLeaseURLAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, string sReturnUrl, object userState) {
            if ((this.SiteLinkeSignCreateLeaseURLOperationCompleted == null)) {
                this.SiteLinkeSignCreateLeaseURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteLinkeSignCreateLeaseURLOperationCompleted);
            }
            this.InvokeAsync("SiteLinkeSignCreateLeaseURL", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iLedgerID,
                        sReturnUrl}, this.SiteLinkeSignCreateLeaseURLOperationCompleted, userState);
        }
        
        private void OnSiteLinkeSignCreateLeaseURLOperationCompleted(object arg) {
            if ((this.SiteLinkeSignCreateLeaseURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteLinkeSignCreateLeaseURLCompleted(this, new SiteLinkeSignCreateLeaseURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/SiteLinkeSignCreateLeaseURL_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SiteLinkeSignCreateLeaseURL_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, string sFormIdsCommaDelimited, string sReturnUrl) {
            object[] results = this.Invoke("SiteLinkeSignCreateLeaseURL_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iLedgerID,
                        sFormIdsCommaDelimited,
                        sReturnUrl});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SiteLinkeSignCreateLeaseURL_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, string sFormIdsCommaDelimited, string sReturnUrl) {
            this.SiteLinkeSignCreateLeaseURL_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iLedgerID, sFormIdsCommaDelimited, sReturnUrl, null);
        }
        
        /// <remarks/>
        public void SiteLinkeSignCreateLeaseURL_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, string sFormIdsCommaDelimited, string sReturnUrl, object userState) {
            if ((this.SiteLinkeSignCreateLeaseURL_v2OperationCompleted == null)) {
                this.SiteLinkeSignCreateLeaseURL_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteLinkeSignCreateLeaseURL_v2OperationCompleted);
            }
            this.InvokeAsync("SiteLinkeSignCreateLeaseURL_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iLedgerID,
                        sFormIdsCommaDelimited,
                        sReturnUrl}, this.SiteLinkeSignCreateLeaseURL_v2OperationCompleted, userState);
        }
        
        private void OnSiteLinkeSignCreateLeaseURL_v2OperationCompleted(object arg) {
            if ((this.SiteLinkeSignCreateLeaseURL_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteLinkeSignCreateLeaseURL_v2Completed(this, new SiteLinkeSignCreateLeaseURL_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/SiteLinkeSignCreateDocumentURL", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SiteLinkeSignCreateDocumentURL(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, int iFormId, string sReturnUrl) {
            object[] results = this.Invoke("SiteLinkeSignCreateDocumentURL", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iLedgerID,
                        iFormId,
                        sReturnUrl});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SiteLinkeSignCreateDocumentURLAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, int iFormId, string sReturnUrl) {
            this.SiteLinkeSignCreateDocumentURLAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iLedgerID, iFormId, sReturnUrl, null);
        }
        
        /// <remarks/>
        public void SiteLinkeSignCreateDocumentURLAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, int iFormId, string sReturnUrl, object userState) {
            if ((this.SiteLinkeSignCreateDocumentURLOperationCompleted == null)) {
                this.SiteLinkeSignCreateDocumentURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteLinkeSignCreateDocumentURLOperationCompleted);
            }
            this.InvokeAsync("SiteLinkeSignCreateDocumentURL", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iLedgerID,
                        iFormId,
                        sReturnUrl}, this.SiteLinkeSignCreateDocumentURLOperationCompleted, userState);
        }
        
        private void OnSiteLinkeSignCreateDocumentURLOperationCompleted(object arg) {
            if ((this.SiteLinkeSignCreateDocumentURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteLinkeSignCreateDocumentURLCompleted(this, new SiteLinkeSignCreateDocumentURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/SiteLinkeSignGenerateDownloadUrl", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SiteLinkeSignGenerateDownloadUrl(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string documentId) {
            object[] results = this.Invoke("SiteLinkeSignGenerateDownloadUrl", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        documentId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SiteLinkeSignGenerateDownloadUrlAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string documentId) {
            this.SiteLinkeSignGenerateDownloadUrlAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, documentId, null);
        }
        
        /// <remarks/>
        public void SiteLinkeSignGenerateDownloadUrlAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string documentId, object userState) {
            if ((this.SiteLinkeSignGenerateDownloadUrlOperationCompleted == null)) {
                this.SiteLinkeSignGenerateDownloadUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteLinkeSignGenerateDownloadUrlOperationCompleted);
            }
            this.InvokeAsync("SiteLinkeSignGenerateDownloadUrl", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        documentId}, this.SiteLinkeSignGenerateDownloadUrlOperationCompleted, userState);
        }
        
        private void OnSiteLinkeSignGenerateDownloadUrlOperationCompleted(object arg) {
            if ((this.SiteLinkeSignGenerateDownloadUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteLinkeSignGenerateDownloadUrlCompleted(this, new SiteLinkeSignGenerateDownloadUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/FormsRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FormsRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("FormsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FormsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.FormsRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void FormsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.FormsRetrieveOperationCompleted == null)) {
                this.FormsRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFormsRetrieveOperationCompleted);
            }
            this.InvokeAsync("FormsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.FormsRetrieveOperationCompleted, userState);
        }
        
        private void OnFormsRetrieveOperationCompleted(object arg) {
            if ((this.FormsRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FormsRetrieveCompleted(this, new FormsRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/EmployeeLoginCCC", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet EmployeeLoginCCC(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword) {
            object[] results = this.Invoke("EmployeeLoginCCC", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EmployeeLoginCCCAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword) {
            this.EmployeeLoginCCCAsync(sCorpCode, sCorpUserName, sCorpPassword, sUsagePassword, null);
        }
        
        /// <remarks/>
        public void EmployeeLoginCCCAsync(string sCorpCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, object userState) {
            if ((this.EmployeeLoginCCCOperationCompleted == null)) {
                this.EmployeeLoginCCCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeeLoginCCCOperationCompleted);
            }
            this.InvokeAsync("EmployeeLoginCCC", new object[] {
                        sCorpCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword}, this.EmployeeLoginCCCOperationCompleted, userState);
        }
        
        private void OnEmployeeLoginCCCOperationCompleted(object arg) {
            if ((this.EmployeeLoginCCCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeeLoginCCCCompleted(this, new EmployeeLoginCCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CustomBillingDateCharges", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CustomBillingDateCharges(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, System.DateTime dBillingDate) {
            object[] results = this.Invoke("CustomBillingDateCharges", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        dBillingDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CustomBillingDateChargesAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, System.DateTime dBillingDate) {
            this.CustomBillingDateChargesAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, dBillingDate, null);
        }
        
        /// <remarks/>
        public void CustomBillingDateChargesAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, System.DateTime dBillingDate, object userState) {
            if ((this.CustomBillingDateChargesOperationCompleted == null)) {
                this.CustomBillingDateChargesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomBillingDateChargesOperationCompleted);
            }
            this.InvokeAsync("CustomBillingDateCharges", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        dBillingDate}, this.CustomBillingDateChargesOperationCompleted, userState);
        }
        
        private void OnCustomBillingDateChargesOperationCompleted(object arg) {
            if ((this.CustomBillingDateChargesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomBillingDateChargesCompleted(this, new CustomBillingDateChargesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/DiscountPlanUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DiscountPlanUpdate(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sConcessionIDs, 
                    int iShowOn, 
                    decimal dcMaxOccPct, 
                    string sPlanStrt, 
                    string sPlanEnd, 
                    int iAvailableAt, 
                    int iDisabled, 
                    int iExcludeIfLessThanUnitsTotal, 
                    string iExcludeIfMoreThanUnitsTotal, 
                    decimal dcMaxOccPctExcludeIfMoreThanUnitsTotal, 
                    string sConcessionUnitTypeIDs, 
                    int iConcessionUnitTypeOverwrite) {
            object[] results = this.Invoke("DiscountPlanUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sConcessionIDs,
                        iShowOn,
                        dcMaxOccPct,
                        sPlanStrt,
                        sPlanEnd,
                        iAvailableAt,
                        iDisabled,
                        iExcludeIfLessThanUnitsTotal,
                        iExcludeIfMoreThanUnitsTotal,
                        dcMaxOccPctExcludeIfMoreThanUnitsTotal,
                        sConcessionUnitTypeIDs,
                        iConcessionUnitTypeOverwrite});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DiscountPlanUpdateAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sConcessionIDs, 
                    int iShowOn, 
                    decimal dcMaxOccPct, 
                    string sPlanStrt, 
                    string sPlanEnd, 
                    int iAvailableAt, 
                    int iDisabled, 
                    int iExcludeIfLessThanUnitsTotal, 
                    string iExcludeIfMoreThanUnitsTotal, 
                    decimal dcMaxOccPctExcludeIfMoreThanUnitsTotal, 
                    string sConcessionUnitTypeIDs, 
                    int iConcessionUnitTypeOverwrite) {
            this.DiscountPlanUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sConcessionIDs, iShowOn, dcMaxOccPct, sPlanStrt, sPlanEnd, iAvailableAt, iDisabled, iExcludeIfLessThanUnitsTotal, iExcludeIfMoreThanUnitsTotal, dcMaxOccPctExcludeIfMoreThanUnitsTotal, sConcessionUnitTypeIDs, iConcessionUnitTypeOverwrite, null);
        }
        
        /// <remarks/>
        public void DiscountPlanUpdateAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sConcessionIDs, 
                    int iShowOn, 
                    decimal dcMaxOccPct, 
                    string sPlanStrt, 
                    string sPlanEnd, 
                    int iAvailableAt, 
                    int iDisabled, 
                    int iExcludeIfLessThanUnitsTotal, 
                    string iExcludeIfMoreThanUnitsTotal, 
                    decimal dcMaxOccPctExcludeIfMoreThanUnitsTotal, 
                    string sConcessionUnitTypeIDs, 
                    int iConcessionUnitTypeOverwrite, 
                    object userState) {
            if ((this.DiscountPlanUpdateOperationCompleted == null)) {
                this.DiscountPlanUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiscountPlanUpdateOperationCompleted);
            }
            this.InvokeAsync("DiscountPlanUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sConcessionIDs,
                        iShowOn,
                        dcMaxOccPct,
                        sPlanStrt,
                        sPlanEnd,
                        iAvailableAt,
                        iDisabled,
                        iExcludeIfLessThanUnitsTotal,
                        iExcludeIfMoreThanUnitsTotal,
                        dcMaxOccPctExcludeIfMoreThanUnitsTotal,
                        sConcessionUnitTypeIDs,
                        iConcessionUnitTypeOverwrite}, this.DiscountPlanUpdateOperationCompleted, userState);
        }
        
        private void OnDiscountPlanUpdateOperationCompleted(object arg) {
            if ((this.DiscountPlanUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiscountPlanUpdateCompleted(this, new DiscountPlanUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/DiscountPlanUnitTypesList", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DiscountPlanUnitTypesList(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sConcessionIDs) {
            object[] results = this.Invoke("DiscountPlanUnitTypesList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sConcessionIDs});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DiscountPlanUnitTypesListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sConcessionIDs) {
            this.DiscountPlanUnitTypesListAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sConcessionIDs, null);
        }
        
        /// <remarks/>
        public void DiscountPlanUnitTypesListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sConcessionIDs, object userState) {
            if ((this.DiscountPlanUnitTypesListOperationCompleted == null)) {
                this.DiscountPlanUnitTypesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiscountPlanUnitTypesListOperationCompleted);
            }
            this.InvokeAsync("DiscountPlanUnitTypesList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sConcessionIDs}, this.DiscountPlanUnitTypesListOperationCompleted, userState);
        }
        
        private void OnDiscountPlanUnitTypesListOperationCompleted(object arg) {
            if ((this.DiscountPlanUnitTypesListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiscountPlanUnitTypesListCompleted(this, new DiscountPlanUnitTypesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/DiscountPlanUpdateSimple", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DiscountPlanUpdateSimple(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sConcessionIDs, int iDisabled, string sConcessionUnitTypeIDs, int iConcessionUnitTypeOverwrite) {
            object[] results = this.Invoke("DiscountPlanUpdateSimple", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sConcessionIDs,
                        iDisabled,
                        sConcessionUnitTypeIDs,
                        iConcessionUnitTypeOverwrite});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DiscountPlanUpdateSimpleAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sConcessionIDs, int iDisabled, string sConcessionUnitTypeIDs, int iConcessionUnitTypeOverwrite) {
            this.DiscountPlanUpdateSimpleAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sConcessionIDs, iDisabled, sConcessionUnitTypeIDs, iConcessionUnitTypeOverwrite, null);
        }
        
        /// <remarks/>
        public void DiscountPlanUpdateSimpleAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sConcessionIDs, int iDisabled, string sConcessionUnitTypeIDs, int iConcessionUnitTypeOverwrite, object userState) {
            if ((this.DiscountPlanUpdateSimpleOperationCompleted == null)) {
                this.DiscountPlanUpdateSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiscountPlanUpdateSimpleOperationCompleted);
            }
            this.InvokeAsync("DiscountPlanUpdateSimple", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sConcessionIDs,
                        iDisabled,
                        sConcessionUnitTypeIDs,
                        iConcessionUnitTypeOverwrite}, this.DiscountPlanUpdateSimpleOperationCompleted, userState);
        }
        
        private void OnDiscountPlanUpdateSimpleOperationCompleted(object arg) {
            if ((this.DiscountPlanUpdateSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiscountPlanUpdateSimpleCompleted(this, new DiscountPlanUpdateSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationFeeAddWithSourceForMobile" +
            "Storage", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationFeeAddWithSourceForMobileStorage(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iQTRentalId, 
                    decimal dcAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource) {
            object[] results = this.Invoke("ReservationFeeAddWithSourceForMobileStorage", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iQTRentalId,
                        dcAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationFeeAddWithSourceForMobileStorageAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iQTRentalId, 
                    decimal dcAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource) {
            this.ReservationFeeAddWithSourceForMobileStorageAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iQTRentalId, dcAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, bTestMode, iSource, null);
        }
        
        /// <remarks/>
        public void ReservationFeeAddWithSourceForMobileStorageAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iQTRentalId, 
                    decimal dcAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource, 
                    object userState) {
            if ((this.ReservationFeeAddWithSourceForMobileStorageOperationCompleted == null)) {
                this.ReservationFeeAddWithSourceForMobileStorageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationFeeAddWithSourceForMobileStorageOperationCompleted);
            }
            this.InvokeAsync("ReservationFeeAddWithSourceForMobileStorage", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iQTRentalId,
                        dcAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode,
                        iSource}, this.ReservationFeeAddWithSourceForMobileStorageOperationCompleted, userState);
        }
        
        private void OnReservationFeeAddWithSourceForMobileStorageOperationCompleted(object arg) {
            if ((this.ReservationFeeAddWithSourceForMobileStorageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationFeeAddWithSourceForMobileStorageCompleted(this, new ReservationFeeAddWithSourceForMobileStorageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/RefundPaymentCash", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RefundPaymentCash(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason) {
            object[] results = this.Invoke("RefundPaymentCash", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        tenantId,
                        unitId,
                        sReason});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RefundPaymentCashAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason) {
            this.RefundPaymentCashAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, tenantId, unitId, sReason, null);
        }
        
        /// <remarks/>
        public void RefundPaymentCashAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason, object userState) {
            if ((this.RefundPaymentCashOperationCompleted == null)) {
                this.RefundPaymentCashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefundPaymentCashOperationCompleted);
            }
            this.InvokeAsync("RefundPaymentCash", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        tenantId,
                        unitId,
                        sReason}, this.RefundPaymentCashOperationCompleted, userState);
        }
        
        private void OnRefundPaymentCashOperationCompleted(object arg) {
            if ((this.RefundPaymentCashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefundPaymentCashCompleted(this, new RefundPaymentCashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/RefundPaymentCheck", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RefundPaymentCheck(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason, string checkNumber) {
            object[] results = this.Invoke("RefundPaymentCheck", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        tenantId,
                        unitId,
                        sReason,
                        checkNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RefundPaymentCheckAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason, string checkNumber) {
            this.RefundPaymentCheckAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, tenantId, unitId, sReason, checkNumber, null);
        }
        
        /// <remarks/>
        public void RefundPaymentCheckAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason, string checkNumber, object userState) {
            if ((this.RefundPaymentCheckOperationCompleted == null)) {
                this.RefundPaymentCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefundPaymentCheckOperationCompleted);
            }
            this.InvokeAsync("RefundPaymentCheck", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        tenantId,
                        unitId,
                        sReason,
                        checkNumber}, this.RefundPaymentCheckOperationCompleted, userState);
        }
        
        private void OnRefundPaymentCheckOperationCompleted(object arg) {
            if ((this.RefundPaymentCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefundPaymentCheckCompleted(this, new RefundPaymentCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/RefundPaymentCreditCard", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RefundPaymentCreditCard(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason, int iCreditCardType, string sCreditCardNumber, string sCreditCardCVV, System.DateTime dExpirationDate, string sBillingName, string sBillingAddress, string sBillingZipCode) {
            object[] results = this.Invoke("RefundPaymentCreditCard", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        tenantId,
                        unitId,
                        sReason,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RefundPaymentCreditCardAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason, int iCreditCardType, string sCreditCardNumber, string sCreditCardCVV, System.DateTime dExpirationDate, string sBillingName, string sBillingAddress, string sBillingZipCode) {
            this.RefundPaymentCreditCardAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, tenantId, unitId, sReason, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, null);
        }
        
        /// <remarks/>
        public void RefundPaymentCreditCardAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason, int iCreditCardType, string sCreditCardNumber, string sCreditCardCVV, System.DateTime dExpirationDate, string sBillingName, string sBillingAddress, string sBillingZipCode, object userState) {
            if ((this.RefundPaymentCreditCardOperationCompleted == null)) {
                this.RefundPaymentCreditCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefundPaymentCreditCardOperationCompleted);
            }
            this.InvokeAsync("RefundPaymentCreditCard", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        tenantId,
                        unitId,
                        sReason,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode}, this.RefundPaymentCreditCardOperationCompleted, userState);
        }
        
        private void OnRefundPaymentCreditCardOperationCompleted(object arg) {
            if ((this.RefundPaymentCreditCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefundPaymentCreditCardCompleted(this, new RefundPaymentCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/RefundPaymentApplyToDifferentUnit", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RefundPaymentApplyToDifferentUnit(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason, int ledgerIdApplyTo) {
            object[] results = this.Invoke("RefundPaymentApplyToDifferentUnit", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        tenantId,
                        unitId,
                        sReason,
                        ledgerIdApplyTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RefundPaymentApplyToDifferentUnitAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason, int ledgerIdApplyTo) {
            this.RefundPaymentApplyToDifferentUnitAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, tenantId, unitId, sReason, ledgerIdApplyTo, null);
        }
        
        /// <remarks/>
        public void RefundPaymentApplyToDifferentUnitAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int tenantId, int unitId, string sReason, int ledgerIdApplyTo, object userState) {
            if ((this.RefundPaymentApplyToDifferentUnitOperationCompleted == null)) {
                this.RefundPaymentApplyToDifferentUnitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefundPaymentApplyToDifferentUnitOperationCompleted);
            }
            this.InvokeAsync("RefundPaymentApplyToDifferentUnit", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        tenantId,
                        unitId,
                        sReason,
                        ledgerIdApplyTo}, this.RefundPaymentApplyToDifferentUnitOperationCompleted, userState);
        }
        
        private void OnRefundPaymentApplyToDifferentUnitOperationCompleted(object arg) {
            if ((this.RefundPaymentApplyToDifferentUnitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefundPaymentApplyToDifferentUnitCompleted(this, new RefundPaymentApplyToDifferentUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ChargesAllByLedgerID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChargesAllByLedgerID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId) {
            object[] results = this.Invoke("ChargesAllByLedgerID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        ledgerId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChargesAllByLedgerIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId) {
            this.ChargesAllByLedgerIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, ledgerId, null);
        }
        
        /// <remarks/>
        public void ChargesAllByLedgerIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId, object userState) {
            if ((this.ChargesAllByLedgerIDOperationCompleted == null)) {
                this.ChargesAllByLedgerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargesAllByLedgerIDOperationCompleted);
            }
            this.InvokeAsync("ChargesAllByLedgerID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        ledgerId}, this.ChargesAllByLedgerIDOperationCompleted, userState);
        }
        
        private void OnChargesAllByLedgerIDOperationCompleted(object arg) {
            if ((this.ChargesAllByLedgerIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargesAllByLedgerIDCompleted(this, new ChargesAllByLedgerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ChargeDateUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChargeDateUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId, int chargeId, System.DateTime dStart, System.DateTime dEnd) {
            object[] results = this.Invoke("ChargeDateUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        ledgerId,
                        chargeId,
                        dStart,
                        dEnd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChargeDateUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId, int chargeId, System.DateTime dStart, System.DateTime dEnd) {
            this.ChargeDateUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, ledgerId, chargeId, dStart, dEnd, null);
        }
        
        /// <remarks/>
        public void ChargeDateUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId, int chargeId, System.DateTime dStart, System.DateTime dEnd, object userState) {
            if ((this.ChargeDateUpdateOperationCompleted == null)) {
                this.ChargeDateUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargeDateUpdateOperationCompleted);
            }
            this.InvokeAsync("ChargeDateUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        ledgerId,
                        chargeId,
                        dStart,
                        dEnd}, this.ChargeDateUpdateOperationCompleted, userState);
        }
        
        private void OnChargeDateUpdateOperationCompleted(object arg) {
            if ((this.ChargeDateUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargeDateUpdateCompleted(this, new ChargeDateUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ChargePriceUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChargePriceUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId, int chargeId, decimal amount) {
            object[] results = this.Invoke("ChargePriceUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        ledgerId,
                        chargeId,
                        amount});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChargePriceUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId, int chargeId, decimal amount) {
            this.ChargePriceUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, ledgerId, chargeId, amount, null);
        }
        
        /// <remarks/>
        public void ChargePriceUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId, int chargeId, decimal amount, object userState) {
            if ((this.ChargePriceUpdateOperationCompleted == null)) {
                this.ChargePriceUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargePriceUpdateOperationCompleted);
            }
            this.InvokeAsync("ChargePriceUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        ledgerId,
                        chargeId,
                        amount}, this.ChargePriceUpdateOperationCompleted, userState);
        }
        
        private void OnChargePriceUpdateOperationCompleted(object arg) {
            if ((this.ChargePriceUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargePriceUpdateCompleted(this, new ChargePriceUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ApplyCredit", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ApplyCredit(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId, int chargeId, decimal amount, string creditReason) {
            object[] results = this.Invoke("ApplyCredit", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        ledgerId,
                        chargeId,
                        amount,
                        creditReason});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ApplyCreditAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId, int chargeId, decimal amount, string creditReason) {
            this.ApplyCreditAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, ledgerId, chargeId, amount, creditReason, null);
        }
        
        /// <remarks/>
        public void ApplyCreditAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int ledgerId, int chargeId, decimal amount, string creditReason, object userState) {
            if ((this.ApplyCreditOperationCompleted == null)) {
                this.ApplyCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyCreditOperationCompleted);
            }
            this.InvokeAsync("ApplyCredit", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        ledgerId,
                        chargeId,
                        amount,
                        creditReason}, this.ApplyCreditOperationCompleted, userState);
        }
        
        private void OnApplyCreditOperationCompleted(object arg) {
            if ((this.ApplyCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyCreditCompleted(this, new ApplyCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/SiteLinkeSignPreviewLeaseURL", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SiteLinkeSignPreviewLeaseURL(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID) {
            object[] results = this.Invoke("SiteLinkeSignPreviewLeaseURL", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SiteLinkeSignPreviewLeaseURLAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID) {
            this.SiteLinkeSignPreviewLeaseURLAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iUnitID, null);
        }
        
        /// <remarks/>
        public void SiteLinkeSignPreviewLeaseURLAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, object userState) {
            if ((this.SiteLinkeSignPreviewLeaseURLOperationCompleted == null)) {
                this.SiteLinkeSignPreviewLeaseURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteLinkeSignPreviewLeaseURLOperationCompleted);
            }
            this.InvokeAsync("SiteLinkeSignPreviewLeaseURL", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID}, this.SiteLinkeSignPreviewLeaseURLOperationCompleted, userState);
        }
        
        private void OnSiteLinkeSignPreviewLeaseURLOperationCompleted(object arg) {
            if ((this.SiteLinkeSignPreviewLeaseURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteLinkeSignPreviewLeaseURLCompleted(this, new SiteLinkeSignPreviewLeaseURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/SiteLinkeSignPreviewDocumentURL", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SiteLinkeSignPreviewDocumentURL(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iFormID) {
            object[] results = this.Invoke("SiteLinkeSignPreviewDocumentURL", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iFormID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SiteLinkeSignPreviewDocumentURLAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iFormID) {
            this.SiteLinkeSignPreviewDocumentURLAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iFormID, null);
        }
        
        /// <remarks/>
        public void SiteLinkeSignPreviewDocumentURLAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iFormID, object userState) {
            if ((this.SiteLinkeSignPreviewDocumentURLOperationCompleted == null)) {
                this.SiteLinkeSignPreviewDocumentURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteLinkeSignPreviewDocumentURLOperationCompleted);
            }
            this.InvokeAsync("SiteLinkeSignPreviewDocumentURL", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iFormID}, this.SiteLinkeSignPreviewDocumentURLOperationCompleted, userState);
        }
        
        private void OnSiteLinkeSignPreviewDocumentURLOperationCompleted(object arg) {
            if ((this.SiteLinkeSignPreviewDocumentURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteLinkeSignPreviewDocumentURLCompleted(this, new SiteLinkeSignPreviewDocumentURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CallTrackingCampaignsRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CallTrackingCampaignsRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("CallTrackingCampaignsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CallTrackingCampaignsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.CallTrackingCampaignsRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void CallTrackingCampaignsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.CallTrackingCampaignsRetrieveOperationCompleted == null)) {
                this.CallTrackingCampaignsRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallTrackingCampaignsRetrieveOperationCompleted);
            }
            this.InvokeAsync("CallTrackingCampaignsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.CallTrackingCampaignsRetrieveOperationCompleted, userState);
        }
        
        private void OnCallTrackingCampaignsRetrieveOperationCompleted(object arg) {
            if ((this.CallTrackingCampaignsRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallTrackingCampaignsRetrieveCompleted(this, new CallTrackingCampaignsRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CallTrackingCampaignsAdd", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CallTrackingCampaignsAdd(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sCampaignName, string sTrackingNumber, System.DateTime dStartDate, System.DateTime dEndDate) {
            object[] results = this.Invoke("CallTrackingCampaignsAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sCampaignName,
                        sTrackingNumber,
                        dStartDate,
                        dEndDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CallTrackingCampaignsAddAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sCampaignName, string sTrackingNumber, System.DateTime dStartDate, System.DateTime dEndDate) {
            this.CallTrackingCampaignsAddAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sCampaignName, sTrackingNumber, dStartDate, dEndDate, null);
        }
        
        /// <remarks/>
        public void CallTrackingCampaignsAddAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sCampaignName, string sTrackingNumber, System.DateTime dStartDate, System.DateTime dEndDate, object userState) {
            if ((this.CallTrackingCampaignsAddOperationCompleted == null)) {
                this.CallTrackingCampaignsAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallTrackingCampaignsAddOperationCompleted);
            }
            this.InvokeAsync("CallTrackingCampaignsAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sCampaignName,
                        sTrackingNumber,
                        dStartDate,
                        dEndDate}, this.CallTrackingCampaignsAddOperationCompleted, userState);
        }
        
        private void OnCallTrackingCampaignsAddOperationCompleted(object arg) {
            if ((this.CallTrackingCampaignsAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallTrackingCampaignsAddCompleted(this, new CallTrackingCampaignsAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CallTrackingCampaignsUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CallTrackingCampaignsUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int CallTrackingCampaignID, string sCampaignName, string sTrackingNumber, System.DateTime dStartDate, System.DateTime dEndDate) {
            object[] results = this.Invoke("CallTrackingCampaignsUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        CallTrackingCampaignID,
                        sCampaignName,
                        sTrackingNumber,
                        dStartDate,
                        dEndDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CallTrackingCampaignsUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int CallTrackingCampaignID, string sCampaignName, string sTrackingNumber, System.DateTime dStartDate, System.DateTime dEndDate) {
            this.CallTrackingCampaignsUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, CallTrackingCampaignID, sCampaignName, sTrackingNumber, dStartDate, dEndDate, null);
        }
        
        /// <remarks/>
        public void CallTrackingCampaignsUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int CallTrackingCampaignID, string sCampaignName, string sTrackingNumber, System.DateTime dStartDate, System.DateTime dEndDate, object userState) {
            if ((this.CallTrackingCampaignsUpdateOperationCompleted == null)) {
                this.CallTrackingCampaignsUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallTrackingCampaignsUpdateOperationCompleted);
            }
            this.InvokeAsync("CallTrackingCampaignsUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        CallTrackingCampaignID,
                        sCampaignName,
                        sTrackingNumber,
                        dStartDate,
                        dEndDate}, this.CallTrackingCampaignsUpdateOperationCompleted, userState);
        }
        
        private void OnCallTrackingCampaignsUpdateOperationCompleted(object arg) {
            if ((this.CallTrackingCampaignsUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallTrackingCampaignsUpdateCompleted(this, new CallTrackingCampaignsUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CallTrackingCampaignsDelete", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CallTrackingCampaignsDelete(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int CallTrackingCampaignID) {
            object[] results = this.Invoke("CallTrackingCampaignsDelete", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        CallTrackingCampaignID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CallTrackingCampaignsDeleteAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int CallTrackingCampaignID) {
            this.CallTrackingCampaignsDeleteAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, CallTrackingCampaignID, null);
        }
        
        /// <remarks/>
        public void CallTrackingCampaignsDeleteAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int CallTrackingCampaignID, object userState) {
            if ((this.CallTrackingCampaignsDeleteOperationCompleted == null)) {
                this.CallTrackingCampaignsDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallTrackingCampaignsDeleteOperationCompleted);
            }
            this.InvokeAsync("CallTrackingCampaignsDelete", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        CallTrackingCampaignID}, this.CallTrackingCampaignsDeleteOperationCompleted, userState);
        }
        
        private void OnCallTrackingCampaignsDeleteOperationCompleted(object arg) {
            if ((this.CallTrackingCampaignsDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallTrackingCampaignsDeleteCompleted(this, new CallTrackingCampaignsDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MarketingSourcesAdd", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MarketingSourcesAdd(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sMarketingDesc) {
            object[] results = this.Invoke("MarketingSourcesAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sMarketingDesc});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MarketingSourcesAddAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sMarketingDesc) {
            this.MarketingSourcesAddAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sMarketingDesc, null);
        }
        
        /// <remarks/>
        public void MarketingSourcesAddAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sMarketingDesc, object userState) {
            if ((this.MarketingSourcesAddOperationCompleted == null)) {
                this.MarketingSourcesAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarketingSourcesAddOperationCompleted);
            }
            this.InvokeAsync("MarketingSourcesAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sMarketingDesc}, this.MarketingSourcesAddOperationCompleted, userState);
        }
        
        private void OnMarketingSourcesAddOperationCompleted(object arg) {
            if ((this.MarketingSourcesAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarketingSourcesAddCompleted(this, new MarketingSourcesAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MarketingSourcesUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MarketingSourcesUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int MarketingID, string sMarketingDesc) {
            object[] results = this.Invoke("MarketingSourcesUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        MarketingID,
                        sMarketingDesc});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MarketingSourcesUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int MarketingID, string sMarketingDesc) {
            this.MarketingSourcesUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, MarketingID, sMarketingDesc, null);
        }
        
        /// <remarks/>
        public void MarketingSourcesUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int MarketingID, string sMarketingDesc, object userState) {
            if ((this.MarketingSourcesUpdateOperationCompleted == null)) {
                this.MarketingSourcesUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarketingSourcesUpdateOperationCompleted);
            }
            this.InvokeAsync("MarketingSourcesUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        MarketingID,
                        sMarketingDesc}, this.MarketingSourcesUpdateOperationCompleted, userState);
        }
        
        private void OnMarketingSourcesUpdateOperationCompleted(object arg) {
            if ((this.MarketingSourcesUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarketingSourcesUpdateCompleted(this, new MarketingSourcesUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MarketingSourcesDelete", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MarketingSourcesDelete(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int MarketingID) {
            object[] results = this.Invoke("MarketingSourcesDelete", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        MarketingID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MarketingSourcesDeleteAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int MarketingID) {
            this.MarketingSourcesDeleteAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, MarketingID, null);
        }
        
        /// <remarks/>
        public void MarketingSourcesDeleteAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int MarketingID, object userState) {
            if ((this.MarketingSourcesDeleteOperationCompleted == null)) {
                this.MarketingSourcesDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarketingSourcesDeleteOperationCompleted);
            }
            this.InvokeAsync("MarketingSourcesDelete", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        MarketingID}, this.MarketingSourcesDeleteOperationCompleted, userState);
        }
        
        private void OnMarketingSourcesDeleteOperationCompleted(object arg) {
            if ((this.MarketingSourcesDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarketingSourcesDeleteCompleted(this, new MarketingSourcesDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/LedgerTransferToNewTenant", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LedgerTransferToNewTenant(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, int TenantID) {
            object[] results = this.Invoke("LedgerTransferToNewTenant", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        TenantID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LedgerTransferToNewTenantAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, int TenantID) {
            this.LedgerTransferToNewTenantAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, TenantID, null);
        }
        
        /// <remarks/>
        public void LedgerTransferToNewTenantAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, int TenantID, object userState) {
            if ((this.LedgerTransferToNewTenantOperationCompleted == null)) {
                this.LedgerTransferToNewTenantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLedgerTransferToNewTenantOperationCompleted);
            }
            this.InvokeAsync("LedgerTransferToNewTenant", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        TenantID}, this.LedgerTransferToNewTenantOperationCompleted, userState);
        }
        
        private void OnLedgerTransferToNewTenantOperationCompleted(object arg) {
            if ((this.LedgerTransferToNewTenantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LedgerTransferToNewTenantCompleted(this, new LedgerTransferToNewTenantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantNew", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantNew(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName) {
            object[] results = this.Invoke("TenantNew", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantNewAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName) {
            this.TenantNewAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantFirstName, sTenantLastName, null);
        }
        
        /// <remarks/>
        public void TenantNewAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName, object userState) {
            if ((this.TenantNewOperationCompleted == null)) {
                this.TenantNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantNewOperationCompleted);
            }
            this.InvokeAsync("TenantNew", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName}, this.TenantNewOperationCompleted, userState);
        }
        
        private void OnTenantNewOperationCompleted(object arg) {
            if ((this.TenantNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantNewCompleted(this, new TenantNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantNewDetailed", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantNewDetailed(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN) {
            object[] results = this.Invoke("TenantNewDetailed", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sWebPassword,
                        sMrMrs,
                        sFName,
                        sMI,
                        sLName,
                        sCompany,
                        sAddr1,
                        sAddr2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sMrMrsAlt,
                        sFNameAlt,
                        sMIAlt,
                        sLNameAlt,
                        sAddr1Alt,
                        sAddr2Alt,
                        sCityAlt,
                        sRegionAlt,
                        sPostalCodeAlt,
                        sCountryAlt,
                        sPhoneAlt,
                        sMrMrsBus,
                        sFNameBus,
                        sMIBus,
                        sLNameBus,
                        sCompanyBus,
                        sAddr1Bus,
                        sAddr2Bus,
                        sCityBus,
                        sRegionBus,
                        sPostalCodeBus,
                        sCountryBus,
                        sPhoneBus,
                        sFax,
                        sEmail,
                        sPager,
                        sMobile,
                        bCommercial,
                        bCompanyIsTenant,
                        dDOB,
                        sTenNote,
                        sLicense,
                        sLicRegion,
                        sSSN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantNewDetailedAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN) {
            this.TenantNewDetailedAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sWebPassword, sMrMrs, sFName, sMI, sLName, sCompany, sAddr1, sAddr2, sCity, sRegion, sPostalCode, sCountry, sPhone, sMrMrsAlt, sFNameAlt, sMIAlt, sLNameAlt, sAddr1Alt, sAddr2Alt, sCityAlt, sRegionAlt, sPostalCodeAlt, sCountryAlt, sPhoneAlt, sMrMrsBus, sFNameBus, sMIBus, sLNameBus, sCompanyBus, sAddr1Bus, sAddr2Bus, sCityBus, sRegionBus, sPostalCodeBus, sCountryBus, sPhoneBus, sFax, sEmail, sPager, sMobile, bCommercial, bCompanyIsTenant, dDOB, sTenNote, sLicense, sLicRegion, sSSN, null);
        }
        
        /// <remarks/>
        public void TenantNewDetailedAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN, 
                    object userState) {
            if ((this.TenantNewDetailedOperationCompleted == null)) {
                this.TenantNewDetailedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantNewDetailedOperationCompleted);
            }
            this.InvokeAsync("TenantNewDetailed", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sWebPassword,
                        sMrMrs,
                        sFName,
                        sMI,
                        sLName,
                        sCompany,
                        sAddr1,
                        sAddr2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sMrMrsAlt,
                        sFNameAlt,
                        sMIAlt,
                        sLNameAlt,
                        sAddr1Alt,
                        sAddr2Alt,
                        sCityAlt,
                        sRegionAlt,
                        sPostalCodeAlt,
                        sCountryAlt,
                        sPhoneAlt,
                        sMrMrsBus,
                        sFNameBus,
                        sMIBus,
                        sLNameBus,
                        sCompanyBus,
                        sAddr1Bus,
                        sAddr2Bus,
                        sCityBus,
                        sRegionBus,
                        sPostalCodeBus,
                        sCountryBus,
                        sPhoneBus,
                        sFax,
                        sEmail,
                        sPager,
                        sMobile,
                        bCommercial,
                        bCompanyIsTenant,
                        dDOB,
                        sTenNote,
                        sLicense,
                        sLicRegion,
                        sSSN}, this.TenantNewDetailedOperationCompleted, userState);
        }
        
        private void OnTenantNewDetailedOperationCompleted(object arg) {
            if ((this.TenantNewDetailedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantNewDetailedCompleted(this, new TenantNewDetailedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantNewDetailed_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantNewDetailed_v2(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN, 
                    string sGateCode) {
            object[] results = this.Invoke("TenantNewDetailed_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sWebPassword,
                        sMrMrs,
                        sFName,
                        sMI,
                        sLName,
                        sCompany,
                        sAddr1,
                        sAddr2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sMrMrsAlt,
                        sFNameAlt,
                        sMIAlt,
                        sLNameAlt,
                        sAddr1Alt,
                        sAddr2Alt,
                        sCityAlt,
                        sRegionAlt,
                        sPostalCodeAlt,
                        sCountryAlt,
                        sPhoneAlt,
                        sMrMrsBus,
                        sFNameBus,
                        sMIBus,
                        sLNameBus,
                        sCompanyBus,
                        sAddr1Bus,
                        sAddr2Bus,
                        sCityBus,
                        sRegionBus,
                        sPostalCodeBus,
                        sCountryBus,
                        sPhoneBus,
                        sFax,
                        sEmail,
                        sPager,
                        sMobile,
                        bCommercial,
                        bCompanyIsTenant,
                        dDOB,
                        sTenNote,
                        sLicense,
                        sLicRegion,
                        sSSN,
                        sGateCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantNewDetailed_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN, 
                    string sGateCode) {
            this.TenantNewDetailed_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sWebPassword, sMrMrs, sFName, sMI, sLName, sCompany, sAddr1, sAddr2, sCity, sRegion, sPostalCode, sCountry, sPhone, sMrMrsAlt, sFNameAlt, sMIAlt, sLNameAlt, sAddr1Alt, sAddr2Alt, sCityAlt, sRegionAlt, sPostalCodeAlt, sCountryAlt, sPhoneAlt, sMrMrsBus, sFNameBus, sMIBus, sLNameBus, sCompanyBus, sAddr1Bus, sAddr2Bus, sCityBus, sRegionBus, sPostalCodeBus, sCountryBus, sPhoneBus, sFax, sEmail, sPager, sMobile, bCommercial, bCompanyIsTenant, dDOB, sTenNote, sLicense, sLicRegion, sSSN, sGateCode, null);
        }
        
        /// <remarks/>
        public void TenantNewDetailed_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN, 
                    string sGateCode, 
                    object userState) {
            if ((this.TenantNewDetailed_v2OperationCompleted == null)) {
                this.TenantNewDetailed_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantNewDetailed_v2OperationCompleted);
            }
            this.InvokeAsync("TenantNewDetailed_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sWebPassword,
                        sMrMrs,
                        sFName,
                        sMI,
                        sLName,
                        sCompany,
                        sAddr1,
                        sAddr2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sMrMrsAlt,
                        sFNameAlt,
                        sMIAlt,
                        sLNameAlt,
                        sAddr1Alt,
                        sAddr2Alt,
                        sCityAlt,
                        sRegionAlt,
                        sPostalCodeAlt,
                        sCountryAlt,
                        sPhoneAlt,
                        sMrMrsBus,
                        sFNameBus,
                        sMIBus,
                        sLNameBus,
                        sCompanyBus,
                        sAddr1Bus,
                        sAddr2Bus,
                        sCityBus,
                        sRegionBus,
                        sPostalCodeBus,
                        sCountryBus,
                        sPhoneBus,
                        sFax,
                        sEmail,
                        sPager,
                        sMobile,
                        bCommercial,
                        bCompanyIsTenant,
                        dDOB,
                        sTenNote,
                        sLicense,
                        sLicRegion,
                        sSSN,
                        sGateCode}, this.TenantNewDetailed_v2OperationCompleted, userState);
        }
        
        private void OnTenantNewDetailed_v2OperationCompleted(object arg) {
            if ((this.TenantNewDetailed_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantNewDetailed_v2Completed(this, new TenantNewDetailed_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantInfoByTenantID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantInfoByTenantID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID) {
            object[] results = this.Invoke("TenantInfoByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantInfoByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID) {
            this.TenantInfoByTenantIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, null);
        }
        
        /// <remarks/>
        public void TenantInfoByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, object userState) {
            if ((this.TenantInfoByTenantIDOperationCompleted == null)) {
                this.TenantInfoByTenantIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantInfoByTenantIDOperationCompleted);
            }
            this.InvokeAsync("TenantInfoByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID}, this.TenantInfoByTenantIDOperationCompleted, userState);
        }
        
        private void OnTenantInfoByTenantIDOperationCompleted(object arg) {
            if ((this.TenantInfoByTenantIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantInfoByTenantIDCompleted(this, new TenantInfoByTenantIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantInvoicesByTenantID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantInvoicesByTenantID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, System.DateTime dDateStart, System.DateTime dDateEnd, string sTenantIDsCommaDelimited) {
            object[] results = this.Invoke("TenantInvoicesByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        dDateStart,
                        dDateEnd,
                        sTenantIDsCommaDelimited});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantInvoicesByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, System.DateTime dDateStart, System.DateTime dDateEnd, string sTenantIDsCommaDelimited) {
            this.TenantInvoicesByTenantIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, dDateStart, dDateEnd, sTenantIDsCommaDelimited, null);
        }
        
        /// <remarks/>
        public void TenantInvoicesByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, System.DateTime dDateStart, System.DateTime dDateEnd, string sTenantIDsCommaDelimited, object userState) {
            if ((this.TenantInvoicesByTenantIDOperationCompleted == null)) {
                this.TenantInvoicesByTenantIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantInvoicesByTenantIDOperationCompleted);
            }
            this.InvokeAsync("TenantInvoicesByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        dDateStart,
                        dDateEnd,
                        sTenantIDsCommaDelimited}, this.TenantInvoicesByTenantIDOperationCompleted, userState);
        }
        
        private void OnTenantInvoicesByTenantIDOperationCompleted(object arg) {
            if ((this.TenantInvoicesByTenantIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantInvoicesByTenantIDCompleted(this, new TenantInvoicesByTenantIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInCostRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInCostRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate) {
            object[] results = this.Invoke("MoveInCostRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate) {
            this.MoveInCostRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iUnitID, dMoveInDate, null);
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, object userState) {
            if ((this.MoveInCostRetrieveOperationCompleted == null)) {
                this.MoveInCostRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInCostRetrieveOperationCompleted);
            }
            this.InvokeAsync("MoveInCostRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate}, this.MoveInCostRetrieveOperationCompleted, userState);
        }
        
        private void OnMoveInCostRetrieveOperationCompleted(object arg) {
            if ((this.MoveInCostRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInCostRetrieveCompleted(this, new MoveInCostRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInCostRetrieve_28DayBilling", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInCostRetrieve_28DayBilling(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate) {
            object[] results = this.Invoke("MoveInCostRetrieve_28DayBilling", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInCostRetrieve_28DayBillingAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate) {
            this.MoveInCostRetrieve_28DayBillingAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iUnitID, dMoveInDate, null);
        }
        
        /// <remarks/>
        public void MoveInCostRetrieve_28DayBillingAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, object userState) {
            if ((this.MoveInCostRetrieve_28DayBillingOperationCompleted == null)) {
                this.MoveInCostRetrieve_28DayBillingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInCostRetrieve_28DayBillingOperationCompleted);
            }
            this.InvokeAsync("MoveInCostRetrieve_28DayBilling", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate}, this.MoveInCostRetrieve_28DayBillingOperationCompleted, userState);
        }
        
        private void OnMoveInCostRetrieve_28DayBillingOperationCompleted(object arg) {
            if ((this.MoveInCostRetrieve_28DayBillingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInCostRetrieve_28DayBillingCompleted(this, new MoveInCostRetrieve_28DayBillingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInCostRetrieveWithDiscount", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInCostRetrieveWithDiscount(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID) {
            object[] results = this.Invoke("MoveInCostRetrieveWithDiscount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate,
                        InsuranceCoverageID,
                        ConcessionPlanID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveWithDiscountAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID) {
            this.MoveInCostRetrieveWithDiscountAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iUnitID, dMoveInDate, InsuranceCoverageID, ConcessionPlanID, null);
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveWithDiscountAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID, object userState) {
            if ((this.MoveInCostRetrieveWithDiscountOperationCompleted == null)) {
                this.MoveInCostRetrieveWithDiscountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInCostRetrieveWithDiscountOperationCompleted);
            }
            this.InvokeAsync("MoveInCostRetrieveWithDiscount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate,
                        InsuranceCoverageID,
                        ConcessionPlanID}, this.MoveInCostRetrieveWithDiscountOperationCompleted, userState);
        }
        
        private void OnMoveInCostRetrieveWithDiscountOperationCompleted(object arg) {
            if ((this.MoveInCostRetrieveWithDiscountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInCostRetrieveWithDiscountCompleted(this, new MoveInCostRetrieveWithDiscountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CustomerAccountsBalanceDetailsWithDi" +
            "scount", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CustomerAccountsBalanceDetailsWithDiscount(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, int ConcessionPlanID) {
            object[] results = this.Invoke("CustomerAccountsBalanceDetailsWithDiscount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        ConcessionPlanID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerAccountsBalanceDetailsWithDiscountAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, int ConcessionPlanID) {
            this.CustomerAccountsBalanceDetailsWithDiscountAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iUnitID, ConcessionPlanID, null);
        }
        
        /// <remarks/>
        public void CustomerAccountsBalanceDetailsWithDiscountAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, int ConcessionPlanID, object userState) {
            if ((this.CustomerAccountsBalanceDetailsWithDiscountOperationCompleted == null)) {
                this.CustomerAccountsBalanceDetailsWithDiscountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerAccountsBalanceDetailsWithDiscountOperationCompleted);
            }
            this.InvokeAsync("CustomerAccountsBalanceDetailsWithDiscount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        ConcessionPlanID}, this.CustomerAccountsBalanceDetailsWithDiscountOperationCompleted, userState);
        }
        
        private void OnCustomerAccountsBalanceDetailsWithDiscountOperationCompleted(object arg) {
            if ((this.CustomerAccountsBalanceDetailsWithDiscountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerAccountsBalanceDetailsWithDiscountCompleted(this, new CustomerAccountsBalanceDetailsWithDiscountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInCostRetrieveWithDiscount_28Day" +
            "Billing", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInCostRetrieveWithDiscount_28DayBilling(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID) {
            object[] results = this.Invoke("MoveInCostRetrieveWithDiscount_28DayBilling", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate,
                        InsuranceCoverageID,
                        ConcessionPlanID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveWithDiscount_28DayBillingAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID) {
            this.MoveInCostRetrieveWithDiscount_28DayBillingAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iUnitID, dMoveInDate, InsuranceCoverageID, ConcessionPlanID, null);
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveWithDiscount_28DayBillingAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID, object userState) {
            if ((this.MoveInCostRetrieveWithDiscount_28DayBillingOperationCompleted == null)) {
                this.MoveInCostRetrieveWithDiscount_28DayBillingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInCostRetrieveWithDiscount_28DayBillingOperationCompleted);
            }
            this.InvokeAsync("MoveInCostRetrieveWithDiscount_28DayBilling", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate,
                        InsuranceCoverageID,
                        ConcessionPlanID}, this.MoveInCostRetrieveWithDiscount_28DayBillingOperationCompleted, userState);
        }
        
        private void OnMoveInCostRetrieveWithDiscount_28DayBillingOperationCompleted(object arg) {
            if ((this.MoveInCostRetrieveWithDiscount_28DayBillingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInCostRetrieveWithDiscount_28DayBillingCompleted(this, new MoveInCostRetrieveWithDiscount_28DayBillingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInCostRetrieveWithDiscount_28Day" +
            "Billing_Reservation", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInCostRetrieveWithDiscount_28DayBilling_Reservation(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID, int WaitingID) {
            object[] results = this.Invoke("MoveInCostRetrieveWithDiscount_28DayBilling_Reservation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        WaitingID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveWithDiscount_28DayBilling_ReservationAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID, int WaitingID) {
            this.MoveInCostRetrieveWithDiscount_28DayBilling_ReservationAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iUnitID, dMoveInDate, InsuranceCoverageID, ConcessionPlanID, WaitingID, null);
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveWithDiscount_28DayBilling_ReservationAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID, int WaitingID, object userState) {
            if ((this.MoveInCostRetrieveWithDiscount_28DayBilling_ReservationOperationCompleted == null)) {
                this.MoveInCostRetrieveWithDiscount_28DayBilling_ReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInCostRetrieveWithDiscount_28DayBilling_ReservationOperationCompleted);
            }
            this.InvokeAsync("MoveInCostRetrieveWithDiscount_28DayBilling_Reservation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        WaitingID}, this.MoveInCostRetrieveWithDiscount_28DayBilling_ReservationOperationCompleted, userState);
        }
        
        private void OnMoveInCostRetrieveWithDiscount_28DayBilling_ReservationOperationCompleted(object arg) {
            if ((this.MoveInCostRetrieveWithDiscount_28DayBilling_ReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInCostRetrieveWithDiscount_28DayBilling_ReservationCompleted(this, new MoveInCostRetrieveWithDiscount_28DayBilling_ReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInCostRetrieveWithDiscount_Reser" +
            "vation", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInCostRetrieveWithDiscount_Reservation(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID, int WaitingID) {
            object[] results = this.Invoke("MoveInCostRetrieveWithDiscount_Reservation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        WaitingID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveWithDiscount_ReservationAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID, int WaitingID) {
            this.MoveInCostRetrieveWithDiscount_ReservationAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iUnitID, dMoveInDate, InsuranceCoverageID, ConcessionPlanID, WaitingID, null);
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveWithDiscount_ReservationAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID, int WaitingID, object userState) {
            if ((this.MoveInCostRetrieveWithDiscount_ReservationOperationCompleted == null)) {
                this.MoveInCostRetrieveWithDiscount_ReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInCostRetrieveWithDiscount_ReservationOperationCompleted);
            }
            this.InvokeAsync("MoveInCostRetrieveWithDiscount_Reservation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        WaitingID}, this.MoveInCostRetrieveWithDiscount_ReservationOperationCompleted, userState);
        }
        
        private void OnMoveInCostRetrieveWithDiscount_ReservationOperationCompleted(object arg) {
            if ((this.MoveInCostRetrieveWithDiscount_ReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInCostRetrieveWithDiscount_ReservationCompleted(this, new MoveInCostRetrieveWithDiscount_ReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInCostRetrieveWithPushRate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInCostRetrieveWithPushRate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID) {
            object[] results = this.Invoke("MoveInCostRetrieveWithPushRate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate,
                        InsuranceCoverageID,
                        ConcessionPlanID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveWithPushRateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID) {
            this.MoveInCostRetrieveWithPushRateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iUnitID, dMoveInDate, InsuranceCoverageID, ConcessionPlanID, null);
        }
        
        /// <remarks/>
        public void MoveInCostRetrieveWithPushRateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, System.DateTime dMoveInDate, int InsuranceCoverageID, int ConcessionPlanID, object userState) {
            if ((this.MoveInCostRetrieveWithPushRateOperationCompleted == null)) {
                this.MoveInCostRetrieveWithPushRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInCostRetrieveWithPushRateOperationCompleted);
            }
            this.InvokeAsync("MoveInCostRetrieveWithPushRate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        dMoveInDate,
                        InsuranceCoverageID,
                        ConcessionPlanID}, this.MoveInCostRetrieveWithPushRateOperationCompleted, userState);
        }
        
        private void OnMoveInCostRetrieveWithPushRateOperationCompleted(object arg) {
            if ((this.MoveInCostRetrieveWithPushRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInCostRetrieveWithPushRateCompleted(this, new MoveInCostRetrieveWithPushRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveIn", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveIn(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode) {
            object[] results = this.Invoke("MoveIn", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode) {
            this.MoveInAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, sAccessCode, UnitID, dStartDate, dEndDate, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, bTestMode, null);
        }
        
        /// <remarks/>
        public void MoveInAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    object userState) {
            if ((this.MoveInOperationCompleted == null)) {
                this.MoveInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInOperationCompleted);
            }
            this.InvokeAsync("MoveIn", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode}, this.MoveInOperationCompleted, userState);
        }
        
        private void OnMoveInOperationCompleted(object arg) {
            if ((this.MoveInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInCompleted(this, new MoveInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInReservation", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInReservation(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode) {
            object[] results = this.Invoke("MoveInReservation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        TenantID,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInReservationAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode) {
            this.MoveInReservationAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, WaitingID, TenantID, UnitID, dStartDate, dEndDate, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, InsuranceCoverageID, ConcessionPlanID, bTestMode, null);
        }
        
        /// <remarks/>
        public void MoveInReservationAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode, 
                    object userState) {
            if ((this.MoveInReservationOperationCompleted == null)) {
                this.MoveInReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInReservationOperationCompleted);
            }
            this.InvokeAsync("MoveInReservation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        TenantID,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        bTestMode}, this.MoveInReservationOperationCompleted, userState);
        }
        
        private void OnMoveInReservationOperationCompleted(object arg) {
            if ((this.MoveInReservationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInReservationCompleted(this, new MoveInReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInReservation_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInReservation_v2(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode, 
                    int iSource) {
            object[] results = this.Invoke("MoveInReservation_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        TenantID,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        bTestMode,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInReservation_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode, 
                    int iSource) {
            this.MoveInReservation_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, WaitingID, TenantID, UnitID, dStartDate, dEndDate, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, InsuranceCoverageID, ConcessionPlanID, bTestMode, iSource, null);
        }
        
        /// <remarks/>
        public void MoveInReservation_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode, 
                    int iSource, 
                    object userState) {
            if ((this.MoveInReservation_v2OperationCompleted == null)) {
                this.MoveInReservation_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInReservation_v2OperationCompleted);
            }
            this.InvokeAsync("MoveInReservation_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        TenantID,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        bTestMode,
                        iSource}, this.MoveInReservation_v2OperationCompleted, userState);
        }
        
        private void OnMoveInReservation_v2OperationCompleted(object arg) {
            if ((this.MoveInReservation_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInReservation_v2Completed(this, new MoveInReservation_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInReservation_v3", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInReservation_v3(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iPayMethod, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    int iSource, 
                    bool bTestMode) {
            object[] results = this.Invoke("MoveInReservation_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        TenantID,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        iPayMethod,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType,
                        iSource,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInReservation_v3Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iPayMethod, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    int iSource, 
                    bool bTestMode) {
            this.MoveInReservation_v3Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, WaitingID, TenantID, UnitID, dStartDate, dEndDate, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, InsuranceCoverageID, ConcessionPlanID, iPayMethod, sABARoutingNum, sAccountNum, iAccountType, iSource, bTestMode, null);
        }
        
        /// <remarks/>
        public void MoveInReservation_v3Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iPayMethod, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    int iSource, 
                    bool bTestMode, 
                    object userState) {
            if ((this.MoveInReservation_v3OperationCompleted == null)) {
                this.MoveInReservation_v3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInReservation_v3OperationCompleted);
            }
            this.InvokeAsync("MoveInReservation_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        TenantID,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        iPayMethod,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType,
                        iSource,
                        bTestMode}, this.MoveInReservation_v3OperationCompleted, userState);
        }
        
        private void OnMoveInReservation_v3OperationCompleted(object arg) {
            if ((this.MoveInReservation_v3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInReservation_v3Completed(this, new MoveInReservation_v3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInReservation_28DayBilling", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInReservation_28DayBilling(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode) {
            object[] results = this.Invoke("MoveInReservation_28DayBilling", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        TenantID,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInReservation_28DayBillingAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode) {
            this.MoveInReservation_28DayBillingAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, WaitingID, TenantID, UnitID, dStartDate, dEndDate, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, InsuranceCoverageID, ConcessionPlanID, bTestMode, null);
        }
        
        /// <remarks/>
        public void MoveInReservation_28DayBillingAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    int TenantID, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode, 
                    object userState) {
            if ((this.MoveInReservation_28DayBillingOperationCompleted == null)) {
                this.MoveInReservation_28DayBillingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInReservation_28DayBillingOperationCompleted);
            }
            this.InvokeAsync("MoveInReservation_28DayBilling", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        TenantID,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        bTestMode}, this.MoveInReservation_28DayBillingOperationCompleted, userState);
        }
        
        private void OnMoveInReservation_28DayBillingOperationCompleted(object arg) {
            if ((this.MoveInReservation_28DayBillingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInReservation_28DayBillingCompleted(this, new MoveInReservation_28DayBillingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInWithDiscount", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInWithDiscount(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode) {
            object[] results = this.Invoke("MoveInWithDiscount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInWithDiscountAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode) {
            this.MoveInWithDiscountAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, sAccessCode, UnitID, dStartDate, dEndDate, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, InsuranceCoverageID, ConcessionPlanID, bTestMode, null);
        }
        
        /// <remarks/>
        public void MoveInWithDiscountAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode, 
                    object userState) {
            if ((this.MoveInWithDiscountOperationCompleted == null)) {
                this.MoveInWithDiscountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInWithDiscountOperationCompleted);
            }
            this.InvokeAsync("MoveInWithDiscount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        bTestMode}, this.MoveInWithDiscountOperationCompleted, userState);
        }
        
        private void OnMoveInWithDiscountOperationCompleted(object arg) {
            if ((this.MoveInWithDiscountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInWithDiscountCompleted(this, new MoveInWithDiscountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInWithDiscount_28DayBilling", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInWithDiscount_28DayBilling(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode) {
            object[] results = this.Invoke("MoveInWithDiscount_28DayBilling", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInWithDiscount_28DayBillingAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode) {
            this.MoveInWithDiscount_28DayBillingAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, sAccessCode, UnitID, dStartDate, dEndDate, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, InsuranceCoverageID, ConcessionPlanID, bTestMode, null);
        }
        
        /// <remarks/>
        public void MoveInWithDiscount_28DayBillingAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    bool bTestMode, 
                    object userState) {
            if ((this.MoveInWithDiscount_28DayBillingOperationCompleted == null)) {
                this.MoveInWithDiscount_28DayBillingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInWithDiscount_28DayBillingOperationCompleted);
            }
            this.InvokeAsync("MoveInWithDiscount_28DayBilling", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        bTestMode}, this.MoveInWithDiscount_28DayBillingOperationCompleted, userState);
        }
        
        private void OnMoveInWithDiscount_28DayBillingOperationCompleted(object arg) {
            if ((this.MoveInWithDiscount_28DayBillingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInWithDiscount_28DayBillingCompleted(this, new MoveInWithDiscount_28DayBillingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInWithDiscount_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInWithDiscount_v2(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iSource, 
                    string sSource, 
                    bool bUsePushRate, 
                    bool bTestMode) {
            object[] results = this.Invoke("MoveInWithDiscount_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        iSource,
                        sSource,
                        bUsePushRate,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInWithDiscount_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iSource, 
                    string sSource, 
                    bool bUsePushRate, 
                    bool bTestMode) {
            this.MoveInWithDiscount_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, sAccessCode, UnitID, dStartDate, dEndDate, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, InsuranceCoverageID, ConcessionPlanID, iSource, sSource, bUsePushRate, bTestMode, null);
        }
        
        /// <remarks/>
        public void MoveInWithDiscount_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iSource, 
                    string sSource, 
                    bool bUsePushRate, 
                    bool bTestMode, 
                    object userState) {
            if ((this.MoveInWithDiscount_v2OperationCompleted == null)) {
                this.MoveInWithDiscount_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInWithDiscount_v2OperationCompleted);
            }
            this.InvokeAsync("MoveInWithDiscount_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        iSource,
                        sSource,
                        bUsePushRate,
                        bTestMode}, this.MoveInWithDiscount_v2OperationCompleted, userState);
        }
        
        private void OnMoveInWithDiscount_v2OperationCompleted(object arg) {
            if ((this.MoveInWithDiscount_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInWithDiscount_v2Completed(this, new MoveInWithDiscount_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInWithDiscount_v3", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInWithDiscount_v3(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iSource, 
                    string sSource, 
                    bool bUsePushRate, 
                    int iPayMethod, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    bool bTestMode) {
            object[] results = this.Invoke("MoveInWithDiscount_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        iSource,
                        sSource,
                        bUsePushRate,
                        iPayMethod,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInWithDiscount_v3Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iSource, 
                    string sSource, 
                    bool bUsePushRate, 
                    int iPayMethod, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    bool bTestMode) {
            this.MoveInWithDiscount_v3Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, sAccessCode, UnitID, dStartDate, dEndDate, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, InsuranceCoverageID, ConcessionPlanID, iSource, sSource, bUsePushRate, iPayMethod, sABARoutingNum, sAccountNum, iAccountType, bTestMode, null);
        }
        
        /// <remarks/>
        public void MoveInWithDiscount_v3Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iSource, 
                    string sSource, 
                    bool bUsePushRate, 
                    int iPayMethod, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    bool bTestMode, 
                    object userState) {
            if ((this.MoveInWithDiscount_v3OperationCompleted == null)) {
                this.MoveInWithDiscount_v3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInWithDiscount_v3OperationCompleted);
            }
            this.InvokeAsync("MoveInWithDiscount_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        iSource,
                        sSource,
                        bUsePushRate,
                        iPayMethod,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType,
                        bTestMode}, this.MoveInWithDiscount_v3OperationCompleted, userState);
        }
        
        private void OnMoveInWithDiscount_v3OperationCompleted(object arg) {
            if ((this.MoveInWithDiscount_v3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInWithDiscount_v3Completed(this, new MoveInWithDiscount_v3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInWithDiscount_v4", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInWithDiscount_v4(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iSource, 
                    string sSource, 
                    bool bUsePushRate, 
                    int iPayMethod, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    int iKeypadZoneID, 
                    int iTimeZoneID, 
                    int iBillingFrequency, 
                    int WaitingID, 
                    bool bTestMode) {
            object[] results = this.Invoke("MoveInWithDiscount_v4", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        sCCTrack2,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        iSource,
                        sSource,
                        bUsePushRate,
                        iPayMethod,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType,
                        iKeypadZoneID,
                        iTimeZoneID,
                        iBillingFrequency,
                        WaitingID,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInWithDiscount_v4Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iSource, 
                    string sSource, 
                    bool bUsePushRate, 
                    int iPayMethod, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    int iKeypadZoneID, 
                    int iTimeZoneID, 
                    int iBillingFrequency, 
                    int WaitingID, 
                    bool bTestMode) {
            this.MoveInWithDiscount_v4Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, sAccessCode, UnitID, dStartDate, dEndDate, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, sCCTrack2, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, InsuranceCoverageID, ConcessionPlanID, iSource, sSource, bUsePushRate, iPayMethod, sABARoutingNum, sAccountNum, iAccountType, iKeypadZoneID, iTimeZoneID, iBillingFrequency, WaitingID, bTestMode, null);
        }
        
        /// <remarks/>
        public void MoveInWithDiscount_v4Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    string sAccessCode, 
                    int UnitID, 
                    System.DateTime dStartDate, 
                    System.DateTime dEndDate, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    int InsuranceCoverageID, 
                    int ConcessionPlanID, 
                    int iSource, 
                    string sSource, 
                    bool bUsePushRate, 
                    int iPayMethod, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    int iKeypadZoneID, 
                    int iTimeZoneID, 
                    int iBillingFrequency, 
                    int WaitingID, 
                    bool bTestMode, 
                    object userState) {
            if ((this.MoveInWithDiscount_v4OperationCompleted == null)) {
                this.MoveInWithDiscount_v4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInWithDiscount_v4OperationCompleted);
            }
            this.InvokeAsync("MoveInWithDiscount_v4", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sAccessCode,
                        UnitID,
                        dStartDate,
                        dEndDate,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        sCCTrack2,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        InsuranceCoverageID,
                        ConcessionPlanID,
                        iSource,
                        sSource,
                        bUsePushRate,
                        iPayMethod,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType,
                        iKeypadZoneID,
                        iTimeZoneID,
                        iBillingFrequency,
                        WaitingID,
                        bTestMode}, this.MoveInWithDiscount_v4OperationCompleted, userState);
        }
        
        private void OnMoveInWithDiscount_v4OperationCompleted(object arg) {
            if ((this.MoveInWithDiscount_v4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInWithDiscount_v4Completed(this, new MoveInWithDiscount_v4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveOut", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveOut(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int TenantID, int UnitID) {
            object[] results = this.Invoke("MoveOut", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        TenantID,
                        UnitID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveOutAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int TenantID, int UnitID) {
            this.MoveOutAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, TenantID, UnitID, null);
        }
        
        /// <remarks/>
        public void MoveOutAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, int TenantID, int UnitID, object userState) {
            if ((this.MoveOutOperationCompleted == null)) {
                this.MoveOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveOutOperationCompleted);
            }
            this.InvokeAsync("MoveOut", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword,
                        TenantID,
                        UnitID}, this.MoveOutOperationCompleted, userState);
        }
        
        private void OnMoveOutOperationCompleted(object arg) {
            if ((this.MoveOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveOutCompleted(this, new MoveOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantUpdate(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sGateCode, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN) {
            object[] results = this.Invoke("TenantUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        sGateCode,
                        sWebPassword,
                        sMrMrs,
                        sFName,
                        sMI,
                        sLName,
                        sCompany,
                        sAddr1,
                        sAddr2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sMrMrsAlt,
                        sFNameAlt,
                        sMIAlt,
                        sLNameAlt,
                        sAddr1Alt,
                        sAddr2Alt,
                        sCityAlt,
                        sRegionAlt,
                        sPostalCodeAlt,
                        sCountryAlt,
                        sPhoneAlt,
                        sMrMrsBus,
                        sFNameBus,
                        sMIBus,
                        sLNameBus,
                        sCompanyBus,
                        sAddr1Bus,
                        sAddr2Bus,
                        sCityBus,
                        sRegionBus,
                        sPostalCodeBus,
                        sCountryBus,
                        sPhoneBus,
                        sFax,
                        sEmail,
                        sPager,
                        sMobile,
                        bCommercial,
                        bCompanyIsTenant,
                        dDOB,
                        sTenNote,
                        sLicense,
                        sLicRegion,
                        sSSN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantUpdateAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sGateCode, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN) {
            this.TenantUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, sGateCode, sWebPassword, sMrMrs, sFName, sMI, sLName, sCompany, sAddr1, sAddr2, sCity, sRegion, sPostalCode, sCountry, sPhone, sMrMrsAlt, sFNameAlt, sMIAlt, sLNameAlt, sAddr1Alt, sAddr2Alt, sCityAlt, sRegionAlt, sPostalCodeAlt, sCountryAlt, sPhoneAlt, sMrMrsBus, sFNameBus, sMIBus, sLNameBus, sCompanyBus, sAddr1Bus, sAddr2Bus, sCityBus, sRegionBus, sPostalCodeBus, sCountryBus, sPhoneBus, sFax, sEmail, sPager, sMobile, bCommercial, bCompanyIsTenant, dDOB, sTenNote, sLicense, sLicRegion, sSSN, null);
        }
        
        /// <remarks/>
        public void TenantUpdateAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sGateCode, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN, 
                    object userState) {
            if ((this.TenantUpdateOperationCompleted == null)) {
                this.TenantUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantUpdateOperationCompleted);
            }
            this.InvokeAsync("TenantUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        sGateCode,
                        sWebPassword,
                        sMrMrs,
                        sFName,
                        sMI,
                        sLName,
                        sCompany,
                        sAddr1,
                        sAddr2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sMrMrsAlt,
                        sFNameAlt,
                        sMIAlt,
                        sLNameAlt,
                        sAddr1Alt,
                        sAddr2Alt,
                        sCityAlt,
                        sRegionAlt,
                        sPostalCodeAlt,
                        sCountryAlt,
                        sPhoneAlt,
                        sMrMrsBus,
                        sFNameBus,
                        sMIBus,
                        sLNameBus,
                        sCompanyBus,
                        sAddr1Bus,
                        sAddr2Bus,
                        sCityBus,
                        sRegionBus,
                        sPostalCodeBus,
                        sCountryBus,
                        sPhoneBus,
                        sFax,
                        sEmail,
                        sPager,
                        sMobile,
                        bCommercial,
                        bCompanyIsTenant,
                        dDOB,
                        sTenNote,
                        sLicense,
                        sLicRegion,
                        sSSN}, this.TenantUpdateOperationCompleted, userState);
        }
        
        private void OnTenantUpdateOperationCompleted(object arg) {
            if ((this.TenantUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantUpdateCompleted(this, new TenantUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantUpdate_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantUpdate_v2(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sGateCode, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN, 
                    string sEmailAlt, 
                    string sRelationshipAlt) {
            object[] results = this.Invoke("TenantUpdate_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        sGateCode,
                        sWebPassword,
                        sMrMrs,
                        sFName,
                        sMI,
                        sLName,
                        sCompany,
                        sAddr1,
                        sAddr2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sMrMrsAlt,
                        sFNameAlt,
                        sMIAlt,
                        sLNameAlt,
                        sAddr1Alt,
                        sAddr2Alt,
                        sCityAlt,
                        sRegionAlt,
                        sPostalCodeAlt,
                        sCountryAlt,
                        sPhoneAlt,
                        sMrMrsBus,
                        sFNameBus,
                        sMIBus,
                        sLNameBus,
                        sCompanyBus,
                        sAddr1Bus,
                        sAddr2Bus,
                        sCityBus,
                        sRegionBus,
                        sPostalCodeBus,
                        sCountryBus,
                        sPhoneBus,
                        sFax,
                        sEmail,
                        sPager,
                        sMobile,
                        bCommercial,
                        bCompanyIsTenant,
                        dDOB,
                        sTenNote,
                        sLicense,
                        sLicRegion,
                        sSSN,
                        sEmailAlt,
                        sRelationshipAlt});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantUpdate_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sGateCode, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN, 
                    string sEmailAlt, 
                    string sRelationshipAlt) {
            this.TenantUpdate_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, sGateCode, sWebPassword, sMrMrs, sFName, sMI, sLName, sCompany, sAddr1, sAddr2, sCity, sRegion, sPostalCode, sCountry, sPhone, sMrMrsAlt, sFNameAlt, sMIAlt, sLNameAlt, sAddr1Alt, sAddr2Alt, sCityAlt, sRegionAlt, sPostalCodeAlt, sCountryAlt, sPhoneAlt, sMrMrsBus, sFNameBus, sMIBus, sLNameBus, sCompanyBus, sAddr1Bus, sAddr2Bus, sCityBus, sRegionBus, sPostalCodeBus, sCountryBus, sPhoneBus, sFax, sEmail, sPager, sMobile, bCommercial, bCompanyIsTenant, dDOB, sTenNote, sLicense, sLicRegion, sSSN, sEmailAlt, sRelationshipAlt, null);
        }
        
        /// <remarks/>
        public void TenantUpdate_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sGateCode, 
                    string sWebPassword, 
                    string sMrMrs, 
                    string sFName, 
                    string sMI, 
                    string sLName, 
                    string sCompany, 
                    string sAddr1, 
                    string sAddr2, 
                    string sCity, 
                    string sRegion, 
                    string sPostalCode, 
                    string sCountry, 
                    string sPhone, 
                    string sMrMrsAlt, 
                    string sFNameAlt, 
                    string sMIAlt, 
                    string sLNameAlt, 
                    string sAddr1Alt, 
                    string sAddr2Alt, 
                    string sCityAlt, 
                    string sRegionAlt, 
                    string sPostalCodeAlt, 
                    string sCountryAlt, 
                    string sPhoneAlt, 
                    string sMrMrsBus, 
                    string sFNameBus, 
                    string sMIBus, 
                    string sLNameBus, 
                    string sCompanyBus, 
                    string sAddr1Bus, 
                    string sAddr2Bus, 
                    string sCityBus, 
                    string sRegionBus, 
                    string sPostalCodeBus, 
                    string sCountryBus, 
                    string sPhoneBus, 
                    string sFax, 
                    string sEmail, 
                    string sPager, 
                    string sMobile, 
                    bool bCommercial, 
                    bool bCompanyIsTenant, 
                    System.DateTime dDOB, 
                    string sTenNote, 
                    string sLicense, 
                    string sLicRegion, 
                    string sSSN, 
                    string sEmailAlt, 
                    string sRelationshipAlt, 
                    object userState) {
            if ((this.TenantUpdate_v2OperationCompleted == null)) {
                this.TenantUpdate_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantUpdate_v2OperationCompleted);
            }
            this.InvokeAsync("TenantUpdate_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        sGateCode,
                        sWebPassword,
                        sMrMrs,
                        sFName,
                        sMI,
                        sLName,
                        sCompany,
                        sAddr1,
                        sAddr2,
                        sCity,
                        sRegion,
                        sPostalCode,
                        sCountry,
                        sPhone,
                        sMrMrsAlt,
                        sFNameAlt,
                        sMIAlt,
                        sLNameAlt,
                        sAddr1Alt,
                        sAddr2Alt,
                        sCityAlt,
                        sRegionAlt,
                        sPostalCodeAlt,
                        sCountryAlt,
                        sPhoneAlt,
                        sMrMrsBus,
                        sFNameBus,
                        sMIBus,
                        sLNameBus,
                        sCompanyBus,
                        sAddr1Bus,
                        sAddr2Bus,
                        sCityBus,
                        sRegionBus,
                        sPostalCodeBus,
                        sCountryBus,
                        sPhoneBus,
                        sFax,
                        sEmail,
                        sPager,
                        sMobile,
                        bCommercial,
                        bCompanyIsTenant,
                        dDOB,
                        sTenNote,
                        sLicense,
                        sLicRegion,
                        sSSN,
                        sEmailAlt,
                        sRelationshipAlt}, this.TenantUpdate_v2OperationCompleted, userState);
        }
        
        private void OnTenantUpdate_v2OperationCompleted(object arg) {
            if ((this.TenantUpdate_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantUpdate_v2Completed(this, new TenantUpdate_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantUpdate_AdditionalContact", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantUpdate_AdditionalContact(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sMrMrsAdd, 
                    string sFNameAdd, 
                    string sMIAdd, 
                    string sLNameAdd, 
                    string sAddr1Add, 
                    string sAddr2Add, 
                    string sCityAdd, 
                    string sRegionAdd, 
                    string sPostalCodeAdd, 
                    string sCountryAdd, 
                    string sPhoneAdd, 
                    string sEmailAdd) {
            object[] results = this.Invoke("TenantUpdate_AdditionalContact", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        sMrMrsAdd,
                        sFNameAdd,
                        sMIAdd,
                        sLNameAdd,
                        sAddr1Add,
                        sAddr2Add,
                        sCityAdd,
                        sRegionAdd,
                        sPostalCodeAdd,
                        sCountryAdd,
                        sPhoneAdd,
                        sEmailAdd});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantUpdate_AdditionalContactAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sMrMrsAdd, 
                    string sFNameAdd, 
                    string sMIAdd, 
                    string sLNameAdd, 
                    string sAddr1Add, 
                    string sAddr2Add, 
                    string sCityAdd, 
                    string sRegionAdd, 
                    string sPostalCodeAdd, 
                    string sCountryAdd, 
                    string sPhoneAdd, 
                    string sEmailAdd) {
            this.TenantUpdate_AdditionalContactAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, sMrMrsAdd, sFNameAdd, sMIAdd, sLNameAdd, sAddr1Add, sAddr2Add, sCityAdd, sRegionAdd, sPostalCodeAdd, sCountryAdd, sPhoneAdd, sEmailAdd, null);
        }
        
        /// <remarks/>
        public void TenantUpdate_AdditionalContactAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sMrMrsAdd, 
                    string sFNameAdd, 
                    string sMIAdd, 
                    string sLNameAdd, 
                    string sAddr1Add, 
                    string sAddr2Add, 
                    string sCityAdd, 
                    string sRegionAdd, 
                    string sPostalCodeAdd, 
                    string sCountryAdd, 
                    string sPhoneAdd, 
                    string sEmailAdd, 
                    object userState) {
            if ((this.TenantUpdate_AdditionalContactOperationCompleted == null)) {
                this.TenantUpdate_AdditionalContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantUpdate_AdditionalContactOperationCompleted);
            }
            this.InvokeAsync("TenantUpdate_AdditionalContact", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        sMrMrsAdd,
                        sFNameAdd,
                        sMIAdd,
                        sLNameAdd,
                        sAddr1Add,
                        sAddr2Add,
                        sCityAdd,
                        sRegionAdd,
                        sPostalCodeAdd,
                        sCountryAdd,
                        sPhoneAdd,
                        sEmailAdd}, this.TenantUpdate_AdditionalContactOperationCompleted, userState);
        }
        
        private void OnTenantUpdate_AdditionalContactOperationCompleted(object arg) {
            if ((this.TenantUpdate_AdditionalContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantUpdate_AdditionalContactCompleted(this, new TenantUpdate_AdditionalContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantUpdate_NationalAccount", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantUpdate_NationalAccount(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNationalMasterAcct, int iNationalFranchiseAcct) {
            object[] results = this.Invoke("TenantUpdate_NationalAccount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iNationalMasterAcct,
                        iNationalFranchiseAcct});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantUpdate_NationalAccountAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNationalMasterAcct, int iNationalFranchiseAcct) {
            this.TenantUpdate_NationalAccountAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iNationalMasterAcct, iNationalFranchiseAcct, null);
        }
        
        /// <remarks/>
        public void TenantUpdate_NationalAccountAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNationalMasterAcct, int iNationalFranchiseAcct, object userState) {
            if ((this.TenantUpdate_NationalAccountOperationCompleted == null)) {
                this.TenantUpdate_NationalAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantUpdate_NationalAccountOperationCompleted);
            }
            this.InvokeAsync("TenantUpdate_NationalAccount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iNationalMasterAcct,
                        iNationalFranchiseAcct}, this.TenantUpdate_NationalAccountOperationCompleted, userState);
        }
        
        private void OnTenantUpdate_NationalAccountOperationCompleted(object arg) {
            if ((this.TenantUpdate_NationalAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantUpdate_NationalAccountCompleted(this, new TenantUpdate_NationalAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantImageUpload", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantImageUpload(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] aryImageBytes, string sFileName) {
            object[] results = this.Invoke("TenantImageUpload", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        aryImageBytes,
                        sFileName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantImageUploadAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, byte[] aryImageBytes, string sFileName) {
            this.TenantImageUploadAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, aryImageBytes, sFileName, null);
        }
        
        /// <remarks/>
        public void TenantImageUploadAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, byte[] aryImageBytes, string sFileName, object userState) {
            if ((this.TenantImageUploadOperationCompleted == null)) {
                this.TenantImageUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantImageUploadOperationCompleted);
            }
            this.InvokeAsync("TenantImageUpload", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        aryImageBytes,
                        sFileName}, this.TenantImageUploadOperationCompleted, userState);
        }
        
        private void OnTenantImageUploadOperationCompleted(object arg) {
            if ((this.TenantImageUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantImageUploadCompleted(this, new TenantImageUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantImagePathUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantImagePathUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iPictureNum, string sFullImagePath, bool bSetPrimaryPic) {
            object[] results = this.Invoke("TenantImagePathUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iPictureNum,
                        sFullImagePath,
                        bSetPrimaryPic});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantImagePathUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iPictureNum, string sFullImagePath, bool bSetPrimaryPic) {
            this.TenantImagePathUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iPictureNum, sFullImagePath, bSetPrimaryPic, null);
        }
        
        /// <remarks/>
        public void TenantImagePathUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iPictureNum, string sFullImagePath, bool bSetPrimaryPic, object userState) {
            if ((this.TenantImagePathUpdateOperationCompleted == null)) {
                this.TenantImagePathUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantImagePathUpdateOperationCompleted);
            }
            this.InvokeAsync("TenantImagePathUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iPictureNum,
                        sFullImagePath,
                        bSetPrimaryPic}, this.TenantImagePathUpdateOperationCompleted, userState);
        }
        
        private void OnTenantImagePathUpdateOperationCompleted(object arg) {
            if ((this.TenantImagePathUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantImagePathUpdateCompleted(this, new TenantImagePathUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantImagePathRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantImagePathRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iPictureNum) {
            object[] results = this.Invoke("TenantImagePathRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iPictureNum});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantImagePathRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iPictureNum) {
            this.TenantImagePathRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iPictureNum, null);
        }
        
        /// <remarks/>
        public void TenantImagePathRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iPictureNum, object userState) {
            if ((this.TenantImagePathRetrieveOperationCompleted == null)) {
                this.TenantImagePathRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantImagePathRetrieveOperationCompleted);
            }
            this.InvokeAsync("TenantImagePathRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iPictureNum}, this.TenantImagePathRetrieveOperationCompleted, userState);
        }
        
        private void OnTenantImagePathRetrieveOperationCompleted(object arg) {
            if ((this.TenantImagePathRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantImagePathRetrieveCompleted(this, new TenantImagePathRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PurchaseOrderNumberRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PurchaseOrderNumberRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID) {
            object[] results = this.Invoke("PurchaseOrderNumberRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseOrderNumberRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID) {
            this.PurchaseOrderNumberRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iUnitID, null);
        }
        
        /// <remarks/>
        public void PurchaseOrderNumberRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, object userState) {
            if ((this.PurchaseOrderNumberRetrieveOperationCompleted == null)) {
                this.PurchaseOrderNumberRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseOrderNumberRetrieveOperationCompleted);
            }
            this.InvokeAsync("PurchaseOrderNumberRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID}, this.PurchaseOrderNumberRetrieveOperationCompleted, userState);
        }
        
        private void OnPurchaseOrderNumberRetrieveOperationCompleted(object arg) {
            if ((this.PurchaseOrderNumberRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseOrderNumberRetrieveCompleted(this, new PurchaseOrderNumberRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PurchaseOrderNumberUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PurchaseOrderNumberUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, string sPurchaseOrderNumber) {
            object[] results = this.Invoke("PurchaseOrderNumberUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        sPurchaseOrderNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseOrderNumberUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, string sPurchaseOrderNumber) {
            this.PurchaseOrderNumberUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iUnitID, sPurchaseOrderNumber, null);
        }
        
        /// <remarks/>
        public void PurchaseOrderNumberUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iUnitID, string sPurchaseOrderNumber, object userState) {
            if ((this.PurchaseOrderNumberUpdateOperationCompleted == null)) {
                this.PurchaseOrderNumberUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseOrderNumberUpdateOperationCompleted);
            }
            this.InvokeAsync("PurchaseOrderNumberUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iUnitID,
                        sPurchaseOrderNumber}, this.PurchaseOrderNumberUpdateOperationCompleted, userState);
        }
        
        private void OnPurchaseOrderNumberUpdateOperationCompleted(object arg) {
            if ((this.PurchaseOrderNumberUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseOrderNumberUpdateCompleted(this, new PurchaseOrderNumberUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitsInformation", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitsInformation(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("UnitsInformation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitsInformationAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.UnitsInformationAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void UnitsInformationAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.UnitsInformationOperationCompleted == null)) {
                this.UnitsInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitsInformationOperationCompleted);
            }
            this.InvokeAsync("UnitsInformation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.UnitsInformationOperationCompleted, userState);
        }
        
        private void OnUnitsInformationOperationCompleted(object arg) {
            if ((this.UnitsInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitsInformationCompleted(this, new UnitsInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitsInformation_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitsInformation_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string lngLastTimePolled) {
            object[] results = this.Invoke("UnitsInformation_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        lngLastTimePolled});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitsInformation_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string lngLastTimePolled) {
            this.UnitsInformation_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, lngLastTimePolled, null);
        }
        
        /// <remarks/>
        public void UnitsInformation_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string lngLastTimePolled, object userState) {
            if ((this.UnitsInformation_v2OperationCompleted == null)) {
                this.UnitsInformation_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitsInformation_v2OperationCompleted);
            }
            this.InvokeAsync("UnitsInformation_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        lngLastTimePolled}, this.UnitsInformation_v2OperationCompleted, userState);
        }
        
        private void OnUnitsInformation_v2OperationCompleted(object arg) {
            if ((this.UnitsInformation_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitsInformation_v2Completed(this, new UnitsInformation_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitsInformation_v3", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitsInformation_v3(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string lngLastTimePolled, bool bReturnExcludedFromWebsiteUnits) {
            object[] results = this.Invoke("UnitsInformation_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        lngLastTimePolled,
                        bReturnExcludedFromWebsiteUnits});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitsInformation_v3Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string lngLastTimePolled, bool bReturnExcludedFromWebsiteUnits) {
            this.UnitsInformation_v3Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, lngLastTimePolled, bReturnExcludedFromWebsiteUnits, null);
        }
        
        /// <remarks/>
        public void UnitsInformation_v3Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string lngLastTimePolled, bool bReturnExcludedFromWebsiteUnits, object userState) {
            if ((this.UnitsInformation_v3OperationCompleted == null)) {
                this.UnitsInformation_v3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitsInformation_v3OperationCompleted);
            }
            this.InvokeAsync("UnitsInformation_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        lngLastTimePolled,
                        bReturnExcludedFromWebsiteUnits}, this.UnitsInformation_v3OperationCompleted, userState);
        }
        
        private void OnUnitsInformation_v3OperationCompleted(object arg) {
            if ((this.UnitsInformation_v3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitsInformation_v3Completed(this, new UnitsInformation_v3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitsInformationByUnitName", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitsInformationByUnitName(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUnitName) {
            object[] results = this.Invoke("UnitsInformationByUnitName", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUnitName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitsInformationByUnitNameAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUnitName) {
            this.UnitsInformationByUnitNameAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUnitName, null);
        }
        
        /// <remarks/>
        public void UnitsInformationByUnitNameAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUnitName, object userState) {
            if ((this.UnitsInformationByUnitNameOperationCompleted == null)) {
                this.UnitsInformationByUnitNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitsInformationByUnitNameOperationCompleted);
            }
            this.InvokeAsync("UnitsInformationByUnitName", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUnitName}, this.UnitsInformationByUnitNameOperationCompleted, userState);
        }
        
        private void OnUnitsInformationByUnitNameOperationCompleted(object arg) {
            if ((this.UnitsInformationByUnitNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitsInformationByUnitNameCompleted(this, new UnitsInformationByUnitNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitsInformationByUnitID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitsInformationByUnitID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int UnitID) {
            object[] results = this.Invoke("UnitsInformationByUnitID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        UnitID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitsInformationByUnitIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int UnitID) {
            this.UnitsInformationByUnitIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, UnitID, null);
        }
        
        /// <remarks/>
        public void UnitsInformationByUnitIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int UnitID, object userState) {
            if ((this.UnitsInformationByUnitIDOperationCompleted == null)) {
                this.UnitsInformationByUnitIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitsInformationByUnitIDOperationCompleted);
            }
            this.InvokeAsync("UnitsInformationByUnitID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        UnitID}, this.UnitsInformationByUnitIDOperationCompleted, userState);
        }
        
        private void OnUnitsInformationByUnitIDOperationCompleted(object arg) {
            if ((this.UnitsInformationByUnitIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitsInformationByUnitIDCompleted(this, new UnitsInformationByUnitIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitsInformationAvailableUnitsOnly", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitsInformationAvailableUnitsOnly(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("UnitsInformationAvailableUnitsOnly", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitsInformationAvailableUnitsOnlyAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.UnitsInformationAvailableUnitsOnlyAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void UnitsInformationAvailableUnitsOnlyAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.UnitsInformationAvailableUnitsOnlyOperationCompleted == null)) {
                this.UnitsInformationAvailableUnitsOnlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitsInformationAvailableUnitsOnlyOperationCompleted);
            }
            this.InvokeAsync("UnitsInformationAvailableUnitsOnly", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.UnitsInformationAvailableUnitsOnlyOperationCompleted, userState);
        }
        
        private void OnUnitsInformationAvailableUnitsOnlyOperationCompleted(object arg) {
            if ((this.UnitsInformationAvailableUnitsOnlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitsInformationAvailableUnitsOnlyCompleted(this, new UnitsInformationAvailableUnitsOnlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitsInformationAvailableUnitsOnly_v" +
            "2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitsInformationAvailableUnitsOnly_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string lngLastTimePolled) {
            object[] results = this.Invoke("UnitsInformationAvailableUnitsOnly_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        lngLastTimePolled});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitsInformationAvailableUnitsOnly_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string lngLastTimePolled) {
            this.UnitsInformationAvailableUnitsOnly_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, lngLastTimePolled, null);
        }
        
        /// <remarks/>
        public void UnitsInformationAvailableUnitsOnly_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string lngLastTimePolled, object userState) {
            if ((this.UnitsInformationAvailableUnitsOnly_v2OperationCompleted == null)) {
                this.UnitsInformationAvailableUnitsOnly_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitsInformationAvailableUnitsOnly_v2OperationCompleted);
            }
            this.InvokeAsync("UnitsInformationAvailableUnitsOnly_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        lngLastTimePolled}, this.UnitsInformationAvailableUnitsOnly_v2OperationCompleted, userState);
        }
        
        private void OnUnitsInformationAvailableUnitsOnly_v2OperationCompleted(object arg) {
            if ((this.UnitsInformationAvailableUnitsOnly_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitsInformationAvailableUnitsOnly_v2Completed(this, new UnitsInformationAvailableUnitsOnly_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MapShapesRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MapShapesRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("MapShapesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MapShapesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.MapShapesRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void MapShapesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.MapShapesRetrieveOperationCompleted == null)) {
                this.MapShapesRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMapShapesRetrieveOperationCompleted);
            }
            this.InvokeAsync("MapShapesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.MapShapesRetrieveOperationCompleted, userState);
        }
        
        private void OnMapShapesRetrieveOperationCompleted(object arg) {
            if ((this.MapShapesRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MapShapesRetrieveCompleted(this, new MapShapesRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationFeeRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationFeeRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("ReservationFeeRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationFeeRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.ReservationFeeRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void ReservationFeeRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.ReservationFeeRetrieveOperationCompleted == null)) {
                this.ReservationFeeRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationFeeRetrieveOperationCompleted);
            }
            this.InvokeAsync("ReservationFeeRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.ReservationFeeRetrieveOperationCompleted, userState);
        }
        
        private void OnReservationFeeRetrieveOperationCompleted(object arg) {
            if ((this.ReservationFeeRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationFeeRetrieveCompleted(this, new ReservationFeeRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationList", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationList(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iGlobalWaitingNum) {
            object[] results = this.Invoke("ReservationList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iGlobalWaitingNum});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iGlobalWaitingNum) {
            this.ReservationListAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iGlobalWaitingNum, null);
        }
        
        /// <remarks/>
        public void ReservationListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iGlobalWaitingNum, object userState) {
            if ((this.ReservationListOperationCompleted == null)) {
                this.ReservationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationListOperationCompleted);
            }
            this.InvokeAsync("ReservationList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iGlobalWaitingNum}, this.ReservationListOperationCompleted, userState);
        }
        
        private void OnReservationListOperationCompleted(object arg) {
            if ((this.ReservationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationListCompleted(this, new ReservationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationList_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationList_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iGlobalWaitingNum, int WaitingID) {
            object[] results = this.Invoke("ReservationList_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iGlobalWaitingNum,
                        WaitingID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationList_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iGlobalWaitingNum, int WaitingID) {
            this.ReservationList_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iGlobalWaitingNum, WaitingID, null);
        }
        
        /// <remarks/>
        public void ReservationList_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iGlobalWaitingNum, int WaitingID, object userState) {
            if ((this.ReservationList_v2OperationCompleted == null)) {
                this.ReservationList_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationList_v2OperationCompleted);
            }
            this.InvokeAsync("ReservationList_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iGlobalWaitingNum,
                        WaitingID}, this.ReservationList_v2OperationCompleted, userState);
        }
        
        private void OnReservationList_v2OperationCompleted(object arg) {
            if ((this.ReservationList_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationList_v2Completed(this, new ReservationList_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationList_v3", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationList_v3(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iGlobalWaitingNum, int WaitingID) {
            object[] results = this.Invoke("ReservationList_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iGlobalWaitingNum,
                        WaitingID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationList_v3Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iGlobalWaitingNum, int WaitingID) {
            this.ReservationList_v3Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iGlobalWaitingNum, WaitingID, null);
        }
        
        /// <remarks/>
        public void ReservationList_v3Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iGlobalWaitingNum, int WaitingID, object userState) {
            if ((this.ReservationList_v3OperationCompleted == null)) {
                this.ReservationList_v3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationList_v3OperationCompleted);
            }
            this.InvokeAsync("ReservationList_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iGlobalWaitingNum,
                        WaitingID}, this.ReservationList_v3OperationCompleted, userState);
        }
        
        private void OnReservationList_v3OperationCompleted(object arg) {
            if ((this.ReservationList_v3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationList_v3Completed(this, new ReservationList_v3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationListByTenantID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationListByTenantID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID) {
            object[] results = this.Invoke("ReservationListByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationListByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID) {
            this.ReservationListByTenantIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, null);
        }
        
        /// <remarks/>
        public void ReservationListByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, object userState) {
            if ((this.ReservationListByTenantIDOperationCompleted == null)) {
                this.ReservationListByTenantIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationListByTenantIDOperationCompleted);
            }
            this.InvokeAsync("ReservationListByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID}, this.ReservationListByTenantIDOperationCompleted, userState);
        }
        
        private void OnReservationListByTenantIDOperationCompleted(object arg) {
            if ((this.ReservationListByTenantIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationListByTenantIDCompleted(this, new ReservationListByTenantIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantConnectSettingsRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantConnectSettingsRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword) {
            object[] results = this.Invoke("TenantConnectSettingsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantConnectSettingsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword) {
            this.TenantConnectSettingsRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, null);
        }
        
        /// <remarks/>
        public void TenantConnectSettingsRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, object userState) {
            if ((this.TenantConnectSettingsRetrieveOperationCompleted == null)) {
                this.TenantConnectSettingsRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantConnectSettingsRetrieveOperationCompleted);
            }
            this.InvokeAsync("TenantConnectSettingsRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword}, this.TenantConnectSettingsRetrieveOperationCompleted, userState);
        }
        
        private void OnTenantConnectSettingsRetrieveOperationCompleted(object arg) {
            if ((this.TenantConnectSettingsRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantConnectSettingsRetrieveCompleted(this, new TenantConnectSettingsRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantConnectSettingsUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantConnectSettingsUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantConnectEnabled, string sUsagePassword) {
            object[] results = this.Invoke("TenantConnectSettingsUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantConnectEnabled,
                        sUsagePassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantConnectSettingsUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantConnectEnabled, string sUsagePassword) {
            this.TenantConnectSettingsUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantConnectEnabled, sUsagePassword, null);
        }
        
        /// <remarks/>
        public void TenantConnectSettingsUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantConnectEnabled, string sUsagePassword, object userState) {
            if ((this.TenantConnectSettingsUpdateOperationCompleted == null)) {
                this.TenantConnectSettingsUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantConnectSettingsUpdateOperationCompleted);
            }
            this.InvokeAsync("TenantConnectSettingsUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantConnectEnabled,
                        sUsagePassword}, this.TenantConnectSettingsUpdateOperationCompleted, userState);
        }
        
        private void OnTenantConnectSettingsUpdateOperationCompleted(object arg) {
            if ((this.TenantConnectSettingsUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantConnectSettingsUpdateCompleted(this, new TenantConnectSettingsUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MoveInOutList", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MoveInOutList(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword) {
            object[] results = this.Invoke("MoveInOutList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveInOutListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword) {
            this.MoveInOutListAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUsagePassword, null);
        }
        
        /// <remarks/>
        public void MoveInOutListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUsagePassword, object userState) {
            if ((this.MoveInOutListOperationCompleted == null)) {
                this.MoveInOutListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveInOutListOperationCompleted);
            }
            this.InvokeAsync("MoveInOutList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUsagePassword}, this.MoveInOutListOperationCompleted, userState);
        }
        
        private void OnMoveInOutListOperationCompleted(object arg) {
            if ((this.MoveInOutListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveInOutListCompleted(this, new MoveInOutListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ProrationInformationRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ProrationInformationRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("ProrationInformationRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ProrationInformationRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.ProrationInformationRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void ProrationInformationRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.ProrationInformationRetrieveOperationCompleted == null)) {
                this.ProrationInformationRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProrationInformationRetrieveOperationCompleted);
            }
            this.InvokeAsync("ProrationInformationRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.ProrationInformationRetrieveOperationCompleted, userState);
        }
        
        private void OnProrationInformationRetrieveOperationCompleted(object arg) {
            if ((this.ProrationInformationRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProrationInformationRetrieveCompleted(this, new ProrationInformationRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/MarketingSourcesRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MarketingSourcesRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("MarketingSourcesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MarketingSourcesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.MarketingSourcesRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void MarketingSourcesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.MarketingSourcesRetrieveOperationCompleted == null)) {
                this.MarketingSourcesRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarketingSourcesRetrieveOperationCompleted);
            }
            this.InvokeAsync("MarketingSourcesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.MarketingSourcesRetrieveOperationCompleted, userState);
        }
        
        private void OnMarketingSourcesRetrieveOperationCompleted(object arg) {
            if ((this.MarketingSourcesRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarketingSourcesRetrieveCompleted(this, new MarketingSourcesRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantMarketingUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantMarketingUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, long lngDOB, int iGender, int iMarketingID, int iMktgDistanceID, int iMktgReasonID, int iMktgTypeID, int iMktgWhatID, int iMktgWhyID, int iHowManyOtherStorageCosDidYouContact, int iUsedSelfStorageInThePast) {
            object[] results = this.Invoke("TenantMarketingUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        lngDOB,
                        iGender,
                        iMarketingID,
                        iMktgDistanceID,
                        iMktgReasonID,
                        iMktgTypeID,
                        iMktgWhatID,
                        iMktgWhyID,
                        iHowManyOtherStorageCosDidYouContact,
                        iUsedSelfStorageInThePast});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantMarketingUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, long lngDOB, int iGender, int iMarketingID, int iMktgDistanceID, int iMktgReasonID, int iMktgTypeID, int iMktgWhatID, int iMktgWhyID, int iHowManyOtherStorageCosDidYouContact, int iUsedSelfStorageInThePast) {
            this.TenantMarketingUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, lngDOB, iGender, iMarketingID, iMktgDistanceID, iMktgReasonID, iMktgTypeID, iMktgWhatID, iMktgWhyID, iHowManyOtherStorageCosDidYouContact, iUsedSelfStorageInThePast, null);
        }
        
        /// <remarks/>
        public void TenantMarketingUpdateAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    long lngDOB, 
                    int iGender, 
                    int iMarketingID, 
                    int iMktgDistanceID, 
                    int iMktgReasonID, 
                    int iMktgTypeID, 
                    int iMktgWhatID, 
                    int iMktgWhyID, 
                    int iHowManyOtherStorageCosDidYouContact, 
                    int iUsedSelfStorageInThePast, 
                    object userState) {
            if ((this.TenantMarketingUpdateOperationCompleted == null)) {
                this.TenantMarketingUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantMarketingUpdateOperationCompleted);
            }
            this.InvokeAsync("TenantMarketingUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        lngDOB,
                        iGender,
                        iMarketingID,
                        iMktgDistanceID,
                        iMktgReasonID,
                        iMktgTypeID,
                        iMktgWhatID,
                        iMktgWhyID,
                        iHowManyOtherStorageCosDidYouContact,
                        iUsedSelfStorageInThePast}, this.TenantMarketingUpdateOperationCompleted, userState);
        }
        
        private void OnTenantMarketingUpdateOperationCompleted(object arg) {
            if ((this.TenantMarketingUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantMarketingUpdateCompleted(this, new TenantMarketingUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantUpdateMilitary", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantUpdateMilitary(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, bool bMilitary) {
            object[] results = this.Invoke("TenantUpdateMilitary", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        bMilitary});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantUpdateMilitaryAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, bool bMilitary) {
            this.TenantUpdateMilitaryAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, bMilitary, null);
        }
        
        /// <remarks/>
        public void TenantUpdateMilitaryAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, bool bMilitary, object userState) {
            if ((this.TenantUpdateMilitaryOperationCompleted == null)) {
                this.TenantUpdateMilitaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantUpdateMilitaryOperationCompleted);
            }
            this.InvokeAsync("TenantUpdateMilitary", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        bMilitary}, this.TenantUpdateMilitaryOperationCompleted, userState);
        }
        
        private void OnTenantUpdateMilitaryOperationCompleted(object arg) {
            if ((this.TenantUpdateMilitaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantUpdateMilitaryCompleted(this, new TenantUpdateMilitaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantExitSurveyUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantExitSurveyUpdate(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    bool bExit_OnEmailOfferList, 
                    System.DateTime dExit_WhenNeedAgain, 
                    int MktgExitRentAgainID, 
                    int MktgExitReasonID, 
                    int MktgExitSatisfactionID, 
                    int iExitSat_Cleanliness, 
                    int iExitSat_Safety, 
                    int iExitSat_Services, 
                    int iExitSat_Staff, 
                    int iExitSat_Price, 
                    string sExitComment) {
            object[] results = this.Invoke("TenantExitSurveyUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        bExit_OnEmailOfferList,
                        dExit_WhenNeedAgain,
                        MktgExitRentAgainID,
                        MktgExitReasonID,
                        MktgExitSatisfactionID,
                        iExitSat_Cleanliness,
                        iExitSat_Safety,
                        iExitSat_Services,
                        iExitSat_Staff,
                        iExitSat_Price,
                        sExitComment});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantExitSurveyUpdateAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    bool bExit_OnEmailOfferList, 
                    System.DateTime dExit_WhenNeedAgain, 
                    int MktgExitRentAgainID, 
                    int MktgExitReasonID, 
                    int MktgExitSatisfactionID, 
                    int iExitSat_Cleanliness, 
                    int iExitSat_Safety, 
                    int iExitSat_Services, 
                    int iExitSat_Staff, 
                    int iExitSat_Price, 
                    string sExitComment) {
            this.TenantExitSurveyUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, bExit_OnEmailOfferList, dExit_WhenNeedAgain, MktgExitRentAgainID, MktgExitReasonID, MktgExitSatisfactionID, iExitSat_Cleanliness, iExitSat_Safety, iExitSat_Services, iExitSat_Staff, iExitSat_Price, sExitComment, null);
        }
        
        /// <remarks/>
        public void TenantExitSurveyUpdateAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int TenantID, 
                    bool bExit_OnEmailOfferList, 
                    System.DateTime dExit_WhenNeedAgain, 
                    int MktgExitRentAgainID, 
                    int MktgExitReasonID, 
                    int MktgExitSatisfactionID, 
                    int iExitSat_Cleanliness, 
                    int iExitSat_Safety, 
                    int iExitSat_Services, 
                    int iExitSat_Staff, 
                    int iExitSat_Price, 
                    string sExitComment, 
                    object userState) {
            if ((this.TenantExitSurveyUpdateOperationCompleted == null)) {
                this.TenantExitSurveyUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantExitSurveyUpdateOperationCompleted);
            }
            this.InvokeAsync("TenantExitSurveyUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        bExit_OnEmailOfferList,
                        dExit_WhenNeedAgain,
                        MktgExitRentAgainID,
                        MktgExitReasonID,
                        MktgExitSatisfactionID,
                        iExitSat_Cleanliness,
                        iExitSat_Safety,
                        iExitSat_Services,
                        iExitSat_Staff,
                        iExitSat_Price,
                        sExitComment}, this.TenantExitSurveyUpdateOperationCompleted, userState);
        }
        
        private void OnTenantExitSurveyUpdateOperationCompleted(object arg) {
            if ((this.TenantExitSurveyUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantExitSurveyUpdateCompleted(this, new TenantExitSurveyUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantLoginAndSecurityUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantLoginAndSecurityUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, string sEmail, string sWebPassword, string sWebSecurityQ, string sWebSecurityQA) {
            object[] results = this.Invoke("TenantLoginAndSecurityUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sEmail,
                        sWebPassword,
                        sWebSecurityQ,
                        sWebSecurityQA});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantLoginAndSecurityUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, string sEmail, string sWebPassword, string sWebSecurityQ, string sWebSecurityQA) {
            this.TenantLoginAndSecurityUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, TenantID, sEmail, sWebPassword, sWebSecurityQ, sWebSecurityQA, null);
        }
        
        /// <remarks/>
        public void TenantLoginAndSecurityUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int TenantID, string sEmail, string sWebPassword, string sWebSecurityQ, string sWebSecurityQA, object userState) {
            if ((this.TenantLoginAndSecurityUpdateOperationCompleted == null)) {
                this.TenantLoginAndSecurityUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantLoginAndSecurityUpdateOperationCompleted);
            }
            this.InvokeAsync("TenantLoginAndSecurityUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        TenantID,
                        sEmail,
                        sWebPassword,
                        sWebSecurityQ,
                        sWebSecurityQA}, this.TenantLoginAndSecurityUpdateOperationCompleted, userState);
        }
        
        private void OnTenantLoginAndSecurityUpdateOperationCompleted(object arg) {
            if ((this.TenantLoginAndSecurityUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantLoginAndSecurityUpdateCompleted(this, new TenantLoginAndSecurityUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/LedgerBillingDayUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LedgerBillingDayUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, int iBillingDay, bool bUpdateFlag) {
            object[] results = this.Invoke("LedgerBillingDayUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        iBillingDay,
                        bUpdateFlag});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LedgerBillingDayUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, int iBillingDay, bool bUpdateFlag) {
            this.LedgerBillingDayUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iLedgerID, iBillingDay, bUpdateFlag, null);
        }
        
        /// <remarks/>
        public void LedgerBillingDayUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, int iBillingDay, bool bUpdateFlag, object userState) {
            if ((this.LedgerBillingDayUpdateOperationCompleted == null)) {
                this.LedgerBillingDayUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLedgerBillingDayUpdateOperationCompleted);
            }
            this.InvokeAsync("LedgerBillingDayUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        iBillingDay,
                        bUpdateFlag}, this.LedgerBillingDayUpdateOperationCompleted, userState);
        }
        
        private void OnLedgerBillingDayUpdateOperationCompleted(object arg) {
            if ((this.LedgerBillingDayUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LedgerBillingDayUpdateCompleted(this, new LedgerBillingDayUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/InsuranceRateUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet InsuranceRateUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, decimal dcCoverage, string sDescription, decimal dcPremium, bool bUpdateFlag) {
            object[] results = this.Invoke("InsuranceRateUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        dcCoverage,
                        sDescription,
                        dcPremium,
                        bUpdateFlag});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void InsuranceRateUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, decimal dcCoverage, string sDescription, decimal dcPremium, bool bUpdateFlag) {
            this.InsuranceRateUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iLedgerID, dcCoverage, sDescription, dcPremium, bUpdateFlag, null);
        }
        
        /// <remarks/>
        public void InsuranceRateUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, decimal dcCoverage, string sDescription, decimal dcPremium, bool bUpdateFlag, object userState) {
            if ((this.InsuranceRateUpdateOperationCompleted == null)) {
                this.InsuranceRateUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsuranceRateUpdateOperationCompleted);
            }
            this.InvokeAsync("InsuranceRateUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        dcCoverage,
                        sDescription,
                        dcPremium,
                        bUpdateFlag}, this.InsuranceRateUpdateOperationCompleted, userState);
        }
        
        private void OnInsuranceRateUpdateOperationCompleted(object arg) {
            if ((this.InsuranceRateUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsuranceRateUpdateCompleted(this, new InsuranceRateUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/LedgerInvoiceUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LedgerInvoiceUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, bool bInvoice) {
            object[] results = this.Invoke("LedgerInvoiceUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        bInvoice});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LedgerInvoiceUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, bool bInvoice) {
            this.LedgerInvoiceUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, bInvoice, null);
        }
        
        /// <remarks/>
        public void LedgerInvoiceUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, bool bInvoice, object userState) {
            if ((this.LedgerInvoiceUpdateOperationCompleted == null)) {
                this.LedgerInvoiceUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLedgerInvoiceUpdateOperationCompleted);
            }
            this.InvokeAsync("LedgerInvoiceUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        bInvoice}, this.LedgerInvoiceUpdateOperationCompleted, userState);
        }
        
        private void OnLedgerInvoiceUpdateOperationCompleted(object arg) {
            if ((this.LedgerInvoiceUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LedgerInvoiceUpdateCompleted(this, new LedgerInvoiceUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/LedgerVehicleUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LedgerVehicleUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, string sVehicleDescription, string sLiscensePlate) {
            object[] results = this.Invoke("LedgerVehicleUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        sVehicleDescription,
                        sLiscensePlate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LedgerVehicleUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, string sVehicleDescription, string sLiscensePlate) {
            this.LedgerVehicleUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, sVehicleDescription, sLiscensePlate, null);
        }
        
        /// <remarks/>
        public void LedgerVehicleUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, string sVehicleDescription, string sLiscensePlate, object userState) {
            if ((this.LedgerVehicleUpdateOperationCompleted == null)) {
                this.LedgerVehicleUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLedgerVehicleUpdateOperationCompleted);
            }
            this.InvokeAsync("LedgerVehicleUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        sVehicleDescription,
                        sLiscensePlate}, this.LedgerVehicleUpdateOperationCompleted, userState);
        }
        
        private void OnLedgerVehicleUpdateOperationCompleted(object arg) {
            if ((this.LedgerVehicleUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LedgerVehicleUpdateCompleted(this, new LedgerVehicleUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/LedgerPurchaseOrderUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LedgerPurchaseOrderUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, string sPurchaseOrderCode) {
            object[] results = this.Invoke("LedgerPurchaseOrderUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        sPurchaseOrderCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LedgerPurchaseOrderUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, string sPurchaseOrderCode) {
            this.LedgerPurchaseOrderUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, sPurchaseOrderCode, null);
        }
        
        /// <remarks/>
        public void LedgerPurchaseOrderUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, string sPurchaseOrderCode, object userState) {
            if ((this.LedgerPurchaseOrderUpdateOperationCompleted == null)) {
                this.LedgerPurchaseOrderUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLedgerPurchaseOrderUpdateOperationCompleted);
            }
            this.InvokeAsync("LedgerPurchaseOrderUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        sPurchaseOrderCode}, this.LedgerPurchaseOrderUpdateOperationCompleted, userState);
        }
        
        private void OnLedgerPurchaseOrderUpdateOperationCompleted(object arg) {
            if ((this.LedgerPurchaseOrderUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LedgerPurchaseOrderUpdateCompleted(this, new LedgerPurchaseOrderUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/DeliveryFeeRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DeliveryFeeRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("DeliveryFeeRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DeliveryFeeRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.DeliveryFeeRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void DeliveryFeeRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.DeliveryFeeRetrieveOperationCompleted == null)) {
                this.DeliveryFeeRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeliveryFeeRetrieveOperationCompleted);
            }
            this.InvokeAsync("DeliveryFeeRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.DeliveryFeeRetrieveOperationCompleted, userState);
        }
        
        private void OnDeliveryFeeRetrieveOperationCompleted(object arg) {
            if ((this.DeliveryFeeRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeliveryFeeRetrieveCompleted(this, new DeliveryFeeRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/RentTaxRatesRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RentTaxRatesRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("RentTaxRatesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RentTaxRatesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.RentTaxRatesRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void RentTaxRatesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.RentTaxRatesRetrieveOperationCompleted == null)) {
                this.RentTaxRatesRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRentTaxRatesRetrieveOperationCompleted);
            }
            this.InvokeAsync("RentTaxRatesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.RentTaxRatesRetrieveOperationCompleted, userState);
        }
        
        private void OnRentTaxRatesRetrieveOperationCompleted(object arg) {
            if ((this.RentTaxRatesRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RentTaxRatesRetrieveCompleted(this, new RentTaxRatesRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimple", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimple(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, int iCreditCardType, string sCreditCardNumber, string sCreditCardCVV, System.DateTime dExpirationDate, string sBillingName, string sBillingAddress, string sBillingZipCode, bool bTestMode) {
            object[] results = this.Invoke("PaymentSimple", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, int iCreditCardType, string sCreditCardNumber, string sCreditCardCVV, System.DateTime dExpirationDate, string sBillingName, string sBillingAddress, string sBillingZipCode, bool bTestMode) {
            this.PaymentSimpleAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iUnitID, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, bTestMode, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iUnitID, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    object userState) {
            if ((this.PaymentSimpleOperationCompleted == null)) {
                this.PaymentSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleOperationCompleted);
            }
            this.InvokeAsync("PaymentSimple", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode}, this.PaymentSimpleOperationCompleted, userState);
        }
        
        private void OnPaymentSimpleOperationCompleted(object arg) {
            if ((this.PaymentSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleCompleted(this, new PaymentSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimpleWithSource", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimpleWithSource(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iUnitID, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource) {
            object[] results = this.Invoke("PaymentSimpleWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleWithSourceAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iUnitID, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource) {
            this.PaymentSimpleWithSourceAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iUnitID, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, bTestMode, iSource, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleWithSourceAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iUnitID, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource, 
                    object userState) {
            if ((this.PaymentSimpleWithSourceOperationCompleted == null)) {
                this.PaymentSimpleWithSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleWithSourceOperationCompleted);
            }
            this.InvokeAsync("PaymentSimpleWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode,
                        iSource}, this.PaymentSimpleWithSourceOperationCompleted, userState);
        }
        
        private void OnPaymentSimpleWithSourceOperationCompleted(object arg) {
            if ((this.PaymentSimpleWithSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleWithSourceCompleted(this, new PaymentSimpleWithSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimpleWithSource_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimpleWithSource_v2(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iUnitID, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource) {
            object[] results = this.Invoke("PaymentSimpleWithSource_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        sCCTrack2,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleWithSource_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iUnitID, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource) {
            this.PaymentSimpleWithSource_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iUnitID, dcPaymentAmount, iCreditCardType, sCreditCardNumber, sCreditCardCVV, sCCTrack2, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, bTestMode, iSource, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleWithSource_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iUnitID, 
                    decimal dcPaymentAmount, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource, 
                    object userState) {
            if ((this.PaymentSimpleWithSource_v2OperationCompleted == null)) {
                this.PaymentSimpleWithSource_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleWithSource_v2OperationCompleted);
            }
            this.InvokeAsync("PaymentSimpleWithSource_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        sCCTrack2,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode,
                        iSource}, this.PaymentSimpleWithSource_v2OperationCompleted, userState);
        }
        
        private void OnPaymentSimpleWithSource_v2OperationCompleted(object arg) {
            if ((this.PaymentSimpleWithSource_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleWithSource_v2Completed(this, new PaymentSimpleWithSource_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimpleBankTransferWithSource", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimpleBankTransferWithSource(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, string sTransferNumber, int iSource) {
            object[] results = this.Invoke("PaymentSimpleBankTransferWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        sTransferNumber,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleBankTransferWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, string sTransferNumber, int iSource) {
            this.PaymentSimpleBankTransferWithSourceAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iUnitID, dcPaymentAmount, sTransferNumber, iSource, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleBankTransferWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, string sTransferNumber, int iSource, object userState) {
            if ((this.PaymentSimpleBankTransferWithSourceOperationCompleted == null)) {
                this.PaymentSimpleBankTransferWithSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleBankTransferWithSourceOperationCompleted);
            }
            this.InvokeAsync("PaymentSimpleBankTransferWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        sTransferNumber,
                        iSource}, this.PaymentSimpleBankTransferWithSourceOperationCompleted, userState);
        }
        
        private void OnPaymentSimpleBankTransferWithSourceOperationCompleted(object arg) {
            if ((this.PaymentSimpleBankTransferWithSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleBankTransferWithSourceCompleted(this, new PaymentSimpleBankTransferWithSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentMultipleWithSource", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentMultipleWithSource(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sUnitIDs, 
                    string sPaymentAmounts, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource) {
            object[] results = this.Invoke("PaymentMultipleWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        sUnitIDs,
                        sPaymentAmounts,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        sCCTrack2,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentMultipleWithSourceAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sUnitIDs, 
                    string sPaymentAmounts, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource) {
            this.PaymentMultipleWithSourceAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, sUnitIDs, sPaymentAmounts, iCreditCardType, sCreditCardNumber, sCreditCardCVV, sCCTrack2, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, bTestMode, iSource, null);
        }
        
        /// <remarks/>
        public void PaymentMultipleWithSourceAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sUnitIDs, 
                    string sPaymentAmounts, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource, 
                    object userState) {
            if ((this.PaymentMultipleWithSourceOperationCompleted == null)) {
                this.PaymentMultipleWithSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentMultipleWithSourceOperationCompleted);
            }
            this.InvokeAsync("PaymentMultipleWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        sUnitIDs,
                        sPaymentAmounts,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        sCCTrack2,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode,
                        iSource}, this.PaymentMultipleWithSourceOperationCompleted, userState);
        }
        
        private void OnPaymentMultipleWithSourceOperationCompleted(object arg) {
            if ((this.PaymentMultipleWithSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentMultipleWithSourceCompleted(this, new PaymentMultipleWithSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentMultipleWithSource_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentMultipleWithSource_v2(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sUnitIDs, 
                    string sPaymentAmounts, 
                    int iPayMethod, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    string sCheckNum, 
                    bool bTestMode, 
                    int iSource) {
            object[] results = this.Invoke("PaymentMultipleWithSource_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        sUnitIDs,
                        sPaymentAmounts,
                        iPayMethod,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        sCCTrack2,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType,
                        sCheckNum,
                        bTestMode,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentMultipleWithSource_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sUnitIDs, 
                    string sPaymentAmounts, 
                    int iPayMethod, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    string sCheckNum, 
                    bool bTestMode, 
                    int iSource) {
            this.PaymentMultipleWithSource_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, sUnitIDs, sPaymentAmounts, iPayMethod, iCreditCardType, sCreditCardNumber, sCreditCardCVV, sCCTrack2, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, sABARoutingNum, sAccountNum, iAccountType, sCheckNum, bTestMode, iSource, null);
        }
        
        /// <remarks/>
        public void PaymentMultipleWithSource_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    string sUnitIDs, 
                    string sPaymentAmounts, 
                    int iPayMethod, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    string sCCTrack2, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    string sABARoutingNum, 
                    string sAccountNum, 
                    int iAccountType, 
                    string sCheckNum, 
                    bool bTestMode, 
                    int iSource, 
                    object userState) {
            if ((this.PaymentMultipleWithSource_v2OperationCompleted == null)) {
                this.PaymentMultipleWithSource_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentMultipleWithSource_v2OperationCompleted);
            }
            this.InvokeAsync("PaymentMultipleWithSource_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        sUnitIDs,
                        sPaymentAmounts,
                        iPayMethod,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        sCCTrack2,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType,
                        sCheckNum,
                        bTestMode,
                        iSource}, this.PaymentMultipleWithSource_v2OperationCompleted, userState);
        }
        
        private void OnPaymentMultipleWithSource_v2OperationCompleted(object arg) {
            if ((this.PaymentMultipleWithSource_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentMultipleWithSource_v2Completed(this, new PaymentMultipleWithSource_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimpleWithPrepaidDiscount", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimpleWithPrepaidDiscount(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iUnitID, 
                    decimal dcPaymentAmount, 
                    int iPaymentMethod, 
                    string sCheckAcctNum, 
                    string sRoutingNum, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    System.DateTime dCCExpiration, 
                    string sCCHolderName, 
                    string sCreditCardCVV, 
                    int iConcessionID, 
                    string sCCStreetAddr, 
                    string sCCPostalCode, 
                    int iAccountType, 
                    string sCCTrack2, 
                    int iSource, 
                    bool bTestMode) {
            object[] results = this.Invoke("PaymentSimpleWithPrepaidDiscount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        iPaymentMethod,
                        sCheckAcctNum,
                        sRoutingNum,
                        iCreditCardType,
                        sCreditCardNumber,
                        dCCExpiration,
                        sCCHolderName,
                        sCreditCardCVV,
                        iConcessionID,
                        sCCStreetAddr,
                        sCCPostalCode,
                        iAccountType,
                        sCCTrack2,
                        iSource,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleWithPrepaidDiscountAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iUnitID, 
                    decimal dcPaymentAmount, 
                    int iPaymentMethod, 
                    string sCheckAcctNum, 
                    string sRoutingNum, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    System.DateTime dCCExpiration, 
                    string sCCHolderName, 
                    string sCreditCardCVV, 
                    int iConcessionID, 
                    string sCCStreetAddr, 
                    string sCCPostalCode, 
                    int iAccountType, 
                    string sCCTrack2, 
                    int iSource, 
                    bool bTestMode) {
            this.PaymentSimpleWithPrepaidDiscountAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iUnitID, dcPaymentAmount, iPaymentMethod, sCheckAcctNum, sRoutingNum, iCreditCardType, sCreditCardNumber, dCCExpiration, sCCHolderName, sCreditCardCVV, iConcessionID, sCCStreetAddr, sCCPostalCode, iAccountType, sCCTrack2, iSource, bTestMode, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleWithPrepaidDiscountAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iUnitID, 
                    decimal dcPaymentAmount, 
                    int iPaymentMethod, 
                    string sCheckAcctNum, 
                    string sRoutingNum, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    System.DateTime dCCExpiration, 
                    string sCCHolderName, 
                    string sCreditCardCVV, 
                    int iConcessionID, 
                    string sCCStreetAddr, 
                    string sCCPostalCode, 
                    int iAccountType, 
                    string sCCTrack2, 
                    int iSource, 
                    bool bTestMode, 
                    object userState) {
            if ((this.PaymentSimpleWithPrepaidDiscountOperationCompleted == null)) {
                this.PaymentSimpleWithPrepaidDiscountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleWithPrepaidDiscountOperationCompleted);
            }
            this.InvokeAsync("PaymentSimpleWithPrepaidDiscount", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        iPaymentMethod,
                        sCheckAcctNum,
                        sRoutingNum,
                        iCreditCardType,
                        sCreditCardNumber,
                        dCCExpiration,
                        sCCHolderName,
                        sCreditCardCVV,
                        iConcessionID,
                        sCCStreetAddr,
                        sCCPostalCode,
                        iAccountType,
                        sCCTrack2,
                        iSource,
                        bTestMode}, this.PaymentSimpleWithPrepaidDiscountOperationCompleted, userState);
        }
        
        private void OnPaymentSimpleWithPrepaidDiscountOperationCompleted(object arg) {
            if ((this.PaymentSimpleWithPrepaidDiscountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleWithPrepaidDiscountCompleted(this, new PaymentSimpleWithPrepaidDiscountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimpleCash", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimpleCash(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount) {
            object[] results = this.Invoke("PaymentSimpleCash", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleCashAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount) {
            this.PaymentSimpleCashAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iUnitID, dcPaymentAmount, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleCashAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, object userState) {
            if ((this.PaymentSimpleCashOperationCompleted == null)) {
                this.PaymentSimpleCashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleCashOperationCompleted);
            }
            this.InvokeAsync("PaymentSimpleCash", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount}, this.PaymentSimpleCashOperationCompleted, userState);
        }
        
        private void OnPaymentSimpleCashOperationCompleted(object arg) {
            if ((this.PaymentSimpleCashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleCashCompleted(this, new PaymentSimpleCashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimpleCashWithSource", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimpleCashWithSource(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, int iSource) {
            object[] results = this.Invoke("PaymentSimpleCashWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleCashWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, int iSource) {
            this.PaymentSimpleCashWithSourceAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iUnitID, dcPaymentAmount, iSource, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleCashWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, int iSource, object userState) {
            if ((this.PaymentSimpleCashWithSourceOperationCompleted == null)) {
                this.PaymentSimpleCashWithSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleCashWithSourceOperationCompleted);
            }
            this.InvokeAsync("PaymentSimpleCashWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        iSource}, this.PaymentSimpleCashWithSourceOperationCompleted, userState);
        }
        
        private void OnPaymentSimpleCashWithSourceOperationCompleted(object arg) {
            if ((this.PaymentSimpleCashWithSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleCashWithSourceCompleted(this, new PaymentSimpleCashWithSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimpleCheck", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimpleCheck(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, string sCheckNumber) {
            object[] results = this.Invoke("PaymentSimpleCheck", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        sCheckNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleCheckAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, string sCheckNumber) {
            this.PaymentSimpleCheckAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iUnitID, dcPaymentAmount, sCheckNumber, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleCheckAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, string sCheckNumber, object userState) {
            if ((this.PaymentSimpleCheckOperationCompleted == null)) {
                this.PaymentSimpleCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleCheckOperationCompleted);
            }
            this.InvokeAsync("PaymentSimpleCheck", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        sCheckNumber}, this.PaymentSimpleCheckOperationCompleted, userState);
        }
        
        private void OnPaymentSimpleCheckOperationCompleted(object arg) {
            if ((this.PaymentSimpleCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleCheckCompleted(this, new PaymentSimpleCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimpleCheckWithSource", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimpleCheckWithSource(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, string sCheckNumber, int iSource) {
            object[] results = this.Invoke("PaymentSimpleCheckWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        sCheckNumber,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleCheckWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, string sCheckNumber, int iSource) {
            this.PaymentSimpleCheckWithSourceAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iUnitID, dcPaymentAmount, sCheckNumber, iSource, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleCheckWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iUnitID, decimal dcPaymentAmount, string sCheckNumber, int iSource, object userState) {
            if ((this.PaymentSimpleCheckWithSourceOperationCompleted == null)) {
                this.PaymentSimpleCheckWithSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleCheckWithSourceOperationCompleted);
            }
            this.InvokeAsync("PaymentSimpleCheckWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iUnitID,
                        dcPaymentAmount,
                        sCheckNumber,
                        iSource}, this.PaymentSimpleCheckWithSourceOperationCompleted, userState);
        }
        
        private void OnPaymentSimpleCheckWithSourceOperationCompleted(object arg) {
            if ((this.PaymentSimpleCheckWithSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleCheckWithSourceCompleted(this, new PaymentSimpleCheckWithSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimpleACH", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimpleACH(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, decimal dcPaymentAmount, string sABARoutingNum, string sAccountNum, int iAccountType) {
            object[] results = this.Invoke("PaymentSimpleACH", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iLedgerID,
                        dcPaymentAmount,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleACHAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, decimal dcPaymentAmount, string sABARoutingNum, string sAccountNum, int iAccountType) {
            this.PaymentSimpleACHAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iLedgerID, dcPaymentAmount, sABARoutingNum, sAccountNum, iAccountType, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleACHAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, decimal dcPaymentAmount, string sABARoutingNum, string sAccountNum, int iAccountType, object userState) {
            if ((this.PaymentSimpleACHOperationCompleted == null)) {
                this.PaymentSimpleACHOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleACHOperationCompleted);
            }
            this.InvokeAsync("PaymentSimpleACH", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iLedgerID,
                        dcPaymentAmount,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType}, this.PaymentSimpleACHOperationCompleted, userState);
        }
        
        private void OnPaymentSimpleACHOperationCompleted(object arg) {
            if ((this.PaymentSimpleACHCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleACHCompleted(this, new PaymentSimpleACHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSimpleACHWithSource", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSimpleACHWithSource(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, decimal dcPaymentAmount, string sABARoutingNum, string sAccountNum, int iAccountType, int iSource) {
            object[] results = this.Invoke("PaymentSimpleACHWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iLedgerID,
                        dcPaymentAmount,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSimpleACHWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, decimal dcPaymentAmount, string sABARoutingNum, string sAccountNum, int iAccountType, int iSource) {
            this.PaymentSimpleACHWithSourceAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iLedgerID, dcPaymentAmount, sABARoutingNum, sAccountNum, iAccountType, iSource, null);
        }
        
        /// <remarks/>
        public void PaymentSimpleACHWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iLedgerID, decimal dcPaymentAmount, string sABARoutingNum, string sAccountNum, int iAccountType, int iSource, object userState) {
            if ((this.PaymentSimpleACHWithSourceOperationCompleted == null)) {
                this.PaymentSimpleACHWithSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSimpleACHWithSourceOperationCompleted);
            }
            this.InvokeAsync("PaymentSimpleACHWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iLedgerID,
                        dcPaymentAmount,
                        sABARoutingNum,
                        sAccountNum,
                        iAccountType,
                        iSource}, this.PaymentSimpleACHWithSourceOperationCompleted, userState);
        }
        
        private void OnPaymentSimpleACHWithSourceOperationCompleted(object arg) {
            if ((this.PaymentSimpleACHWithSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSimpleACHWithSourceCompleted(this, new PaymentSimpleACHWithSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationFeeAdd", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationFeeAdd(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iWaitingListID, int iCreditCardType, string sCreditCardNumber, string sCreditCardCVV, System.DateTime dExpirationDate, string sBillingName, string sBillingAddress, string sBillingZipCode, bool bTestMode) {
            object[] results = this.Invoke("ReservationFeeAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iWaitingListID,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationFeeAddAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iWaitingListID, int iCreditCardType, string sCreditCardNumber, string sCreditCardCVV, System.DateTime dExpirationDate, string sBillingName, string sBillingAddress, string sBillingZipCode, bool bTestMode) {
            this.ReservationFeeAddAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iWaitingListID, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, bTestMode, null);
        }
        
        /// <remarks/>
        public void ReservationFeeAddAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iWaitingListID, int iCreditCardType, string sCreditCardNumber, string sCreditCardCVV, System.DateTime dExpirationDate, string sBillingName, string sBillingAddress, string sBillingZipCode, bool bTestMode, object userState) {
            if ((this.ReservationFeeAddOperationCompleted == null)) {
                this.ReservationFeeAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationFeeAddOperationCompleted);
            }
            this.InvokeAsync("ReservationFeeAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iWaitingListID,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode}, this.ReservationFeeAddOperationCompleted, userState);
        }
        
        private void OnReservationFeeAddOperationCompleted(object arg) {
            if ((this.ReservationFeeAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationFeeAddCompleted(this, new ReservationFeeAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationFeeAddWithSource", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationFeeAddWithSource(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iWaitingListID, int iCreditCardType, string sCreditCardNumber, string sCreditCardCVV, System.DateTime dExpirationDate, string sBillingName, string sBillingAddress, string sBillingZipCode, bool bTestMode, int iSource) {
            object[] results = this.Invoke("ReservationFeeAddWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iWaitingListID,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationFeeAddWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iWaitingListID, int iCreditCardType, string sCreditCardNumber, string sCreditCardCVV, System.DateTime dExpirationDate, string sBillingName, string sBillingAddress, string sBillingZipCode, bool bTestMode, int iSource) {
            this.ReservationFeeAddWithSourceAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iWaitingListID, iCreditCardType, sCreditCardNumber, sCreditCardCVV, dExpirationDate, sBillingName, sBillingAddress, sBillingZipCode, bTestMode, iSource, null);
        }
        
        /// <remarks/>
        public void ReservationFeeAddWithSourceAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iTenantID, 
                    int iWaitingListID, 
                    int iCreditCardType, 
                    string sCreditCardNumber, 
                    string sCreditCardCVV, 
                    System.DateTime dExpirationDate, 
                    string sBillingName, 
                    string sBillingAddress, 
                    string sBillingZipCode, 
                    bool bTestMode, 
                    int iSource, 
                    object userState) {
            if ((this.ReservationFeeAddWithSourceOperationCompleted == null)) {
                this.ReservationFeeAddWithSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationFeeAddWithSourceOperationCompleted);
            }
            this.InvokeAsync("ReservationFeeAddWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iWaitingListID,
                        iCreditCardType,
                        sCreditCardNumber,
                        sCreditCardCVV,
                        dExpirationDate,
                        sBillingName,
                        sBillingAddress,
                        sBillingZipCode,
                        bTestMode,
                        iSource}, this.ReservationFeeAddWithSourceOperationCompleted, userState);
        }
        
        private void OnReservationFeeAddWithSourceOperationCompleted(object arg) {
            if ((this.ReservationFeeAddWithSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationFeeAddWithSourceCompleted(this, new ReservationFeeAddWithSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ChargeAddToLedger", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChargeAddToLedger(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, int ChargeDescID, decimal dcAmtPreTax) {
            object[] results = this.Invoke("ChargeAddToLedger", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        ChargeDescID,
                        dcAmtPreTax});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChargeAddToLedgerAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, int ChargeDescID, decimal dcAmtPreTax) {
            this.ChargeAddToLedgerAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, ChargeDescID, dcAmtPreTax, null);
        }
        
        /// <remarks/>
        public void ChargeAddToLedgerAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, int ChargeDescID, decimal dcAmtPreTax, object userState) {
            if ((this.ChargeAddToLedgerOperationCompleted == null)) {
                this.ChargeAddToLedgerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargeAddToLedgerOperationCompleted);
            }
            this.InvokeAsync("ChargeAddToLedger", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        ChargeDescID,
                        dcAmtPreTax}, this.ChargeAddToLedgerOperationCompleted, userState);
        }
        
        private void OnChargeAddToLedgerOperationCompleted(object arg) {
            if ((this.ChargeAddToLedgerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargeAddToLedgerCompleted(this, new ChargeAddToLedgerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ConvenienceFeeRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ConvenienceFeeRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("ConvenienceFeeRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ConvenienceFeeRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.ConvenienceFeeRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void ConvenienceFeeRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.ConvenienceFeeRetrieveOperationCompleted == null)) {
                this.ConvenienceFeeRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvenienceFeeRetrieveOperationCompleted);
            }
            this.InvokeAsync("ConvenienceFeeRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.ConvenienceFeeRetrieveOperationCompleted, userState);
        }
        
        private void OnConvenienceFeeRetrieveOperationCompleted(object arg) {
            if ((this.ConvenienceFeeRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvenienceFeeRetrieveCompleted(this, new ConvenienceFeeRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ConvenienceFeeAdd", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ConvenienceFeeAdd(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, decimal dcAmtPreTax) {
            object[] results = this.Invoke("ConvenienceFeeAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        dcAmtPreTax});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ConvenienceFeeAddAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, decimal dcAmtPreTax) {
            this.ConvenienceFeeAddAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, dcAmtPreTax, null);
        }
        
        /// <remarks/>
        public void ConvenienceFeeAddAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, decimal dcAmtPreTax, object userState) {
            if ((this.ConvenienceFeeAddOperationCompleted == null)) {
                this.ConvenienceFeeAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvenienceFeeAddOperationCompleted);
            }
            this.InvokeAsync("ConvenienceFeeAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID,
                        dcAmtPreTax}, this.ConvenienceFeeAddOperationCompleted, userState);
        }
        
        private void OnConvenienceFeeAddOperationCompleted(object arg) {
            if ((this.ConvenienceFeeAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvenienceFeeAddCompleted(this, new ConvenienceFeeAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ConvenienceFeeRemove", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ConvenienceFeeRemove(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID) {
            object[] results = this.Invoke("ConvenienceFeeRemove", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ConvenienceFeeRemoveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID) {
            this.ConvenienceFeeRemoveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, LedgerID, null);
        }
        
        /// <remarks/>
        public void ConvenienceFeeRemoveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int LedgerID, object userState) {
            if ((this.ConvenienceFeeRemoveOperationCompleted == null)) {
                this.ConvenienceFeeRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvenienceFeeRemoveOperationCompleted);
            }
            this.InvokeAsync("ConvenienceFeeRemove", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        LedgerID}, this.ConvenienceFeeRemoveOperationCompleted, userState);
        }
        
        private void OnConvenienceFeeRemoveOperationCompleted(object arg) {
            if ((this.ConvenienceFeeRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvenienceFeeRemoveCompleted(this, new ConvenienceFeeRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/LedgersByTenantID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LedgersByTenantID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID) {
            object[] results = this.Invoke("LedgersByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LedgersByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID) {
            this.LedgersByTenantIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantID, null);
        }
        
        /// <remarks/>
        public void LedgersByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, object userState) {
            if ((this.LedgersByTenantIDOperationCompleted == null)) {
                this.LedgersByTenantIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLedgersByTenantIDOperationCompleted);
            }
            this.InvokeAsync("LedgersByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID}, this.LedgersByTenantIDOperationCompleted, userState);
        }
        
        private void OnLedgersByTenantIDOperationCompleted(object arg) {
            if ((this.LedgersByTenantIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LedgersByTenantIDCompleted(this, new LedgersByTenantIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentsByLedgerID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentsByLedgerID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int sLedgerID) {
            object[] results = this.Invoke("PaymentsByLedgerID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sLedgerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentsByLedgerIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int sLedgerID) {
            this.PaymentsByLedgerIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sLedgerID, null);
        }
        
        /// <remarks/>
        public void PaymentsByLedgerIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int sLedgerID, object userState) {
            if ((this.PaymentsByLedgerIDOperationCompleted == null)) {
                this.PaymentsByLedgerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentsByLedgerIDOperationCompleted);
            }
            this.InvokeAsync("PaymentsByLedgerID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sLedgerID}, this.PaymentsByLedgerIDOperationCompleted, userState);
        }
        
        private void OnPaymentsByLedgerIDOperationCompleted(object arg) {
            if ((this.PaymentsByLedgerIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentsByLedgerIDCompleted(this, new PaymentsByLedgerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/LedgerStatementByLedgerID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LedgerStatementByLedgerID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sLedgerID) {
            object[] results = this.Invoke("LedgerStatementByLedgerID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sLedgerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LedgerStatementByLedgerIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sLedgerID) {
            this.LedgerStatementByLedgerIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sLedgerID, null);
        }
        
        /// <remarks/>
        public void LedgerStatementByLedgerIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sLedgerID, object userState) {
            if ((this.LedgerStatementByLedgerIDOperationCompleted == null)) {
                this.LedgerStatementByLedgerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLedgerStatementByLedgerIDOperationCompleted);
            }
            this.InvokeAsync("LedgerStatementByLedgerID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sLedgerID}, this.LedgerStatementByLedgerIDOperationCompleted, userState);
        }
        
        private void OnLedgerStatementByLedgerIDOperationCompleted(object arg) {
            if ((this.LedgerStatementByLedgerIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LedgerStatementByLedgerIDCompleted(this, new LedgerStatementByLedgerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CustomerAccountsBalanceDetails", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CustomerAccountsBalanceDetails(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID) {
            object[] results = this.Invoke("CustomerAccountsBalanceDetails", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerAccountsBalanceDetailsAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID) {
            this.CustomerAccountsBalanceDetailsAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, null);
        }
        
        /// <remarks/>
        public void CustomerAccountsBalanceDetailsAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, object userState) {
            if ((this.CustomerAccountsBalanceDetailsOperationCompleted == null)) {
                this.CustomerAccountsBalanceDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerAccountsBalanceDetailsOperationCompleted);
            }
            this.InvokeAsync("CustomerAccountsBalanceDetails", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID}, this.CustomerAccountsBalanceDetailsOperationCompleted, userState);
        }
        
        private void OnCustomerAccountsBalanceDetailsOperationCompleted(object arg) {
            if ((this.CustomerAccountsBalanceDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerAccountsBalanceDetailsCompleted(this, new CustomerAccountsBalanceDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CustomerAccountsBalanceDetailsWithPr" +
            "epayment", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CustomerAccountsBalanceDetailsWithPrepayment(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNumberOfMonthsPrepay) {
            object[] results = this.Invoke("CustomerAccountsBalanceDetailsWithPrepayment", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iNumberOfMonthsPrepay});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerAccountsBalanceDetailsWithPrepaymentAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNumberOfMonthsPrepay) {
            this.CustomerAccountsBalanceDetailsWithPrepaymentAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iNumberOfMonthsPrepay, null);
        }
        
        /// <remarks/>
        public void CustomerAccountsBalanceDetailsWithPrepaymentAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNumberOfMonthsPrepay, object userState) {
            if ((this.CustomerAccountsBalanceDetailsWithPrepaymentOperationCompleted == null)) {
                this.CustomerAccountsBalanceDetailsWithPrepaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerAccountsBalanceDetailsWithPrepaymentOperationCompleted);
            }
            this.InvokeAsync("CustomerAccountsBalanceDetailsWithPrepayment", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iNumberOfMonthsPrepay}, this.CustomerAccountsBalanceDetailsWithPrepaymentOperationCompleted, userState);
        }
        
        private void OnCustomerAccountsBalanceDetailsWithPrepaymentOperationCompleted(object arg) {
            if ((this.CustomerAccountsBalanceDetailsWithPrepaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerAccountsBalanceDetailsWithPrepaymentCompleted(this, new CustomerAccountsBalanceDetailsWithPrepaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CustomerAccountsChargesWithPrepaymen" +
            "t", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CustomerAccountsChargesWithPrepayment(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNumberOfMonthsPrepay) {
            object[] results = this.Invoke("CustomerAccountsChargesWithPrepayment", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iNumberOfMonthsPrepay});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerAccountsChargesWithPrepaymentAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNumberOfMonthsPrepay) {
            this.CustomerAccountsChargesWithPrepaymentAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iNumberOfMonthsPrepay, null);
        }
        
        /// <remarks/>
        public void CustomerAccountsChargesWithPrepaymentAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNumberOfMonthsPrepay, object userState) {
            if ((this.CustomerAccountsChargesWithPrepaymentOperationCompleted == null)) {
                this.CustomerAccountsChargesWithPrepaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerAccountsChargesWithPrepaymentOperationCompleted);
            }
            this.InvokeAsync("CustomerAccountsChargesWithPrepayment", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iNumberOfMonthsPrepay}, this.CustomerAccountsChargesWithPrepaymentOperationCompleted, userState);
        }
        
        private void OnCustomerAccountsChargesWithPrepaymentOperationCompleted(object arg) {
            if ((this.CustomerAccountsChargesWithPrepaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerAccountsChargesWithPrepaymentCompleted(this, new CustomerAccountsChargesWithPrepaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/CustomerAccountsMakeFutureCharges", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CustomerAccountsMakeFutureCharges(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNumberOfFuturePeriods, System.DateTime dFutureDueDate) {
            object[] results = this.Invoke("CustomerAccountsMakeFutureCharges", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iNumberOfFuturePeriods,
                        dFutureDueDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerAccountsMakeFutureChargesAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNumberOfFuturePeriods, System.DateTime dFutureDueDate) {
            this.CustomerAccountsMakeFutureChargesAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, iNumberOfFuturePeriods, dFutureDueDate, null);
        }
        
        /// <remarks/>
        public void CustomerAccountsMakeFutureChargesAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, int iNumberOfFuturePeriods, System.DateTime dFutureDueDate, object userState) {
            if ((this.CustomerAccountsMakeFutureChargesOperationCompleted == null)) {
                this.CustomerAccountsMakeFutureChargesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerAccountsMakeFutureChargesOperationCompleted);
            }
            this.InvokeAsync("CustomerAccountsMakeFutureCharges", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        iNumberOfFuturePeriods,
                        dFutureDueDate}, this.CustomerAccountsMakeFutureChargesOperationCompleted, userState);
        }
        
        private void OnCustomerAccountsMakeFutureChargesOperationCompleted(object arg) {
            if ((this.CustomerAccountsMakeFutureChargesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerAccountsMakeFutureChargesCompleted(this, new CustomerAccountsMakeFutureChargesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/SiteInformation", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SiteInformation(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("SiteInformation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SiteInformationAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.SiteInformationAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void SiteInformationAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.SiteInformationOperationCompleted == null)) {
                this.SiteInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteInformationOperationCompleted);
            }
            this.InvokeAsync("SiteInformation", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.SiteInformationOperationCompleted, userState);
        }
        
        private void OnSiteInformationOperationCompleted(object arg) {
            if ((this.SiteInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteInformationCompleted(this, new SiteInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentSettings", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentSettings(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("PaymentSettings", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSettingsAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.PaymentSettingsAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void PaymentSettingsAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.PaymentSettingsOperationCompleted == null)) {
                this.PaymentSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSettingsOperationCompleted);
            }
            this.InvokeAsync("PaymentSettings", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.PaymentSettingsOperationCompleted, userState);
        }
        
        private void OnPaymentSettingsOperationCompleted(object arg) {
            if ((this.PaymentSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSettingsCompleted(this, new PaymentSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationNew", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationNew(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID1, string sUnitID2, string sUnitID3, System.DateTime dNeeded, string sComment) {
            object[] results = this.Invoke("ReservationNew", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID1,
                        sUnitID2,
                        sUnitID3,
                        dNeeded,
                        sComment});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationNewAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID1, string sUnitID2, string sUnitID3, System.DateTime dNeeded, string sComment) {
            this.ReservationNewAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantID, sUnitID1, sUnitID2, sUnitID3, dNeeded, sComment, null);
        }
        
        /// <remarks/>
        public void ReservationNewAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID1, string sUnitID2, string sUnitID3, System.DateTime dNeeded, string sComment, object userState) {
            if ((this.ReservationNewOperationCompleted == null)) {
                this.ReservationNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationNewOperationCompleted);
            }
            this.InvokeAsync("ReservationNew", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID1,
                        sUnitID2,
                        sUnitID3,
                        dNeeded,
                        sComment}, this.ReservationNewOperationCompleted, userState);
        }
        
        private void OnReservationNewOperationCompleted(object arg) {
            if ((this.ReservationNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationNewCompleted(this, new ReservationNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationNewWithSource", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationNewWithSource(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID1, string sUnitID2, string sUnitID3, System.DateTime dNeeded, string sComment, int iSource) {
            object[] results = this.Invoke("ReservationNewWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID1,
                        sUnitID2,
                        sUnitID3,
                        dNeeded,
                        sComment,
                        iSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationNewWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID1, string sUnitID2, string sUnitID3, System.DateTime dNeeded, string sComment, int iSource) {
            this.ReservationNewWithSourceAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantID, sUnitID1, sUnitID2, sUnitID3, dNeeded, sComment, iSource, null);
        }
        
        /// <remarks/>
        public void ReservationNewWithSourceAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID1, string sUnitID2, string sUnitID3, System.DateTime dNeeded, string sComment, int iSource, object userState) {
            if ((this.ReservationNewWithSourceOperationCompleted == null)) {
                this.ReservationNewWithSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationNewWithSourceOperationCompleted);
            }
            this.InvokeAsync("ReservationNewWithSource", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID1,
                        sUnitID2,
                        sUnitID3,
                        dNeeded,
                        sComment,
                        iSource}, this.ReservationNewWithSourceOperationCompleted, userState);
        }
        
        private void OnReservationNewWithSourceOperationCompleted(object arg) {
            if ((this.ReservationNewWithSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationNewWithSourceCompleted(this, new ReservationNewWithSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationNewWithSource_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationNewWithSource_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iSource, string sSource, int QTRentalTypeID, int iInquiryType) {
            object[] results = this.Invoke("ReservationNewWithSource_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iSource,
                        sSource,
                        QTRentalTypeID,
                        iInquiryType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationNewWithSource_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iSource, string sSource, int QTRentalTypeID, int iInquiryType) {
            this.ReservationNewWithSource_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantID, sUnitID, dNeeded, sComment, iSource, sSource, QTRentalTypeID, iInquiryType, null);
        }
        
        /// <remarks/>
        public void ReservationNewWithSource_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iSource, string sSource, int QTRentalTypeID, int iInquiryType, object userState) {
            if ((this.ReservationNewWithSource_v2OperationCompleted == null)) {
                this.ReservationNewWithSource_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationNewWithSource_v2OperationCompleted);
            }
            this.InvokeAsync("ReservationNewWithSource_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iSource,
                        sSource,
                        QTRentalTypeID,
                        iInquiryType}, this.ReservationNewWithSource_v2OperationCompleted, userState);
        }
        
        private void OnReservationNewWithSource_v2OperationCompleted(object arg) {
            if ((this.ReservationNewWithSource_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationNewWithSource_v2Completed(this, new ReservationNewWithSource_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationNewWithSource_v3", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationNewWithSource_v3(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iSource, string sSource, int QTRentalTypeID, int iInquiryType, decimal dcQuotedRate, System.DateTime dExpires) {
            object[] results = this.Invoke("ReservationNewWithSource_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iSource,
                        sSource,
                        QTRentalTypeID,
                        iInquiryType,
                        dcQuotedRate,
                        dExpires});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationNewWithSource_v3Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iSource, string sSource, int QTRentalTypeID, int iInquiryType, decimal dcQuotedRate, System.DateTime dExpires) {
            this.ReservationNewWithSource_v3Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantID, sUnitID, dNeeded, sComment, iSource, sSource, QTRentalTypeID, iInquiryType, dcQuotedRate, dExpires, null);
        }
        
        /// <remarks/>
        public void ReservationNewWithSource_v3Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iSource, string sSource, int QTRentalTypeID, int iInquiryType, decimal dcQuotedRate, System.DateTime dExpires, object userState) {
            if ((this.ReservationNewWithSource_v3OperationCompleted == null)) {
                this.ReservationNewWithSource_v3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationNewWithSource_v3OperationCompleted);
            }
            this.InvokeAsync("ReservationNewWithSource_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iSource,
                        sSource,
                        QTRentalTypeID,
                        iInquiryType,
                        dcQuotedRate,
                        dExpires}, this.ReservationNewWithSource_v3OperationCompleted, userState);
        }
        
        private void OnReservationNewWithSource_v3OperationCompleted(object arg) {
            if ((this.ReservationNewWithSource_v3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationNewWithSource_v3Completed(this, new ReservationNewWithSource_v3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationNewWithSource_v4", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationNewWithSource_v4(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iSource, string sSource, int QTRentalTypeID, int iInquiryType, decimal dcQuotedRate, System.DateTime dExpires, System.DateTime dFollowUp) {
            object[] results = this.Invoke("ReservationNewWithSource_v4", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iSource,
                        sSource,
                        QTRentalTypeID,
                        iInquiryType,
                        dcQuotedRate,
                        dExpires,
                        dFollowUp});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationNewWithSource_v4Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iSource, string sSource, int QTRentalTypeID, int iInquiryType, decimal dcQuotedRate, System.DateTime dExpires, System.DateTime dFollowUp) {
            this.ReservationNewWithSource_v4Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantID, sUnitID, dNeeded, sComment, iSource, sSource, QTRentalTypeID, iInquiryType, dcQuotedRate, dExpires, dFollowUp, null);
        }
        
        /// <remarks/>
        public void ReservationNewWithSource_v4Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantID, 
                    string sUnitID, 
                    System.DateTime dNeeded, 
                    string sComment, 
                    int iSource, 
                    string sSource, 
                    int QTRentalTypeID, 
                    int iInquiryType, 
                    decimal dcQuotedRate, 
                    System.DateTime dExpires, 
                    System.DateTime dFollowUp, 
                    object userState) {
            if ((this.ReservationNewWithSource_v4OperationCompleted == null)) {
                this.ReservationNewWithSource_v4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationNewWithSource_v4OperationCompleted);
            }
            this.InvokeAsync("ReservationNewWithSource_v4", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iSource,
                        sSource,
                        QTRentalTypeID,
                        iInquiryType,
                        dcQuotedRate,
                        dExpires,
                        dFollowUp}, this.ReservationNewWithSource_v4OperationCompleted, userState);
        }
        
        private void OnReservationNewWithSource_v4OperationCompleted(object arg) {
            if ((this.ReservationNewWithSource_v4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationNewWithSource_v4Completed(this, new ReservationNewWithSource_v4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationNewWithSource_v5", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationNewWithSource_v5(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantID, 
                    string sUnitID, 
                    System.DateTime dNeeded, 
                    string sComment, 
                    int iSource, 
                    string sSource, 
                    int QTRentalTypeID, 
                    int iInquiryType, 
                    decimal dcQuotedRate, 
                    System.DateTime dExpires, 
                    System.DateTime dFollowUp, 
                    string sTrackingCode, 
                    string sCallerID, 
                    int ConcessionID) {
            object[] results = this.Invoke("ReservationNewWithSource_v5", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iSource,
                        sSource,
                        QTRentalTypeID,
                        iInquiryType,
                        dcQuotedRate,
                        dExpires,
                        dFollowUp,
                        sTrackingCode,
                        sCallerID,
                        ConcessionID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationNewWithSource_v5Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantID, 
                    string sUnitID, 
                    System.DateTime dNeeded, 
                    string sComment, 
                    int iSource, 
                    string sSource, 
                    int QTRentalTypeID, 
                    int iInquiryType, 
                    decimal dcQuotedRate, 
                    System.DateTime dExpires, 
                    System.DateTime dFollowUp, 
                    string sTrackingCode, 
                    string sCallerID, 
                    int ConcessionID) {
            this.ReservationNewWithSource_v5Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantID, sUnitID, dNeeded, sComment, iSource, sSource, QTRentalTypeID, iInquiryType, dcQuotedRate, dExpires, dFollowUp, sTrackingCode, sCallerID, ConcessionID, null);
        }
        
        /// <remarks/>
        public void ReservationNewWithSource_v5Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantID, 
                    string sUnitID, 
                    System.DateTime dNeeded, 
                    string sComment, 
                    int iSource, 
                    string sSource, 
                    int QTRentalTypeID, 
                    int iInquiryType, 
                    decimal dcQuotedRate, 
                    System.DateTime dExpires, 
                    System.DateTime dFollowUp, 
                    string sTrackingCode, 
                    string sCallerID, 
                    int ConcessionID, 
                    object userState) {
            if ((this.ReservationNewWithSource_v5OperationCompleted == null)) {
                this.ReservationNewWithSource_v5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationNewWithSource_v5OperationCompleted);
            }
            this.InvokeAsync("ReservationNewWithSource_v5", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iSource,
                        sSource,
                        QTRentalTypeID,
                        iInquiryType,
                        dcQuotedRate,
                        dExpires,
                        dFollowUp,
                        sTrackingCode,
                        sCallerID,
                        ConcessionID}, this.ReservationNewWithSource_v5OperationCompleted, userState);
        }
        
        private void OnReservationNewWithSource_v5OperationCompleted(object arg) {
            if ((this.ReservationNewWithSource_v5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationNewWithSource_v5Completed(this, new ReservationNewWithSource_v5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int WaitingID, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iStatus) {
            object[] results = this.Invoke("ReservationUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iStatus});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int WaitingID, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iStatus) {
            this.ReservationUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, WaitingID, sTenantID, sUnitID, dNeeded, sComment, iStatus, null);
        }
        
        /// <remarks/>
        public void ReservationUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int WaitingID, string sTenantID, string sUnitID, System.DateTime dNeeded, string sComment, int iStatus, object userState) {
            if ((this.ReservationUpdateOperationCompleted == null)) {
                this.ReservationUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationUpdateOperationCompleted);
            }
            this.InvokeAsync("ReservationUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iStatus}, this.ReservationUpdateOperationCompleted, userState);
        }
        
        private void OnReservationUpdateOperationCompleted(object arg) {
            if ((this.ReservationUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationUpdateCompleted(this, new ReservationUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationUpdate_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationUpdate_v2(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    string sTenantID, 
                    string sUnitID, 
                    System.DateTime dNeeded, 
                    string sComment, 
                    int iStatus, 
                    bool bFollowup, 
                    System.DateTime dFollowup, 
                    System.DateTime dFollowupLast, 
                    int iInquiryType, 
                    decimal dcQuotedRate, 
                    System.DateTime dExpires) {
            object[] results = this.Invoke("ReservationUpdate_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iStatus,
                        bFollowup,
                        dFollowup,
                        dFollowupLast,
                        iInquiryType,
                        dcQuotedRate,
                        dExpires});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationUpdate_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    string sTenantID, 
                    string sUnitID, 
                    System.DateTime dNeeded, 
                    string sComment, 
                    int iStatus, 
                    bool bFollowup, 
                    System.DateTime dFollowup, 
                    System.DateTime dFollowupLast, 
                    int iInquiryType, 
                    decimal dcQuotedRate, 
                    System.DateTime dExpires) {
            this.ReservationUpdate_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, WaitingID, sTenantID, sUnitID, dNeeded, sComment, iStatus, bFollowup, dFollowup, dFollowupLast, iInquiryType, dcQuotedRate, dExpires, null);
        }
        
        /// <remarks/>
        public void ReservationUpdate_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    string sTenantID, 
                    string sUnitID, 
                    System.DateTime dNeeded, 
                    string sComment, 
                    int iStatus, 
                    bool bFollowup, 
                    System.DateTime dFollowup, 
                    System.DateTime dFollowupLast, 
                    int iInquiryType, 
                    decimal dcQuotedRate, 
                    System.DateTime dExpires, 
                    object userState) {
            if ((this.ReservationUpdate_v2OperationCompleted == null)) {
                this.ReservationUpdate_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationUpdate_v2OperationCompleted);
            }
            this.InvokeAsync("ReservationUpdate_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iStatus,
                        bFollowup,
                        dFollowup,
                        dFollowupLast,
                        iInquiryType,
                        dcQuotedRate,
                        dExpires}, this.ReservationUpdate_v2OperationCompleted, userState);
        }
        
        private void OnReservationUpdate_v2OperationCompleted(object arg) {
            if ((this.ReservationUpdate_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationUpdate_v2Completed(this, new ReservationUpdate_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationUpdate_v3", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationUpdate_v3(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    string sTenantID, 
                    string sUnitID, 
                    System.DateTime dNeeded, 
                    string sComment, 
                    int iStatus, 
                    bool bFollowup, 
                    System.DateTime dFollowup, 
                    System.DateTime dFollowupLast, 
                    int iInquiryType, 
                    decimal dcQuotedRate, 
                    System.DateTime dExpires, 
                    int QTRentalTypeID, 
                    int QTCancellationTypeID, 
                    string sCancellationReason) {
            object[] results = this.Invoke("ReservationUpdate_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iStatus,
                        bFollowup,
                        dFollowup,
                        dFollowupLast,
                        iInquiryType,
                        dcQuotedRate,
                        dExpires,
                        QTRentalTypeID,
                        QTCancellationTypeID,
                        sCancellationReason});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationUpdate_v3Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    string sTenantID, 
                    string sUnitID, 
                    System.DateTime dNeeded, 
                    string sComment, 
                    int iStatus, 
                    bool bFollowup, 
                    System.DateTime dFollowup, 
                    System.DateTime dFollowupLast, 
                    int iInquiryType, 
                    decimal dcQuotedRate, 
                    System.DateTime dExpires, 
                    int QTRentalTypeID, 
                    int QTCancellationTypeID, 
                    string sCancellationReason) {
            this.ReservationUpdate_v3Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, WaitingID, sTenantID, sUnitID, dNeeded, sComment, iStatus, bFollowup, dFollowup, dFollowupLast, iInquiryType, dcQuotedRate, dExpires, QTRentalTypeID, QTCancellationTypeID, sCancellationReason, null);
        }
        
        /// <remarks/>
        public void ReservationUpdate_v3Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int WaitingID, 
                    string sTenantID, 
                    string sUnitID, 
                    System.DateTime dNeeded, 
                    string sComment, 
                    int iStatus, 
                    bool bFollowup, 
                    System.DateTime dFollowup, 
                    System.DateTime dFollowupLast, 
                    int iInquiryType, 
                    decimal dcQuotedRate, 
                    System.DateTime dExpires, 
                    int QTRentalTypeID, 
                    int QTCancellationTypeID, 
                    string sCancellationReason, 
                    object userState) {
            if ((this.ReservationUpdate_v3OperationCompleted == null)) {
                this.ReservationUpdate_v3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationUpdate_v3OperationCompleted);
            }
            this.InvokeAsync("ReservationUpdate_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        sTenantID,
                        sUnitID,
                        dNeeded,
                        sComment,
                        iStatus,
                        bFollowup,
                        dFollowup,
                        dFollowupLast,
                        iInquiryType,
                        dcQuotedRate,
                        dExpires,
                        QTRentalTypeID,
                        QTCancellationTypeID,
                        sCancellationReason}, this.ReservationUpdate_v3OperationCompleted, userState);
        }
        
        private void OnReservationUpdate_v3OperationCompleted(object arg) {
            if ((this.ReservationUpdate_v3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationUpdate_v3Completed(this, new ReservationUpdate_v3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationNoteInsert", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationNoteInsert(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int WaitingID, string sNote) {
            object[] results = this.Invoke("ReservationNoteInsert", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        sNote});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationNoteInsertAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int WaitingID, string sNote) {
            this.ReservationNoteInsertAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, WaitingID, sNote, null);
        }
        
        /// <remarks/>
        public void ReservationNoteInsertAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int WaitingID, string sNote, object userState) {
            if ((this.ReservationNoteInsertOperationCompleted == null)) {
                this.ReservationNoteInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationNoteInsertOperationCompleted);
            }
            this.InvokeAsync("ReservationNoteInsert", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID,
                        sNote}, this.ReservationNoteInsertOperationCompleted, userState);
        }
        
        private void OnReservationNoteInsertOperationCompleted(object arg) {
            if ((this.ReservationNoteInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationNoteInsertCompleted(this, new ReservationNoteInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/ReservationNotesRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReservationNotesRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int WaitingID) {
            object[] results = this.Invoke("ReservationNotesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReservationNotesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int WaitingID) {
            this.ReservationNotesRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, WaitingID, null);
        }
        
        /// <remarks/>
        public void ReservationNotesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int WaitingID, object userState) {
            if ((this.ReservationNotesRetrieveOperationCompleted == null)) {
                this.ReservationNotesRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReservationNotesRetrieveOperationCompleted);
            }
            this.InvokeAsync("ReservationNotesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        WaitingID}, this.ReservationNotesRetrieveOperationCompleted, userState);
        }
        
        private void OnReservationNotesRetrieveOperationCompleted(object arg) {
            if ((this.ReservationNotesRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReservationNotesRetrieveCompleted(this, new ReservationNotesRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantList", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantList(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName) {
            object[] results = this.Invoke("TenantList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName) {
            this.TenantListAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantFirstName, sTenantLastName, null);
        }
        
        /// <remarks/>
        public void TenantListAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName, object userState) {
            if ((this.TenantListOperationCompleted == null)) {
                this.TenantListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantListOperationCompleted);
            }
            this.InvokeAsync("TenantList", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName}, this.TenantListOperationCompleted, userState);
        }
        
        private void OnTenantListOperationCompleted(object arg) {
            if ((this.TenantListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantListCompleted(this, new TenantListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantListDetailed", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantListDetailed(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName, string sAddressLine1, string sAddressLine2, string sCity, string sState, string sZipCode, string sEmailAddress, string sPhoneNumber) {
            object[] results = this.Invoke("TenantListDetailed", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName,
                        sAddressLine1,
                        sAddressLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sEmailAddress,
                        sPhoneNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantListDetailedAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName, string sAddressLine1, string sAddressLine2, string sCity, string sState, string sZipCode, string sEmailAddress, string sPhoneNumber) {
            this.TenantListDetailedAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantFirstName, sTenantLastName, sAddressLine1, sAddressLine2, sCity, sState, sZipCode, sEmailAddress, sPhoneNumber, null);
        }
        
        /// <remarks/>
        public void TenantListDetailedAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName, string sAddressLine1, string sAddressLine2, string sCity, string sState, string sZipCode, string sEmailAddress, string sPhoneNumber, object userState) {
            if ((this.TenantListDetailedOperationCompleted == null)) {
                this.TenantListDetailedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantListDetailedOperationCompleted);
            }
            this.InvokeAsync("TenantListDetailed", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName,
                        sAddressLine1,
                        sAddressLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sEmailAddress,
                        sPhoneNumber}, this.TenantListDetailedOperationCompleted, userState);
        }
        
        private void OnTenantListDetailedOperationCompleted(object arg) {
            if ((this.TenantListDetailedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantListDetailedCompleted(this, new TenantListDetailedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantListDetailed_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantListDetailed_v2(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName, string sAddressLine1, string sAddressLine2, string sCity, string sState, string sZipCode, string sEmailAddress, string sPhoneNumber, string sCompany) {
            object[] results = this.Invoke("TenantListDetailed_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName,
                        sAddressLine1,
                        sAddressLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sEmailAddress,
                        sPhoneNumber,
                        sCompany});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantListDetailed_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName, string sAddressLine1, string sAddressLine2, string sCity, string sState, string sZipCode, string sEmailAddress, string sPhoneNumber, string sCompany) {
            this.TenantListDetailed_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantFirstName, sTenantLastName, sAddressLine1, sAddressLine2, sCity, sState, sZipCode, sEmailAddress, sPhoneNumber, sCompany, null);
        }
        
        /// <remarks/>
        public void TenantListDetailed_v2Async(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantFirstName, string sTenantLastName, string sAddressLine1, string sAddressLine2, string sCity, string sState, string sZipCode, string sEmailAddress, string sPhoneNumber, string sCompany, object userState) {
            if ((this.TenantListDetailed_v2OperationCompleted == null)) {
                this.TenantListDetailed_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantListDetailed_v2OperationCompleted);
            }
            this.InvokeAsync("TenantListDetailed_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName,
                        sAddressLine1,
                        sAddressLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sEmailAddress,
                        sPhoneNumber,
                        sCompany}, this.TenantListDetailed_v2OperationCompleted, userState);
        }
        
        private void OnTenantListDetailed_v2OperationCompleted(object arg) {
            if ((this.TenantListDetailed_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantListDetailed_v2Completed(this, new TenantListDetailed_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantListDetailed_v3", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantListDetailed_v3(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantFirstName, 
                    string sTenantLastName, 
                    string sAddressLine1, 
                    string sAddressLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    string sCompany, 
                    string sUnitName, 
                    string sAccessCode, 
                    string sCRN) {
            object[] results = this.Invoke("TenantListDetailed_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName,
                        sAddressLine1,
                        sAddressLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sEmailAddress,
                        sPhoneNumber,
                        sCompany,
                        sUnitName,
                        sAccessCode,
                        sCRN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantListDetailed_v3Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantFirstName, 
                    string sTenantLastName, 
                    string sAddressLine1, 
                    string sAddressLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    string sCompany, 
                    string sUnitName, 
                    string sAccessCode, 
                    string sCRN) {
            this.TenantListDetailed_v3Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantFirstName, sTenantLastName, sAddressLine1, sAddressLine2, sCity, sState, sZipCode, sEmailAddress, sPhoneNumber, sCompany, sUnitName, sAccessCode, sCRN, null);
        }
        
        /// <remarks/>
        public void TenantListDetailed_v3Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantFirstName, 
                    string sTenantLastName, 
                    string sAddressLine1, 
                    string sAddressLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    string sCompany, 
                    string sUnitName, 
                    string sAccessCode, 
                    string sCRN, 
                    object userState) {
            if ((this.TenantListDetailed_v3OperationCompleted == null)) {
                this.TenantListDetailed_v3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantListDetailed_v3OperationCompleted);
            }
            this.InvokeAsync("TenantListDetailed_v3", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName,
                        sAddressLine1,
                        sAddressLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sEmailAddress,
                        sPhoneNumber,
                        sCompany,
                        sUnitName,
                        sAccessCode,
                        sCRN}, this.TenantListDetailed_v3OperationCompleted, userState);
        }
        
        private void OnTenantListDetailed_v3OperationCompleted(object arg) {
            if ((this.TenantListDetailed_v3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantListDetailed_v3Completed(this, new TenantListDetailed_v3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantSearchDetailed", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantSearchDetailed(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantFirstName, 
                    string sTenantLastName, 
                    string sAddressLine1, 
                    string sAddressLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    string sPhoneNumber2, 
                    string sPhoneNumber3, 
                    string sPhoneNumber4) {
            object[] results = this.Invoke("TenantSearchDetailed", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName,
                        sAddressLine1,
                        sAddressLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sEmailAddress,
                        sPhoneNumber,
                        sPhoneNumber2,
                        sPhoneNumber3,
                        sPhoneNumber4});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantSearchDetailedAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantFirstName, 
                    string sTenantLastName, 
                    string sAddressLine1, 
                    string sAddressLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    string sPhoneNumber2, 
                    string sPhoneNumber3, 
                    string sPhoneNumber4) {
            this.TenantSearchDetailedAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantFirstName, sTenantLastName, sAddressLine1, sAddressLine2, sCity, sState, sZipCode, sEmailAddress, sPhoneNumber, sPhoneNumber2, sPhoneNumber3, sPhoneNumber4, null);
        }
        
        /// <remarks/>
        public void TenantSearchDetailedAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantFirstName, 
                    string sTenantLastName, 
                    string sAddressLine1, 
                    string sAddressLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    string sPhoneNumber2, 
                    string sPhoneNumber3, 
                    string sPhoneNumber4, 
                    object userState) {
            if ((this.TenantSearchDetailedOperationCompleted == null)) {
                this.TenantSearchDetailedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantSearchDetailedOperationCompleted);
            }
            this.InvokeAsync("TenantSearchDetailed", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName,
                        sAddressLine1,
                        sAddressLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sEmailAddress,
                        sPhoneNumber,
                        sPhoneNumber2,
                        sPhoneNumber3,
                        sPhoneNumber4}, this.TenantSearchDetailedOperationCompleted, userState);
        }
        
        private void OnTenantSearchDetailedOperationCompleted(object arg) {
            if ((this.TenantSearchDetailedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantSearchDetailedCompleted(this, new TenantSearchDetailedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantListDetailedMovedInTenantsOnly" +
            "", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantListDetailedMovedInTenantsOnly(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantFirstName, 
                    string sTenantLastName, 
                    string sAddressLine1, 
                    string sAddressLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    string sCompany, 
                    string sUnitName, 
                    string sAccessCode) {
            object[] results = this.Invoke("TenantListDetailedMovedInTenantsOnly", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName,
                        sAddressLine1,
                        sAddressLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sEmailAddress,
                        sPhoneNumber,
                        sCompany,
                        sUnitName,
                        sAccessCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantListDetailedMovedInTenantsOnlyAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantFirstName, 
                    string sTenantLastName, 
                    string sAddressLine1, 
                    string sAddressLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    string sCompany, 
                    string sUnitName, 
                    string sAccessCode) {
            this.TenantListDetailedMovedInTenantsOnlyAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantFirstName, sTenantLastName, sAddressLine1, sAddressLine2, sCity, sState, sZipCode, sEmailAddress, sPhoneNumber, sCompany, sUnitName, sAccessCode, null);
        }
        
        /// <remarks/>
        public void TenantListDetailedMovedInTenantsOnlyAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sTenantFirstName, 
                    string sTenantLastName, 
                    string sAddressLine1, 
                    string sAddressLine2, 
                    string sCity, 
                    string sState, 
                    string sZipCode, 
                    string sEmailAddress, 
                    string sPhoneNumber, 
                    string sCompany, 
                    string sUnitName, 
                    string sAccessCode, 
                    object userState) {
            if ((this.TenantListDetailedMovedInTenantsOnlyOperationCompleted == null)) {
                this.TenantListDetailedMovedInTenantsOnlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantListDetailedMovedInTenantsOnlyOperationCompleted);
            }
            this.InvokeAsync("TenantListDetailedMovedInTenantsOnly", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantFirstName,
                        sTenantLastName,
                        sAddressLine1,
                        sAddressLine2,
                        sCity,
                        sState,
                        sZipCode,
                        sEmailAddress,
                        sPhoneNumber,
                        sCompany,
                        sUnitName,
                        sAccessCode}, this.TenantListDetailedMovedInTenantsOnlyOperationCompleted, userState);
        }
        
        private void OnTenantListDetailedMovedInTenantsOnlyOperationCompleted(object arg) {
            if ((this.TenantListDetailedMovedInTenantsOnlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantListDetailedMovedInTenantsOnlyCompleted(this, new TenantListDetailedMovedInTenantsOnlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantIDByUnitNameOrAccessCode", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantIDByUnitNameOrAccessCode(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUnitName, string sAccessCode) {
            object[] results = this.Invoke("TenantIDByUnitNameOrAccessCode", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUnitName,
                        sAccessCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantIDByUnitNameOrAccessCodeAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUnitName, string sAccessCode) {
            this.TenantIDByUnitNameOrAccessCodeAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUnitName, sAccessCode, null);
        }
        
        /// <remarks/>
        public void TenantIDByUnitNameOrAccessCodeAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sUnitName, string sAccessCode, object userState) {
            if ((this.TenantIDByUnitNameOrAccessCodeOperationCompleted == null)) {
                this.TenantIDByUnitNameOrAccessCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantIDByUnitNameOrAccessCodeOperationCompleted);
            }
            this.InvokeAsync("TenantIDByUnitNameOrAccessCode", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUnitName,
                        sAccessCode}, this.TenantIDByUnitNameOrAccessCodeOperationCompleted, userState);
        }
        
        private void OnTenantIDByUnitNameOrAccessCodeOperationCompleted(object arg) {
            if ((this.TenantIDByUnitNameOrAccessCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantIDByUnitNameOrAccessCodeCompleted(this, new TenantIDByUnitNameOrAccessCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantSMSOptInUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantSMSOptInUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, bool bSMSOptIn) {
            object[] results = this.Invoke("TenantSMSOptInUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        bSMSOptIn});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantSMSOptInUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, bool bSMSOptIn) {
            this.TenantSMSOptInUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, bSMSOptIn, null);
        }
        
        /// <remarks/>
        public void TenantSMSOptInUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, bool bSMSOptIn, object userState) {
            if ((this.TenantSMSOptInUpdateOperationCompleted == null)) {
                this.TenantSMSOptInUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantSMSOptInUpdateOperationCompleted);
            }
            this.InvokeAsync("TenantSMSOptInUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        bSMSOptIn}, this.TenantSMSOptInUpdateOperationCompleted, userState);
        }
        
        private void OnTenantSMSOptInUpdateOperationCompleted(object arg) {
            if ((this.TenantSMSOptInUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantSMSOptInUpdateCompleted(this, new TenantSMSOptInUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantEmailOptInUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantEmailOptInUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, bool bEmailOptIn) {
            object[] results = this.Invoke("TenantEmailOptInUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        bEmailOptIn});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantEmailOptInUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, bool bEmailOptIn) {
            this.TenantEmailOptInUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, bEmailOptIn, null);
        }
        
        /// <remarks/>
        public void TenantEmailOptInUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, bool bEmailOptIn, object userState) {
            if ((this.TenantEmailOptInUpdateOperationCompleted == null)) {
                this.TenantEmailOptInUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantEmailOptInUpdateOperationCompleted);
            }
            this.InvokeAsync("TenantEmailOptInUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID,
                        bEmailOptIn}, this.TenantEmailOptInUpdateOperationCompleted, userState);
        }
        
        private void OnTenantEmailOptInUpdateOperationCompleted(object arg) {
            if ((this.TenantEmailOptInUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantEmailOptInUpdateCompleted(this, new TenantEmailOptInUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/LeadGeneration", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LeadGeneration(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sFirstName, string sLastName, string sAddress1, string sAddress2, string sCity, string sState, string sZip, string sEmail, string sPhone, string sComments) {
            object[] results = this.Invoke("LeadGeneration", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sFirstName,
                        sLastName,
                        sAddress1,
                        sAddress2,
                        sCity,
                        sState,
                        sZip,
                        sEmail,
                        sPhone,
                        sComments});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LeadGenerationAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sFirstName, string sLastName, string sAddress1, string sAddress2, string sCity, string sState, string sZip, string sEmail, string sPhone, string sComments) {
            this.LeadGenerationAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sFirstName, sLastName, sAddress1, sAddress2, sCity, sState, sZip, sEmail, sPhone, sComments, null);
        }
        
        /// <remarks/>
        public void LeadGenerationAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sFirstName, string sLastName, string sAddress1, string sAddress2, string sCity, string sState, string sZip, string sEmail, string sPhone, string sComments, object userState) {
            if ((this.LeadGenerationOperationCompleted == null)) {
                this.LeadGenerationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLeadGenerationOperationCompleted);
            }
            this.InvokeAsync("LeadGeneration", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sFirstName,
                        sLastName,
                        sAddress1,
                        sAddress2,
                        sCity,
                        sState,
                        sZip,
                        sEmail,
                        sPhone,
                        sComments}, this.LeadGenerationOperationCompleted, userState);
        }
        
        private void OnLeadGenerationOperationCompleted(object arg) {
            if ((this.LeadGenerationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LeadGenerationCompleted(this, new LeadGenerationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantLogin", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantLogin(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantLogin, string sTenantPassword) {
            object[] results = this.Invoke("TenantLogin", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantLogin,
                        sTenantPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantLoginAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantLogin, string sTenantPassword) {
            this.TenantLoginAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantLogin, sTenantPassword, null);
        }
        
        /// <remarks/>
        public void TenantLoginAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantLogin, string sTenantPassword, object userState) {
            if ((this.TenantLoginOperationCompleted == null)) {
                this.TenantLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantLoginOperationCompleted);
            }
            this.InvokeAsync("TenantLogin", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantLogin,
                        sTenantPassword}, this.TenantLoginOperationCompleted, userState);
        }
        
        private void OnTenantLoginOperationCompleted(object arg) {
            if ((this.TenantLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantLoginCompleted(this, new TenantLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantPasswordByEmailAddress", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantPasswordByEmailAddress(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantEmailAddress) {
            object[] results = this.Invoke("TenantPasswordByEmailAddress", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantEmailAddress});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantPasswordByEmailAddressAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantEmailAddress) {
            this.TenantPasswordByEmailAddressAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sTenantEmailAddress, null);
        }
        
        /// <remarks/>
        public void TenantPasswordByEmailAddressAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, string sTenantEmailAddress, object userState) {
            if ((this.TenantPasswordByEmailAddressOperationCompleted == null)) {
                this.TenantPasswordByEmailAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantPasswordByEmailAddressOperationCompleted);
            }
            this.InvokeAsync("TenantPasswordByEmailAddress", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sTenantEmailAddress}, this.TenantPasswordByEmailAddressOperationCompleted, userState);
        }
        
        private void OnTenantPasswordByEmailAddressOperationCompleted(object arg) {
            if ((this.TenantPasswordByEmailAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantPasswordByEmailAddressCompleted(this, new TenantPasswordByEmailAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/PaymentTypesRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PaymentTypesRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            object[] results = this.Invoke("PaymentTypesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentTypesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword) {
            this.PaymentTypesRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, null);
        }
        
        /// <remarks/>
        public void PaymentTypesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, object userState) {
            if ((this.PaymentTypesRetrieveOperationCompleted == null)) {
                this.PaymentTypesRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentTypesRetrieveOperationCompleted);
            }
            this.InvokeAsync("PaymentTypesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword}, this.PaymentTypesRetrieveOperationCompleted, userState);
        }
        
        private void OnPaymentTypesRetrieveOperationCompleted(object arg) {
            if ((this.PaymentTypesRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentTypesRetrieveCompleted(this, new PaymentTypesRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantBillingInfoByTenantID", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantBillingInfoByTenantID(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID) {
            object[] results = this.Invoke("TenantBillingInfoByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantBillingInfoByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID) {
            this.TenantBillingInfoByTenantIDAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, null);
        }
        
        /// <remarks/>
        public void TenantBillingInfoByTenantIDAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, object userState) {
            if ((this.TenantBillingInfoByTenantIDOperationCompleted == null)) {
                this.TenantBillingInfoByTenantIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantBillingInfoByTenantIDOperationCompleted);
            }
            this.InvokeAsync("TenantBillingInfoByTenantID", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID}, this.TenantBillingInfoByTenantIDOperationCompleted, userState);
        }
        
        private void OnTenantBillingInfoByTenantIDOperationCompleted(object arg) {
            if ((this.TenantBillingInfoByTenantIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantBillingInfoByTenantIDCompleted(this, new TenantBillingInfoByTenantIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantBillingInfoUpdate", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantBillingInfoUpdate(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, int iCreditCardTypeID, string sCreditCardNum, System.DateTime dCredtiCardExpir, string sCreditCardHolderName, string sCreditCardStreet, string sCreditCardZip, int iAutoBillType, string sACH_CheckWriterAcctNum, string sACH_ABA_RoutingNum, string sACH_Check_SavingsCode) {
            object[] results = this.Invoke("TenantBillingInfoUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        iCreditCardTypeID,
                        sCreditCardNum,
                        dCredtiCardExpir,
                        sCreditCardHolderName,
                        sCreditCardStreet,
                        sCreditCardZip,
                        iAutoBillType,
                        sACH_CheckWriterAcctNum,
                        sACH_ABA_RoutingNum,
                        sACH_Check_SavingsCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantBillingInfoUpdateAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, int iCreditCardTypeID, string sCreditCardNum, System.DateTime dCredtiCardExpir, string sCreditCardHolderName, string sCreditCardStreet, string sCreditCardZip, int iAutoBillType, string sACH_CheckWriterAcctNum, string sACH_ABA_RoutingNum, string sACH_Check_SavingsCode) {
            this.TenantBillingInfoUpdateAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iLedgerID, iCreditCardTypeID, sCreditCardNum, dCredtiCardExpir, sCreditCardHolderName, sCreditCardStreet, sCreditCardZip, iAutoBillType, sACH_CheckWriterAcctNum, sACH_ABA_RoutingNum, sACH_Check_SavingsCode, null);
        }
        
        /// <remarks/>
        public void TenantBillingInfoUpdateAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iLedgerID, 
                    int iCreditCardTypeID, 
                    string sCreditCardNum, 
                    System.DateTime dCredtiCardExpir, 
                    string sCreditCardHolderName, 
                    string sCreditCardStreet, 
                    string sCreditCardZip, 
                    int iAutoBillType, 
                    string sACH_CheckWriterAcctNum, 
                    string sACH_ABA_RoutingNum, 
                    string sACH_Check_SavingsCode, 
                    object userState) {
            if ((this.TenantBillingInfoUpdateOperationCompleted == null)) {
                this.TenantBillingInfoUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantBillingInfoUpdateOperationCompleted);
            }
            this.InvokeAsync("TenantBillingInfoUpdate", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        iCreditCardTypeID,
                        sCreditCardNum,
                        dCredtiCardExpir,
                        sCreditCardHolderName,
                        sCreditCardStreet,
                        sCreditCardZip,
                        iAutoBillType,
                        sACH_CheckWriterAcctNum,
                        sACH_ABA_RoutingNum,
                        sACH_Check_SavingsCode}, this.TenantBillingInfoUpdateOperationCompleted, userState);
        }
        
        private void OnTenantBillingInfoUpdateOperationCompleted(object arg) {
            if ((this.TenantBillingInfoUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantBillingInfoUpdateCompleted(this, new TenantBillingInfoUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantBillingInfoUpdate_v2", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantBillingInfoUpdate_v2(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iLedgerID, 
                    int iCreditCardTypeID, 
                    string sCreditCardNum, 
                    System.DateTime dCredtiCardExpir, 
                    string sCreditCardHolderName, 
                    string sCreditCardStreet, 
                    string sCreditCardZip, 
                    int iAutoBillType, 
                    string sACH_CheckWriterAcctNum, 
                    string sACH_ABA_RoutingNum, 
                    string sACH_Check_SavingsCode, 
                    int iAutoBillOnDayPastDue) {
            object[] results = this.Invoke("TenantBillingInfoUpdate_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        iCreditCardTypeID,
                        sCreditCardNum,
                        dCredtiCardExpir,
                        sCreditCardHolderName,
                        sCreditCardStreet,
                        sCreditCardZip,
                        iAutoBillType,
                        sACH_CheckWriterAcctNum,
                        sACH_ABA_RoutingNum,
                        sACH_Check_SavingsCode,
                        iAutoBillOnDayPastDue});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantBillingInfoUpdate_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iLedgerID, 
                    int iCreditCardTypeID, 
                    string sCreditCardNum, 
                    System.DateTime dCredtiCardExpir, 
                    string sCreditCardHolderName, 
                    string sCreditCardStreet, 
                    string sCreditCardZip, 
                    int iAutoBillType, 
                    string sACH_CheckWriterAcctNum, 
                    string sACH_ABA_RoutingNum, 
                    string sACH_Check_SavingsCode, 
                    int iAutoBillOnDayPastDue) {
            this.TenantBillingInfoUpdate_v2Async(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iLedgerID, iCreditCardTypeID, sCreditCardNum, dCredtiCardExpir, sCreditCardHolderName, sCreditCardStreet, sCreditCardZip, iAutoBillType, sACH_CheckWriterAcctNum, sACH_ABA_RoutingNum, sACH_Check_SavingsCode, iAutoBillOnDayPastDue, null);
        }
        
        /// <remarks/>
        public void TenantBillingInfoUpdate_v2Async(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    int iLedgerID, 
                    int iCreditCardTypeID, 
                    string sCreditCardNum, 
                    System.DateTime dCredtiCardExpir, 
                    string sCreditCardHolderName, 
                    string sCreditCardStreet, 
                    string sCreditCardZip, 
                    int iAutoBillType, 
                    string sACH_CheckWriterAcctNum, 
                    string sACH_ABA_RoutingNum, 
                    string sACH_Check_SavingsCode, 
                    int iAutoBillOnDayPastDue, 
                    object userState) {
            if ((this.TenantBillingInfoUpdate_v2OperationCompleted == null)) {
                this.TenantBillingInfoUpdate_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantBillingInfoUpdate_v2OperationCompleted);
            }
            this.InvokeAsync("TenantBillingInfoUpdate_v2", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        iCreditCardTypeID,
                        sCreditCardNum,
                        dCredtiCardExpir,
                        sCreditCardHolderName,
                        sCreditCardStreet,
                        sCreditCardZip,
                        iAutoBillType,
                        sACH_CheckWriterAcctNum,
                        sACH_ABA_RoutingNum,
                        sACH_Check_SavingsCode,
                        iAutoBillOnDayPastDue}, this.TenantBillingInfoUpdate_v2OperationCompleted, userState);
        }
        
        private void OnTenantBillingInfoUpdate_v2OperationCompleted(object arg) {
            if ((this.TenantBillingInfoUpdate_v2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantBillingInfoUpdate_v2Completed(this, new TenantBillingInfoUpdate_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/BillingInfoByTenantIDForMobile", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet BillingInfoByTenantIDForMobile(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantId) {
            object[] results = this.Invoke("BillingInfoByTenantIDForMobile", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void BillingInfoByTenantIDForMobileAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantId) {
            this.BillingInfoByTenantIDForMobileAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantId, null);
        }
        
        /// <remarks/>
        public void BillingInfoByTenantIDForMobileAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantId, object userState) {
            if ((this.BillingInfoByTenantIDForMobileOperationCompleted == null)) {
                this.BillingInfoByTenantIDForMobileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillingInfoByTenantIDForMobileOperationCompleted);
            }
            this.InvokeAsync("BillingInfoByTenantIDForMobile", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantId}, this.BillingInfoByTenantIDForMobileOperationCompleted, userState);
        }
        
        private void OnBillingInfoByTenantIDForMobileOperationCompleted(object arg) {
            if ((this.BillingInfoByTenantIDForMobileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BillingInfoByTenantIDForMobileCompleted(this, new BillingInfoByTenantIDForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantNoteInsert", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantNoteInsert(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, string sNote) {
            object[] results = this.Invoke("TenantNoteInsert", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        sNote});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantNoteInsertAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, string sNote) {
            this.TenantNoteInsertAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iLedgerID, sNote, null);
        }
        
        /// <remarks/>
        public void TenantNoteInsertAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, string sNote, object userState) {
            if ((this.TenantNoteInsertOperationCompleted == null)) {
                this.TenantNoteInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantNoteInsertOperationCompleted);
            }
            this.InvokeAsync("TenantNoteInsert", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID,
                        sNote}, this.TenantNoteInsertOperationCompleted, userState);
        }
        
        private void OnTenantNoteInsertOperationCompleted(object arg) {
            if ((this.TenantNoteInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantNoteInsertCompleted(this, new TenantNoteInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/TenantNotesRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TenantNotesRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID) {
            object[] results = this.Invoke("TenantNotesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TenantNotesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID) {
            this.TenantNotesRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iLedgerID, null);
        }
        
        /// <remarks/>
        public void TenantNotesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iLedgerID, object userState) {
            if ((this.TenantNotesRetrieveOperationCompleted == null)) {
                this.TenantNotesRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTenantNotesRetrieveOperationCompleted);
            }
            this.InvokeAsync("TenantNotesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iLedgerID}, this.TenantNotesRetrieveOperationCompleted, userState);
        }
        
        private void OnTenantNotesRetrieveOperationCompleted(object arg) {
            if ((this.TenantNotesRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TenantNotesRetrieveCompleted(this, new TenantNotesRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/SiteLinkeSignAndeFilesRetrieve", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SiteLinkeSignAndeFilesRetrieve(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID) {
            object[] results = this.Invoke("SiteLinkeSignAndeFilesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SiteLinkeSignAndeFilesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID) {
            this.SiteLinkeSignAndeFilesRetrieveAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, iTenantID, null);
        }
        
        /// <remarks/>
        public void SiteLinkeSignAndeFilesRetrieveAsync(string sCorpCode, string sLocationCode, string sCorpUserName, string sCorpPassword, int iTenantID, object userState) {
            if ((this.SiteLinkeSignAndeFilesRetrieveOperationCompleted == null)) {
                this.SiteLinkeSignAndeFilesRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteLinkeSignAndeFilesRetrieveOperationCompleted);
            }
            this.InvokeAsync("SiteLinkeSignAndeFilesRetrieve", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        iTenantID}, this.SiteLinkeSignAndeFilesRetrieveOperationCompleted, userState);
        }
        
        private void OnSiteLinkeSignAndeFilesRetrieveOperationCompleted(object arg) {
            if ((this.SiteLinkeSignAndeFilesRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteLinkeSignAndeFilesRetrieveCompleted(this, new SiteLinkeSignAndeFilesRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallCenterWs/CallCenterWs/UnitAdd", RequestNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", ResponseNamespace="http://tempuri.org/CallCenterWs/CallCenterWs", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UnitAdd(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sUnitName, 
                    int UnitTypeID, 
                    decimal dcWidth, 
                    decimal dcLength, 
                    decimal dcStdRate, 
                    decimal dcStdWeeklyRate, 
                    decimal dcStdSecDep, 
                    decimal dcStdLateFee, 
                    int iFloor, 
                    bool bPower, 
                    bool bClimate, 
                    bool bInside, 
                    bool bAlarm, 
                    bool bCollapsible, 
                    bool bMobile, 
                    bool bCorporate, 
                    int iEntryLoc, 
                    int iDoorType, 
                    bool bRentable, 
                    int iADA, 
                    bool bExcludeFromWebsite) {
            object[] results = this.Invoke("UnitAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUnitName,
                        UnitTypeID,
                        dcWidth,
                        dcLength,
                        dcStdRate,
                        dcStdWeeklyRate,
                        dcStdSecDep,
                        dcStdLateFee,
                        iFloor,
                        bPower,
                        bClimate,
                        bInside,
                        bAlarm,
                        bCollapsible,
                        bMobile,
                        bCorporate,
                        iEntryLoc,
                        iDoorType,
                        bRentable,
                        iADA,
                        bExcludeFromWebsite});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UnitAddAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sUnitName, 
                    int UnitTypeID, 
                    decimal dcWidth, 
                    decimal dcLength, 
                    decimal dcStdRate, 
                    decimal dcStdWeeklyRate, 
                    decimal dcStdSecDep, 
                    decimal dcStdLateFee, 
                    int iFloor, 
                    bool bPower, 
                    bool bClimate, 
                    bool bInside, 
                    bool bAlarm, 
                    bool bCollapsible, 
                    bool bMobile, 
                    bool bCorporate, 
                    int iEntryLoc, 
                    int iDoorType, 
                    bool bRentable, 
                    int iADA, 
                    bool bExcludeFromWebsite) {
            this.UnitAddAsync(sCorpCode, sLocationCode, sCorpUserName, sCorpPassword, sUnitName, UnitTypeID, dcWidth, dcLength, dcStdRate, dcStdWeeklyRate, dcStdSecDep, dcStdLateFee, iFloor, bPower, bClimate, bInside, bAlarm, bCollapsible, bMobile, bCorporate, iEntryLoc, iDoorType, bRentable, iADA, bExcludeFromWebsite, null);
        }
        
        /// <remarks/>
        public void UnitAddAsync(
                    string sCorpCode, 
                    string sLocationCode, 
                    string sCorpUserName, 
                    string sCorpPassword, 
                    string sUnitName, 
                    int UnitTypeID, 
                    decimal dcWidth, 
                    decimal dcLength, 
                    decimal dcStdRate, 
                    decimal dcStdWeeklyRate, 
                    decimal dcStdSecDep, 
                    decimal dcStdLateFee, 
                    int iFloor, 
                    bool bPower, 
                    bool bClimate, 
                    bool bInside, 
                    bool bAlarm, 
                    bool bCollapsible, 
                    bool bMobile, 
                    bool bCorporate, 
                    int iEntryLoc, 
                    int iDoorType, 
                    bool bRentable, 
                    int iADA, 
                    bool bExcludeFromWebsite, 
                    object userState) {
            if ((this.UnitAddOperationCompleted == null)) {
                this.UnitAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnitAddOperationCompleted);
            }
            this.InvokeAsync("UnitAdd", new object[] {
                        sCorpCode,
                        sLocationCode,
                        sCorpUserName,
                        sCorpPassword,
                        sUnitName,
                        UnitTypeID,
                        dcWidth,
                        dcLength,
                        dcStdRate,
                        dcStdWeeklyRate,
                        dcStdSecDep,
                        dcStdLateFee,
                        iFloor,
                        bPower,
                        bClimate,
                        bInside,
                        bAlarm,
                        bCollapsible,
                        bMobile,
                        bCorporate,
                        iEntryLoc,
                        iDoorType,
                        bRentable,
                        iADA,
                        bExcludeFromWebsite}, this.UnitAddOperationCompleted, userState);
        }
        
        private void OnUnitAddOperationCompleted(object arg) {
            if ((this.UnitAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnitAddCompleted(this, new UnitAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitDeleteCompletedEventHandler(object sender, UnitDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitStatusUpdateCompletedEventHandler(object sender, UnitStatusUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitStatusUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitStatusUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitContentsUpdateCompletedEventHandler(object sender, UnitContentsUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitContentsUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitContentsUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitContentsRetrieveCompletedEventHandler(object sender, UnitContentsRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitContentsRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitContentsRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void BulletinBoardInsertCompletedEventHandler(object sender, BulletinBoardInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BulletinBoardInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BulletinBoardInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void POSItemsRetrieveCompletedEventHandler(object sender, POSItemsRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POSItemsRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POSItemsRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void POSItemUpdateInStockQuantityCompletedEventHandler(object sender, POSItemUpdateInStockQuantityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POSItemUpdateInStockQuantityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POSItemUpdateInStockQuantityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void POSItemAddToLedgerCompletedEventHandler(object sender, POSItemAddToLedgerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POSItemAddToLedgerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POSItemAddToLedgerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void POSItemPaymentCompletedEventHandler(object sender, POSItemPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POSItemPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POSItemPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void POSItemPaymentWithDiscountCompletedEventHandler(object sender, POSItemPaymentWithDiscountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class POSItemPaymentWithDiscountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal POSItemPaymentWithDiscountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaidThroughDateByLedgerIDCompletedEventHandler(object sender, PaidThroughDateByLedgerIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaidThroughDateByLedgerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaidThroughDateByLedgerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ChargeDescriptionsRetrieveCompletedEventHandler(object sender, ChargeDescriptionsRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargeDescriptionsRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargeDescriptionsRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ChargesAndPaymentsByLedgerIDCompletedEventHandler(object sender, ChargesAndPaymentsByLedgerIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargesAndPaymentsByLedgerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargesAndPaymentsByLedgerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PromotionsRetrieveCompletedEventHandler(object sender, PromotionsRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PromotionsRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PromotionsRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DiscountPlansRetrieveCompletedEventHandler(object sender, DiscountPlansRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DiscountPlansRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DiscountPlansRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DiscountPlansRetrieveIncludingDisabledCompletedEventHandler(object sender, DiscountPlansRetrieveIncludingDisabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DiscountPlansRetrieveIncludingDisabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DiscountPlansRetrieveIncludingDisabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void InsuranceCoverageRetrieveCompletedEventHandler(object sender, InsuranceCoverageRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsuranceCoverageRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsuranceCoverageRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void InsuranceCoverageAddToLedgerCompletedEventHandler(object sender, InsuranceCoverageAddToLedgerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsuranceCoverageAddToLedgerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsuranceCoverageAddToLedgerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LedgerProofOfInsuranceUpdateCompletedEventHandler(object sender, LedgerProofOfInsuranceUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LedgerProofOfInsuranceUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LedgerProofOfInsuranceUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void EmployeeLoginCompletedEventHandler(object sender, EmployeeLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmployeeLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmployeeLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SiteSearchByPostalCodeCompletedEventHandler(object sender, SiteSearchByPostalCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteSearchByPostalCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteSearchByPostalCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitTypePriceListCompletedEventHandler(object sender, UnitTypePriceListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitTypePriceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitTypePriceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitTypePriceList_v2CompletedEventHandler(object sender, UnitTypePriceList_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitTypePriceList_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitTypePriceList_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CorpUserListCompletedEventHandler(object sender, CorpUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CorpUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CorpUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void EmployeeListCompletedEventHandler(object sender, EmployeeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmployeeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmployeeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CorpUserSecurityUnlockCompletedEventHandler(object sender, CorpUserSecurityUnlockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CorpUserSecurityUnlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CorpUserSecurityUnlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void EmployeeSecurityUnlockCompletedEventHandler(object sender, EmployeeSecurityUnlockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmployeeSecurityUnlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmployeeSecurityUnlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CorpUserDisableCompletedEventHandler(object sender, CorpUserDisableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CorpUserDisableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CorpUserDisableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void EmployeeDisableCompletedEventHandler(object sender, EmployeeDisableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmployeeDisableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmployeeDisableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CorpUserPasswordResetCompletedEventHandler(object sender, CorpUserPasswordResetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CorpUserPasswordResetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CorpUserPasswordResetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void EmployeePasswordResetCompletedEventHandler(object sender, EmployeePasswordResetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmployeePasswordResetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmployeePasswordResetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitStandardRateUpdateCompletedEventHandler(object sender, UnitStandardRateUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitStandardRateUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitStandardRateUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitPushRateUpdateCompletedEventHandler(object sender, UnitPushRateUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitPushRateUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitPushRateUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitStandardRateUpdate_v2CompletedEventHandler(object sender, UnitStandardRateUpdate_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitStandardRateUpdate_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitStandardRateUpdate_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitStandardRateUpdate_v3CompletedEventHandler(object sender, UnitStandardRateUpdate_v3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitStandardRateUpdate_v3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitStandardRateUpdate_v3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitPushRateUpdate_v2CompletedEventHandler(object sender, UnitPushRateUpdate_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitPushRateUpdate_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitPushRateUpdate_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void NationalMasterAccountsRetrieveCompletedEventHandler(object sender, NationalMasterAccountsRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NationalMasterAccountsRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NationalMasterAccountsRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CCProcessorSiteCurrentTypeCompletedEventHandler(object sender, CCProcessorSiteCurrentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CCProcessorSiteCurrentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CCProcessorSiteCurrentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ACHProcessorSiteCurrentTypeCompletedEventHandler(object sender, ACHProcessorSiteCurrentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHProcessorSiteCurrentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHProcessorSiteCurrentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationBillingInfoUpdateCompletedEventHandler(object sender, ReservationBillingInfoUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationBillingInfoUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationBillingInfoUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationBillingInfoByTenantIDCompletedEventHandler(object sender, ReservationBillingInfoByTenantIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationBillingInfoByTenantIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationBillingInfoByTenantIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ScheduleMoveOutCompletedEventHandler(object sender, ScheduleMoveOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScheduleMoveOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScheduleMoveOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PhoneIntegrationPushCallInformationCompletedEventHandler(object sender, PhoneIntegrationPushCallInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PhoneIntegrationPushCallInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PhoneIntegrationPushCallInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CompetitorTrackingListCompletedEventHandler(object sender, CompetitorTrackingListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitorTrackingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitorTrackingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CompetitorTrackingAddCompletedEventHandler(object sender, CompetitorTrackingAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitorTrackingAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitorTrackingAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CompetitorTrackingUpdateCompletedEventHandler(object sender, CompetitorTrackingUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitorTrackingUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitorTrackingUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CompetitorAddCompletedEventHandler(object sender, CompetitorAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitorAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitorAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CompetitorUpdateCompletedEventHandler(object sender, CompetitorUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompetitorUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompetitorUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void KeypadZonesRetrieveCompletedEventHandler(object sender, KeypadZonesRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeypadZonesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeypadZonesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TimeZonesRetrieveCompletedEventHandler(object sender, TimeZonesRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimeZonesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TimeZonesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ScheduleTenantRateChangeCompletedEventHandler(object sender, ScheduleTenantRateChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScheduleTenantRateChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScheduleTenantRateChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ScheduleTenantRateChange_v2CompletedEventHandler(object sender, ScheduleTenantRateChange_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScheduleTenantRateChange_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScheduleTenantRateChange_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PostalCodeOwnerMarketsListCompletedEventHandler(object sender, PostalCodeOwnerMarketsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostalCodeOwnerMarketsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostalCodeOwnerMarketsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CallStoredProcedureCompletedEventHandler(object sender, CallStoredProcedureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallStoredProcedureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallStoredProcedureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CallStoredProcedure_v2CompletedEventHandler(object sender, CallStoredProcedure_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallStoredProcedure_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallStoredProcedure_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CallStoredProcedure_v3CompletedEventHandler(object sender, CallStoredProcedure_v3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallStoredProcedure_v3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallStoredProcedure_v3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SiteLinkeSignCreateLeaseURLCompletedEventHandler(object sender, SiteLinkeSignCreateLeaseURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteLinkeSignCreateLeaseURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteLinkeSignCreateLeaseURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SiteLinkeSignCreateLeaseURL_v2CompletedEventHandler(object sender, SiteLinkeSignCreateLeaseURL_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteLinkeSignCreateLeaseURL_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteLinkeSignCreateLeaseURL_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SiteLinkeSignCreateDocumentURLCompletedEventHandler(object sender, SiteLinkeSignCreateDocumentURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteLinkeSignCreateDocumentURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteLinkeSignCreateDocumentURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SiteLinkeSignGenerateDownloadUrlCompletedEventHandler(object sender, SiteLinkeSignGenerateDownloadUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteLinkeSignGenerateDownloadUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteLinkeSignGenerateDownloadUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void FormsRetrieveCompletedEventHandler(object sender, FormsRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormsRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FormsRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void EmployeeLoginCCCCompletedEventHandler(object sender, EmployeeLoginCCCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmployeeLoginCCCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmployeeLoginCCCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CustomBillingDateChargesCompletedEventHandler(object sender, CustomBillingDateChargesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomBillingDateChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomBillingDateChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DiscountPlanUpdateCompletedEventHandler(object sender, DiscountPlanUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DiscountPlanUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DiscountPlanUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DiscountPlanUnitTypesListCompletedEventHandler(object sender, DiscountPlanUnitTypesListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DiscountPlanUnitTypesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DiscountPlanUnitTypesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DiscountPlanUpdateSimpleCompletedEventHandler(object sender, DiscountPlanUpdateSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DiscountPlanUpdateSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DiscountPlanUpdateSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationFeeAddWithSourceForMobileStorageCompletedEventHandler(object sender, ReservationFeeAddWithSourceForMobileStorageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationFeeAddWithSourceForMobileStorageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationFeeAddWithSourceForMobileStorageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RefundPaymentCashCompletedEventHandler(object sender, RefundPaymentCashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefundPaymentCashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefundPaymentCashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RefundPaymentCheckCompletedEventHandler(object sender, RefundPaymentCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefundPaymentCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefundPaymentCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RefundPaymentCreditCardCompletedEventHandler(object sender, RefundPaymentCreditCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefundPaymentCreditCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefundPaymentCreditCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RefundPaymentApplyToDifferentUnitCompletedEventHandler(object sender, RefundPaymentApplyToDifferentUnitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefundPaymentApplyToDifferentUnitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefundPaymentApplyToDifferentUnitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ChargesAllByLedgerIDCompletedEventHandler(object sender, ChargesAllByLedgerIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargesAllByLedgerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargesAllByLedgerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ChargeDateUpdateCompletedEventHandler(object sender, ChargeDateUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargeDateUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargeDateUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ChargePriceUpdateCompletedEventHandler(object sender, ChargePriceUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargePriceUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargePriceUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ApplyCreditCompletedEventHandler(object sender, ApplyCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplyCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplyCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SiteLinkeSignPreviewLeaseURLCompletedEventHandler(object sender, SiteLinkeSignPreviewLeaseURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteLinkeSignPreviewLeaseURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteLinkeSignPreviewLeaseURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SiteLinkeSignPreviewDocumentURLCompletedEventHandler(object sender, SiteLinkeSignPreviewDocumentURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteLinkeSignPreviewDocumentURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteLinkeSignPreviewDocumentURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CallTrackingCampaignsRetrieveCompletedEventHandler(object sender, CallTrackingCampaignsRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallTrackingCampaignsRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallTrackingCampaignsRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CallTrackingCampaignsAddCompletedEventHandler(object sender, CallTrackingCampaignsAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallTrackingCampaignsAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallTrackingCampaignsAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CallTrackingCampaignsUpdateCompletedEventHandler(object sender, CallTrackingCampaignsUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallTrackingCampaignsUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallTrackingCampaignsUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CallTrackingCampaignsDeleteCompletedEventHandler(object sender, CallTrackingCampaignsDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallTrackingCampaignsDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallTrackingCampaignsDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MarketingSourcesAddCompletedEventHandler(object sender, MarketingSourcesAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarketingSourcesAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarketingSourcesAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MarketingSourcesUpdateCompletedEventHandler(object sender, MarketingSourcesUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarketingSourcesUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarketingSourcesUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MarketingSourcesDeleteCompletedEventHandler(object sender, MarketingSourcesDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarketingSourcesDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarketingSourcesDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LedgerTransferToNewTenantCompletedEventHandler(object sender, LedgerTransferToNewTenantCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LedgerTransferToNewTenantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LedgerTransferToNewTenantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantNewCompletedEventHandler(object sender, TenantNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantNewDetailedCompletedEventHandler(object sender, TenantNewDetailedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantNewDetailedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantNewDetailedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantNewDetailed_v2CompletedEventHandler(object sender, TenantNewDetailed_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantNewDetailed_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantNewDetailed_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantInfoByTenantIDCompletedEventHandler(object sender, TenantInfoByTenantIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantInfoByTenantIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantInfoByTenantIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantInvoicesByTenantIDCompletedEventHandler(object sender, TenantInvoicesByTenantIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantInvoicesByTenantIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantInvoicesByTenantIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInCostRetrieveCompletedEventHandler(object sender, MoveInCostRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInCostRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInCostRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInCostRetrieve_28DayBillingCompletedEventHandler(object sender, MoveInCostRetrieve_28DayBillingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInCostRetrieve_28DayBillingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInCostRetrieve_28DayBillingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInCostRetrieveWithDiscountCompletedEventHandler(object sender, MoveInCostRetrieveWithDiscountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInCostRetrieveWithDiscountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInCostRetrieveWithDiscountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CustomerAccountsBalanceDetailsWithDiscountCompletedEventHandler(object sender, CustomerAccountsBalanceDetailsWithDiscountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerAccountsBalanceDetailsWithDiscountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerAccountsBalanceDetailsWithDiscountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInCostRetrieveWithDiscount_28DayBillingCompletedEventHandler(object sender, MoveInCostRetrieveWithDiscount_28DayBillingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInCostRetrieveWithDiscount_28DayBillingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInCostRetrieveWithDiscount_28DayBillingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInCostRetrieveWithDiscount_28DayBilling_ReservationCompletedEventHandler(object sender, MoveInCostRetrieveWithDiscount_28DayBilling_ReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInCostRetrieveWithDiscount_28DayBilling_ReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInCostRetrieveWithDiscount_28DayBilling_ReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInCostRetrieveWithDiscount_ReservationCompletedEventHandler(object sender, MoveInCostRetrieveWithDiscount_ReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInCostRetrieveWithDiscount_ReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInCostRetrieveWithDiscount_ReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInCostRetrieveWithPushRateCompletedEventHandler(object sender, MoveInCostRetrieveWithPushRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInCostRetrieveWithPushRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInCostRetrieveWithPushRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInCompletedEventHandler(object sender, MoveInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInReservationCompletedEventHandler(object sender, MoveInReservationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInReservation_v2CompletedEventHandler(object sender, MoveInReservation_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInReservation_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInReservation_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInReservation_v3CompletedEventHandler(object sender, MoveInReservation_v3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInReservation_v3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInReservation_v3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInReservation_28DayBillingCompletedEventHandler(object sender, MoveInReservation_28DayBillingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInReservation_28DayBillingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInReservation_28DayBillingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInWithDiscountCompletedEventHandler(object sender, MoveInWithDiscountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInWithDiscountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInWithDiscountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInWithDiscount_28DayBillingCompletedEventHandler(object sender, MoveInWithDiscount_28DayBillingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInWithDiscount_28DayBillingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInWithDiscount_28DayBillingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInWithDiscount_v2CompletedEventHandler(object sender, MoveInWithDiscount_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInWithDiscount_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInWithDiscount_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInWithDiscount_v3CompletedEventHandler(object sender, MoveInWithDiscount_v3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInWithDiscount_v3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInWithDiscount_v3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInWithDiscount_v4CompletedEventHandler(object sender, MoveInWithDiscount_v4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInWithDiscount_v4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInWithDiscount_v4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveOutCompletedEventHandler(object sender, MoveOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantUpdateCompletedEventHandler(object sender, TenantUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantUpdate_v2CompletedEventHandler(object sender, TenantUpdate_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantUpdate_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantUpdate_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantUpdate_AdditionalContactCompletedEventHandler(object sender, TenantUpdate_AdditionalContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantUpdate_AdditionalContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantUpdate_AdditionalContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantUpdate_NationalAccountCompletedEventHandler(object sender, TenantUpdate_NationalAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantUpdate_NationalAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantUpdate_NationalAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantImageUploadCompletedEventHandler(object sender, TenantImageUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantImageUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantImageUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantImagePathUpdateCompletedEventHandler(object sender, TenantImagePathUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantImagePathUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantImagePathUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantImagePathRetrieveCompletedEventHandler(object sender, TenantImagePathRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantImagePathRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantImagePathRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PurchaseOrderNumberRetrieveCompletedEventHandler(object sender, PurchaseOrderNumberRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseOrderNumberRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseOrderNumberRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PurchaseOrderNumberUpdateCompletedEventHandler(object sender, PurchaseOrderNumberUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseOrderNumberUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseOrderNumberUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitsInformationCompletedEventHandler(object sender, UnitsInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitsInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitsInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitsInformation_v2CompletedEventHandler(object sender, UnitsInformation_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitsInformation_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitsInformation_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitsInformation_v3CompletedEventHandler(object sender, UnitsInformation_v3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitsInformation_v3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitsInformation_v3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitsInformationByUnitNameCompletedEventHandler(object sender, UnitsInformationByUnitNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitsInformationByUnitNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitsInformationByUnitNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitsInformationByUnitIDCompletedEventHandler(object sender, UnitsInformationByUnitIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitsInformationByUnitIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitsInformationByUnitIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitsInformationAvailableUnitsOnlyCompletedEventHandler(object sender, UnitsInformationAvailableUnitsOnlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitsInformationAvailableUnitsOnlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitsInformationAvailableUnitsOnlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitsInformationAvailableUnitsOnly_v2CompletedEventHandler(object sender, UnitsInformationAvailableUnitsOnly_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitsInformationAvailableUnitsOnly_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitsInformationAvailableUnitsOnly_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MapShapesRetrieveCompletedEventHandler(object sender, MapShapesRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MapShapesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MapShapesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationFeeRetrieveCompletedEventHandler(object sender, ReservationFeeRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationFeeRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationFeeRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationListCompletedEventHandler(object sender, ReservationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationList_v2CompletedEventHandler(object sender, ReservationList_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationList_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationList_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationList_v3CompletedEventHandler(object sender, ReservationList_v3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationList_v3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationList_v3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationListByTenantIDCompletedEventHandler(object sender, ReservationListByTenantIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationListByTenantIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationListByTenantIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantConnectSettingsRetrieveCompletedEventHandler(object sender, TenantConnectSettingsRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantConnectSettingsRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantConnectSettingsRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantConnectSettingsUpdateCompletedEventHandler(object sender, TenantConnectSettingsUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantConnectSettingsUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantConnectSettingsUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveInOutListCompletedEventHandler(object sender, MoveInOutListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveInOutListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveInOutListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ProrationInformationRetrieveCompletedEventHandler(object sender, ProrationInformationRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProrationInformationRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProrationInformationRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MarketingSourcesRetrieveCompletedEventHandler(object sender, MarketingSourcesRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarketingSourcesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarketingSourcesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantMarketingUpdateCompletedEventHandler(object sender, TenantMarketingUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantMarketingUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantMarketingUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantUpdateMilitaryCompletedEventHandler(object sender, TenantUpdateMilitaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantUpdateMilitaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantUpdateMilitaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantExitSurveyUpdateCompletedEventHandler(object sender, TenantExitSurveyUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantExitSurveyUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantExitSurveyUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantLoginAndSecurityUpdateCompletedEventHandler(object sender, TenantLoginAndSecurityUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantLoginAndSecurityUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantLoginAndSecurityUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LedgerBillingDayUpdateCompletedEventHandler(object sender, LedgerBillingDayUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LedgerBillingDayUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LedgerBillingDayUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void InsuranceRateUpdateCompletedEventHandler(object sender, InsuranceRateUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsuranceRateUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsuranceRateUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LedgerInvoiceUpdateCompletedEventHandler(object sender, LedgerInvoiceUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LedgerInvoiceUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LedgerInvoiceUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LedgerVehicleUpdateCompletedEventHandler(object sender, LedgerVehicleUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LedgerVehicleUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LedgerVehicleUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LedgerPurchaseOrderUpdateCompletedEventHandler(object sender, LedgerPurchaseOrderUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LedgerPurchaseOrderUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LedgerPurchaseOrderUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DeliveryFeeRetrieveCompletedEventHandler(object sender, DeliveryFeeRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeliveryFeeRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeliveryFeeRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RentTaxRatesRetrieveCompletedEventHandler(object sender, RentTaxRatesRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RentTaxRatesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RentTaxRatesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleCompletedEventHandler(object sender, PaymentSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleWithSourceCompletedEventHandler(object sender, PaymentSimpleWithSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleWithSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleWithSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleWithSource_v2CompletedEventHandler(object sender, PaymentSimpleWithSource_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleWithSource_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleWithSource_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleBankTransferWithSourceCompletedEventHandler(object sender, PaymentSimpleBankTransferWithSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleBankTransferWithSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleBankTransferWithSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentMultipleWithSourceCompletedEventHandler(object sender, PaymentMultipleWithSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentMultipleWithSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentMultipleWithSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentMultipleWithSource_v2CompletedEventHandler(object sender, PaymentMultipleWithSource_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentMultipleWithSource_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentMultipleWithSource_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleWithPrepaidDiscountCompletedEventHandler(object sender, PaymentSimpleWithPrepaidDiscountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleWithPrepaidDiscountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleWithPrepaidDiscountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleCashCompletedEventHandler(object sender, PaymentSimpleCashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleCashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleCashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleCashWithSourceCompletedEventHandler(object sender, PaymentSimpleCashWithSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleCashWithSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleCashWithSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleCheckCompletedEventHandler(object sender, PaymentSimpleCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleCheckWithSourceCompletedEventHandler(object sender, PaymentSimpleCheckWithSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleCheckWithSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleCheckWithSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleACHCompletedEventHandler(object sender, PaymentSimpleACHCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleACHCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleACHCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSimpleACHWithSourceCompletedEventHandler(object sender, PaymentSimpleACHWithSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSimpleACHWithSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSimpleACHWithSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationFeeAddCompletedEventHandler(object sender, ReservationFeeAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationFeeAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationFeeAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationFeeAddWithSourceCompletedEventHandler(object sender, ReservationFeeAddWithSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationFeeAddWithSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationFeeAddWithSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ChargeAddToLedgerCompletedEventHandler(object sender, ChargeAddToLedgerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargeAddToLedgerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargeAddToLedgerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ConvenienceFeeRetrieveCompletedEventHandler(object sender, ConvenienceFeeRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvenienceFeeRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvenienceFeeRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ConvenienceFeeAddCompletedEventHandler(object sender, ConvenienceFeeAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvenienceFeeAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvenienceFeeAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ConvenienceFeeRemoveCompletedEventHandler(object sender, ConvenienceFeeRemoveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvenienceFeeRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvenienceFeeRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LedgersByTenantIDCompletedEventHandler(object sender, LedgersByTenantIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LedgersByTenantIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LedgersByTenantIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentsByLedgerIDCompletedEventHandler(object sender, PaymentsByLedgerIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentsByLedgerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentsByLedgerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LedgerStatementByLedgerIDCompletedEventHandler(object sender, LedgerStatementByLedgerIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LedgerStatementByLedgerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LedgerStatementByLedgerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CustomerAccountsBalanceDetailsCompletedEventHandler(object sender, CustomerAccountsBalanceDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerAccountsBalanceDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerAccountsBalanceDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CustomerAccountsBalanceDetailsWithPrepaymentCompletedEventHandler(object sender, CustomerAccountsBalanceDetailsWithPrepaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerAccountsBalanceDetailsWithPrepaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerAccountsBalanceDetailsWithPrepaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CustomerAccountsChargesWithPrepaymentCompletedEventHandler(object sender, CustomerAccountsChargesWithPrepaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerAccountsChargesWithPrepaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerAccountsChargesWithPrepaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CustomerAccountsMakeFutureChargesCompletedEventHandler(object sender, CustomerAccountsMakeFutureChargesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerAccountsMakeFutureChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerAccountsMakeFutureChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SiteInformationCompletedEventHandler(object sender, SiteInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentSettingsCompletedEventHandler(object sender, PaymentSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationNewCompletedEventHandler(object sender, ReservationNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationNewWithSourceCompletedEventHandler(object sender, ReservationNewWithSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationNewWithSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationNewWithSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationNewWithSource_v2CompletedEventHandler(object sender, ReservationNewWithSource_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationNewWithSource_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationNewWithSource_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationNewWithSource_v3CompletedEventHandler(object sender, ReservationNewWithSource_v3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationNewWithSource_v3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationNewWithSource_v3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationNewWithSource_v4CompletedEventHandler(object sender, ReservationNewWithSource_v4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationNewWithSource_v4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationNewWithSource_v4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationNewWithSource_v5CompletedEventHandler(object sender, ReservationNewWithSource_v5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationNewWithSource_v5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationNewWithSource_v5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationUpdateCompletedEventHandler(object sender, ReservationUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationUpdate_v2CompletedEventHandler(object sender, ReservationUpdate_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationUpdate_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationUpdate_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationUpdate_v3CompletedEventHandler(object sender, ReservationUpdate_v3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationUpdate_v3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationUpdate_v3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationNoteInsertCompletedEventHandler(object sender, ReservationNoteInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationNoteInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationNoteInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReservationNotesRetrieveCompletedEventHandler(object sender, ReservationNotesRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReservationNotesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReservationNotesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantListCompletedEventHandler(object sender, TenantListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantListDetailedCompletedEventHandler(object sender, TenantListDetailedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantListDetailedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantListDetailedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantListDetailed_v2CompletedEventHandler(object sender, TenantListDetailed_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantListDetailed_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantListDetailed_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantListDetailed_v3CompletedEventHandler(object sender, TenantListDetailed_v3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantListDetailed_v3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantListDetailed_v3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantSearchDetailedCompletedEventHandler(object sender, TenantSearchDetailedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantSearchDetailedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantSearchDetailedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantListDetailedMovedInTenantsOnlyCompletedEventHandler(object sender, TenantListDetailedMovedInTenantsOnlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantListDetailedMovedInTenantsOnlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantListDetailedMovedInTenantsOnlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantIDByUnitNameOrAccessCodeCompletedEventHandler(object sender, TenantIDByUnitNameOrAccessCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantIDByUnitNameOrAccessCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantIDByUnitNameOrAccessCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantSMSOptInUpdateCompletedEventHandler(object sender, TenantSMSOptInUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantSMSOptInUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantSMSOptInUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantEmailOptInUpdateCompletedEventHandler(object sender, TenantEmailOptInUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantEmailOptInUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantEmailOptInUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LeadGenerationCompletedEventHandler(object sender, LeadGenerationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LeadGenerationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LeadGenerationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantLoginCompletedEventHandler(object sender, TenantLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantPasswordByEmailAddressCompletedEventHandler(object sender, TenantPasswordByEmailAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantPasswordByEmailAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantPasswordByEmailAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PaymentTypesRetrieveCompletedEventHandler(object sender, PaymentTypesRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentTypesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentTypesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantBillingInfoByTenantIDCompletedEventHandler(object sender, TenantBillingInfoByTenantIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantBillingInfoByTenantIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantBillingInfoByTenantIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantBillingInfoUpdateCompletedEventHandler(object sender, TenantBillingInfoUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantBillingInfoUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantBillingInfoUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantBillingInfoUpdate_v2CompletedEventHandler(object sender, TenantBillingInfoUpdate_v2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantBillingInfoUpdate_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantBillingInfoUpdate_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void BillingInfoByTenantIDForMobileCompletedEventHandler(object sender, BillingInfoByTenantIDForMobileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BillingInfoByTenantIDForMobileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BillingInfoByTenantIDForMobileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantNoteInsertCompletedEventHandler(object sender, TenantNoteInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantNoteInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantNoteInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void TenantNotesRetrieveCompletedEventHandler(object sender, TenantNotesRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TenantNotesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TenantNotesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SiteLinkeSignAndeFilesRetrieveCompletedEventHandler(object sender, SiteLinkeSignAndeFilesRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteLinkeSignAndeFilesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteLinkeSignAndeFilesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnitAddCompletedEventHandler(object sender, UnitAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnitAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnitAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591